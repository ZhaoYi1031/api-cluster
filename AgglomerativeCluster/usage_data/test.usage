if ( Kernel.getHeight ) { if ( Kernel.getWidth ) { } }
Objects.requireNonNull if ( ) { IllegalArgumentException.new } Objects.requireNonNull Objects.requireNonNull for ( ; ; ) { List<Object>.get List<Object>.set } for ( ; ; ) { List<Object>.get List<Object>.set } ArrayList.new for ( ; ; ) { List<Object>.get List<Object>.add } List<Object>.get HashSet.new
JTextComponent.selectAll Runnable.new SwingUtilities.invokeLater FocusAdapter.new JComponent.addFocusListener
String.valueOf if ( ) { String.valueOf }
if ( ) { Math.max }
String.toLowerCase Map<String,Integer>.get
if ( String.length ) { IllegalArgumentException.new }
File.new List<Object>.size List<Object>.size
return ( Vector.size )
if ( ) { NullPointerException.new } if ( ) { IllegalArgumentException.new }
KeyStroke.getKeyStroke
if ( ) { return ( NavigableMap<Object,NavigableMap<Object,NavigableMap<Object,NavigableMap<Long,Object>>>>.containsKey NavigableMap<Object,NavigableMap<Object,NavigableMap<Object,NavigableMap<Long,Object>>>>.get NavigableMap<Object,NavigableMap<Object,NavigableMap<Long,Object>>>.containsKey NavigableMap<Object,NavigableMap<Object,NavigableMap<Object,NavigableMap<Long,Object>>>>.get NavigableMap<Object,NavigableMap<Object,NavigableMap<Long,Object>>>.get NavigableMap<Object,NavigableMap<Long,Object>>.containsKey ) } else { return ( NavigableMap<Object,NavigableMap<Object,NavigableMap<Object,NavigableMap<Long,Object>>>>.containsKey NavigableMap<Object,NavigableMap<Object,NavigableMap<Object,NavigableMap<Long,Object>>>>.get NavigableMap<Object,NavigableMap<Object,NavigableMap<Long,Object>>>.containsKey NavigableMap<Object,NavigableMap<Object,NavigableMap<Object,NavigableMap<Long,Object>>>>.get NavigableMap<Object,NavigableMap<Object,NavigableMap<Long,Object>>>.get NavigableMap<Object,NavigableMap<Long,Object>>.containsKey NavigableMap<Object,NavigableMap<Object,NavigableMap<Object,NavigableMap<Long,Object>>>>.get NavigableMap<Object,NavigableMap<Object,NavigableMap<Long,Object>>>.get NavigableMap<Object,NavigableMap<Long,Object>>.get NavigableMap<Long,Object>.isEmpty NavigableMap<Object,NavigableMap<Object,NavigableMap<Object,NavigableMap<Long,Object>>>>.get NavigableMap<Object,NavigableMap<Object,NavigableMap<Long,Object>>>.get NavigableMap<Object,NavigableMap<Long,Object>>.get NavigableMap<Long,Object>.lastEntry Entry.getValue Arrays.equals ) }
if ( ) { if ( ) { Math.min } }
RuntimeException.new
if ( ) { List<Object>.size } else { List<Object>.size List<Object>.get }
Throwable.getLocalizedMessage
UUID.randomUUID UUID.toString for ( ) { if ( Arrays.equals ) { return ( ) } } StringBuilder.new StringBuilder.append StringBuilder.append for ( ) { if ( ) { StringBuilder.append } Arrays.toString StringBuilder.append } Arrays.toString StringBuilder.append StringBuilder.toString
if ( ) { if ( ) { Arrays.toString String.format IllegalStateException.new } }
Connection.setAutoCommit Connection.prepareStatement Connection.prepareStatement Connection.prepareStatement for ( ; ; ) { PreparedStatement.setInt PreparedStatement.setInt PreparedStatement.setString PreparedStatement.setString PreparedStatement.executeUpdate } Connection.commit Connection.setAutoCommit
SizeRequirements.new SizeRequirements.new
return ( JAXBElement<Object>.new )
if ( List<Object>.isEmpty ) { for ( ) { if ( ) { return ( String.compareTo ) } return ( ) Comparator<Object>.new Collections.sort } }
return ( Collection<Object>.size )
if ( List<Object>.size ) { List<Object>.size for ( ; List<Object>.size ; ) { List<Object>.add } List<Object>.size List<Object>.size while ( ) { while ( ) { List<Object>.get List<Object>.set } for ( ; ; ) { List<Object>.get List<Object>.set } } List<Object>.clear }
if ( ) { if ( ) { Object.getClass } } if ( ) { Class.getName Hashtable.get }
for ( ; ; ) { for ( ; ; ) { for ( ; ; ) { if ( Object.equals ) { } } } }
System.exit Exception.printStackTrace
Callable<Object>.new
if ( ) { if ( String.startsWith ) { return ( ) } } else { if ( String.length ) { return ( ) } if ( String.startsWith ) { return ( ) } }
ArrayList<Object>.size for ( ; ; ) { ArrayList<Object>.get Math.max }
ArrayList<Object>.new Collection<Object>.add
return ( Method.invoke ) RuntimeException.new RuntimeException.new if ( InvocationTargetException.getTargetException ) { InvocationTargetException.getTargetException } else { RuntimeException.new }
BigDecimal.new BigDecimal.new BigDecimal.new List<Object>.size List<Object>.get
System.arraycopy
Deque<Runnable>.addFirst
if ( ) { if ( ) { if ( ) { FramePeer.setMenuBar MenuBar.removeNotify } MenuBar.setParent } }
ArrayList.new for ( ; ArrayList.size ; ) { if ( ArrayList.get ) { ArrayList.get ArrayList.add } }
FileDescriptor.new if ( FileDescriptor.valid ) { }
Math.signum if ( Double.isInfinite ) { }
if ( Set<Object>.contains ) { }
return ( Arrays.copyOf )
Map<Class,String>.get if ( ) { return ( Class.getSimpleName ) }
if ( String.startsWith ) { IOException.new } URL.openConnection HttpURLConnection.setRequestMethod String.length Integer.toString HttpURLConnection.setRequestProperty HttpURLConnection.setUseCaches HttpURLConnection.setDoInput HttpURLConnection.setDoOutput HttpURLConnection.getOutputStream DataOutputStream.new DataOutputStream.writeBytes DataOutputStream.flush DataOutputStream.close if ( HttpURLConnection.getResponseCode ) { IOException.new } if ( ) { HttpURLConnection.disconnect }
Switch ( ) { default : IllegalStateException.new }
if ( ) { NullPointerException.new }
if ( ) { IllegalArgumentException.new }
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new }
for ( SortedMap<String,SortedSet<Object>>.keySet ) { for ( SortedMap<String,SortedSet<Object>>.get ) { } }
Logger.info Logger.info
return ( URLConnection.getContent )
FileInputStream.new
if ( ) { return ( NavigableMap<Object,Object>.headMap ) } else { if ( ) { return ( NavigableMap<Object,Object>.tailMap ) } else { return ( NavigableMap<Object,Object>.subMap ) } }
DateFormat.setTimeZone
File.new if ( File.exists ) { File.mkdirs }
BigDecimal.new for ( ; ; ) { if ( Boolean.booleanValue ) { BigDecimal.add } } DecimalFormat.format
if ( Vector<Object>.size ) { return ( ) } Vector.new for ( ) { if ( ) { Vector<Object>.addElement } }
HashMap<Object,Collection<Object>>.new for ( Map<Object,Object>.entrySet ) { Entry<Object,Object>.getValue Entry<Object,Object>.getKey Collection<Object>.add }
return ( Collectors.collectingAndThen )
if ( ) { IllegalArgumentException.new } Vector.get Vector.get Vector<TableColumn>.indexOf Vector<TableColumn>.indexOf if ( ) { Vector<TableColumn>.removeElementAt Vector<TableColumn>.insertElementAt }
System.getenv Paths.get Path.toString File.new if ( File.exists File.isDirectory ) { PrintStream.println URL.new MalformedURLException.printStackTrace IOException.printStackTrace }
if ( Set<String>.isEmpty ) { return ( ) } if ( ) { if ( Set<String>.size Set<String>.size ) { return ( ) } }
Math.abs
if ( ) { while ( Iterator<Object>.hasNext ) { Iterator<Object>.next } if ( ) { HashSet<String>.new while ( Iterator<Object>.hasNext ) { Iterator<Object>.next Set<String>.add } if ( Set<String>.size ) { } } }
Map<,>.size
return ( Iterable<>.iterator )
return ( Date.before Date.after )
ByteBuffer.allocate ByteBuffer.order
if ( ArrayList<Object>.size ) { return ( ) } return ( ArrayList<Object>.get )
if ( ) { Class<>.getConstructor Constructor<>.newInstance SecurityException.printStackTrace NoSuchMethodException.printStackTrace IllegalArgumentException.printStackTrace InstantiationException.printStackTrace IllegalAccessException.printStackTrace InvocationTargetException.printStackTrace } if ( ) { Class.getDeclaredMethod Method.invoke SecurityException.printStackTrace NoSuchMethodException.printStackTrace IllegalArgumentException.printStackTrace IllegalAccessException.printStackTrace InvocationTargetException.printStackTrace }
StringBuilder.new StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append return ( StringBuilder.toString )
if ( ) { TreeMap<Integer,Object>.new } else { TreeMap<Integer,Object>.new }
if ( ) { if ( ColorModel.getColorSpace ColorModel.getColorSpace ) { if ( ColorModel.getColorSpace ColorModel.getColorSpace ) { } } }
if ( ) { IllegalArgumentException.new } Math.min Math.min Math.min Math.max Math.max Math.max
ArrayList<String>.new SearchControls.new SearchControls.setReturningObjFlag SearchControls.setSearchScope SearchControls.setReturningAttributes InitialDirContext.search while ( NamingEnumeration<SearchResult>.hasMore ) { NamingEnumeration<SearchResult>.nextElement SearchResult.getAttributes if ( ) { Attributes.get Attribute.getAll while ( NamingEnumeration<>.hasMoreElements ) { NamingEnumeration<>.nextElement List<String>.add } } } if ( List<String>.isEmpty ) { }
if ( ComboBoxModel.getSize ) { }
if ( ) { RuntimeException.new }
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } InputSource.new InputSource.setSystemId
for ( ) { File.getName if ( String.toLowerCase Pattern.matcher ) { break } }
if ( ) { if ( String.equals ) { if ( List.size ) { List.get } } else { if ( String.equals ) { Integer.parseInt List.iterator while ( Iterator.hasNext ) { Iterator.next if ( Integer.new ) { break } } } } }
return ( Integer.intValue )
return ( Set.iterator )
for ( ; List.getItemCount ; ) { }
BigInteger.new BigInteger.new if ( BigInteger.equals ) { } BigInteger.divide BigInteger.toByteArray
for ( ) { if ( ) { List<Object>.add } }
List<String>.isEmpty List<String>.isEmpty
if ( ) { NoSuchElementException.new }
GridBagLayout.new JPanel.new JLabel.new JPanel.add JPanel.add JPanel.setBorder for ( ; List<Object>.size ; ) { List<Object>.get if ( ) { List<Object>.add } } if ( List<Object>.isEmpty ) { } Runnable.new
System.arraycopy System.arraycopy
RuntimeException.new
if ( ) { InputStreamReader.new BufferedReader.new return ( ) }
while ( Iterator<Object>.hasNext ) { Iterator<Object>.next }
Logger.entering if ( ) { Exception.getMessage }
if ( ) { PrintStream.println return ( ) } File.new ZipFile.new for ( ) { if ( ) { PrintStream.println for ( ) { PrintStream.println for ( ) { PrintStream.println } } } }
InvalidAddressHelper.read
File.getPath File.getPath
System.currentTimeMillis Integer.toString
if ( ) { NullPointerException.new }
ByteArrayOutputStream.new ObjectOutputStream.new ObjectOutputStream.writeObject ByteArrayOutputStream.toByteArray ByteArrayInputStream.new ObjectInputStream.new ObjectInputStream.readObject
IllegalArgumentException.new
String.indexOf String.length if ( String.length ) { String.substring String.indexOf if ( ) { String.substring } return ( ) }
if ( JFileChooser.getDialogType ) { }
DatagramSocket.receive DatagramPacket.getData return ( DatagramPacket.getData ) IOException.printStackTrace
return ( List<String>.iterator IteratorEnumeration.new )
return ( String.toLowerCase String.toLowerCase String.format )
Connection.prepareStatement PreparedStatement.executeQuery if ( ) { SQLException.printStackTrace } if ( ) { PreparedStatement.close } if ( ) { ResultSet.close }
if ( ) { IllegalArgumentException.new }
Writer.write IOException.toString Logger.log
Date.clone GregorianCalendar.new Calendar.setTime Calendar.get
Map<String,String>.putAll if ( ) { for ( Map<String,String>.keySet ) { } }
if ( String.matches ) { String.format }
return ( Integer.intValue )
Map<Object,>.containsKey Math.max for ( ; ; ) { continue for ( ; ; ) { if ( ) { if ( Map<Object,>.containsKey ) { EnumMap.new Map<Object,Object>.putAll Map<Object,Object>.remove } } return ( ) } }
String.length StringBuilder.new for ( ; ; ) { String.charAt StringBuilder.append } return ( StringBuilder.toString )
if ( String.startsWith ) { return ( ) } if ( Hashtable.get ) { Hashtable.put } if ( ) { if ( String.equals ) { return ( ) } }
for ( NetworkInterface.getNetworkInterfaces ; Enumeration.hasMoreElements ; ) { Enumeration.nextElement for ( NetworkInterface.getInetAddresses ; Enumeration.hasMoreElements ; ) { Enumeration.nextElement if ( InetAddress.isLoopbackAddress ) { return ( InetAddress.getHostAddress ) } } }
while ( Enumeration<String>.hasMoreElements ) { Enumeration<String>.nextElement if ( String.equals ) { } }
Integer.valueOf
return ( HashSet<Object>.new Collections.unmodifiableSet )
if ( List<Object>.size ) { } List<Object>.add List<Object>.add
InetAddress.getHostAddress
Switch ( ) { default : IllegalArgumentException.new }
HashMap<String,Object>.clear HashMap<String,HashSet<Object>>.clear HashSet<Object>.clear HashMap<String,Object>.clear
return ( Arrays.asList )
if ( List<Object>.size ) { return ( List<Object>.get ) }
while ( InputStream.read ) { OutputStream.write } IOException.printStackTrace
if ( String.length ) { return ( Map<Attribute,List<Range>>.keySet ) } Map<Attribute,List<Range>>.size HashSet<Attribute>.new Map<Attribute,List<Range>>.entrySet Set.iterator while ( Iterator<Entry<Attribute,List<Range>>>.hasNext ) { Iterator<Entry<Attribute,List<Range>>>.next if ( Entry<Attribute,List<Range>>.getKey HashSet<Attribute>.contains ) { Entry<Attribute,List<Range>>.getValue if ( ) { Entry<Attribute,List<Range>>.getKey Set<Attribute>.add } } }
return ( Float.floatToIntBits )
String.new String.new String.new return ( String.toCharArray )
StringBuffer.new StringBuffer.append StringBuffer.toString Connection.prepareStatement PreparedStatement.setString PreparedStatement.setString PreparedStatement.executeQuery if ( ResultSet.next ) { ResultSet.getString } ResultSet.close PreparedStatement.close return ( String.trim )
for ( ) { if ( HashMap<String,Object>.containsKey ) { HashMap<String,Object>.put } }
StringBuilder.new for ( ) { if ( ) { StringBuilder.append } Error.message StringBuilder.append } return ( StringBuilder.toString )
return ( ArrayList<Object>.size )
HashMap.new HashMap.new ArrayList.new
Object.getClass Class.getName IllegalArgumentException.new
JSplitPane.remove if ( JSplitPane.getBackground ) { JSplitPane.setBackground } if ( JSplitPane.getBorder ) { JSplitPane.setBorder }
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } if ( ) { NullPointerException.new }
return ( ArrayList<Object>.new )
return ( Collections.emptyList )
return ( String.join )
Boolean.new Boolean.toString for ( ; Iterator.hasNext ; ) { Iterator.next } for ( ; Iterator.hasNext ; ) { Iterator.next } if ( Map.keySet Set.size ) { String.valueOf for ( Map.keySet Set.iterator ; Iterator.hasNext ; ) { Iterator.next Map.get Object.toString } }
if ( Collection<String>.size ) { if ( ) { Arrays.asList List<String>.addAll } } else { List<String>.clear List<String>.addAll }
HashMap<String,Object>.keySet Set<String>.iterator HashMap<String,Object>.new while ( Iterator<String>.hasNext ) { Iterator<String>.next HashMap<String,Object>.get if ( ) { HashMap<String,Object>.put } }
if ( String.isEmpty ) { File.new if ( File.exists ) { if ( File.delete ) { File.getAbsolutePath } } File.getAbsolutePath }
if ( URL.getClass Object.getClass ) { return ( ) } return ( URLStreamHandler.equals )
String.trim
QName.new Map<String,String>.get Map<String,String>.get Map<String,String>.get Map<String,String>.get Map<String,String>.get QName.new QName.new
LinkedList.new return ( List.size List.toArray )
if ( ) { if ( ) { IllegalArgumentException.new } }
HashMap<String,Object>.new if ( ) { Map<String,Object>.keySet Arrays.asList Set.removeAll }
Map<String,String>.putAll if ( ) { for ( Map<String,String>.keySet ) { } }
if ( ) { IllegalArgumentException.new } Long.parseLong
if ( ) { PropertyChangeSupport.removePropertyChangeListener }
ReentrantLock.lock return ( StringBuilder.new ) if ( ReentrantLock.isLocked ) { ReentrantLock.unlock }
IllegalStateException.new Runnable.new
String[].clone
ArrayList<X509Certificate>.new Collection<X509Certificate>.add
Map<String,Long>.get System.currentTimeMillis if ( ) { Map<String,Long>.put }
Calendar.getInstance
if ( ) { StringBuilder.new StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.toString StringBuilder.new for ( ) { if ( StringBuilder.length ) { StringBuilder.append } StringBuilder.append StringBuilder.append } StringBuilder.toString }
if ( ) { String.getBytes UnsupportedEncodingException.printStackTrace }
if ( ) { if ( List<Object>.size ) { } if ( List<Object>.size ) { List<Object>.get } }
StringBuffer.new for ( ; ; ) { Integer.toHexString if ( String.length ) { StringBuffer.append } StringBuffer.append } return ( StringBuffer.toString )
if ( ) { IllegalArgumentException.new } if ( ) { ArrayList.new } List<String>.add List<String>.add
Point.new Point.new Math.atan2 Math.cos Math.sin Point.new Point.translate Point.translate if ( ) { Point.new Point.new }
Switch ( ) { default : AssertionError.new }
ObjectInputStream.defaultReadObject if ( ) { String.intern Error.new }
return ( InetAddress.getByAddress )
RuntimeException.new
DecimalFormat.new DecimalFormat.setMaximumFractionDigits DecimalFormat.setMinimumFractionDigits DecimalFormat.format
HashMap<String,String>.get if ( String.equals ) { return ( ) } if ( String.startsWith ) { return ( String.length String.substring ) }
ExecutableElement.getEnclosingElement
if ( ) { IllegalArgumentException.new }
return ( JAXBElement<Object>.new )
if ( ) { if ( ) { if ( ByteBuffer.remaining ) { ByteBuffer.position ByteBuffer.capacity ByteBuffer.limit } else { ByteBuffer.duplicate ByteBuffer.position ByteBuffer.capacity ByteBuffer.limit ByteBuffer.put } return ( ) } if ( ) { IllegalStateException.new } ByteBuffer.allocate ByteBuffer.put ByteBuffer.order } else { ByteBuffer.compact }
ArrayList.new List<Object>.add if ( ) { List<Object>.add }
Integer.valueOf
if ( ) { IllegalArgumentException.new } if ( ) { ThreadPoolExecutor.setCorePoolSize }
MouseAdapter.new GroupLayout.new GroupLayout.createParallelGroup ParallelGroup.addGap GroupLayout.setHorizontalGroup GroupLayout.createParallelGroup ParallelGroup.addGap GroupLayout.setVerticalGroup
if ( Collection<>.isEmpty ) { }
BufferedInputStream.reset
return ( Integer.intValue )
System.currentTimeMillis while ( System.currentTimeMillis ) { Set.iterator while ( Iterator.hasNext ) { Iterator.next if ( String.startsWith ) { if ( Long.longValue ) { Long.longValue break } } } if ( ) { Thread.sleep Exception.printStackTrace } }
if ( ) { JPopupMenu.getComponentIndex }
if ( List<Object>.size ) { IOException.new } List<Object>.size List<Object>.toArray DataOutputStream.new for ( ; ; ) { if ( ) { while ( ) { for ( ; List<Object>.size ; ) { List<Object>.get } } } } DataOutputStream.close
AtomicInteger.set
if ( Class.isAssignableFrom ) { return ( ) } if ( Class.isAssignableFrom ) { return ( ) } if ( Class.isAssignableFrom ) { return ( ) }
return ( Files.readAllBytes )
JPanel.new Dimension.new Dimension.new JPanel.setPreferredSize BorderLayout.new JPanel.setLayout GroupLayout.new GroupLayout.createParallelGroup ParallelGroup.addComponent GroupLayout.setHorizontalGroup GroupLayout.createParallelGroup ParallelGroup.addComponent GroupLayout.setVerticalGroup
return ( Arrays.asList )
if ( ) { File.exists } if ( ) { String.endsWith } if ( ) { String.endsWith } if ( File.canRead ) { return ( ) } File.length FileInputStream.new DataInputStream.new DataInputStream.close
if ( ) { Math.min Math.max Math.min Math.max if ( ) { Integer.toHexString Integer.toHexString } }
String.valueOf String.length PrintStream.print
LinkedHashMap<String,Object>.clear
if ( String.isEmpty ) { }
if ( File.exists ) { FileInputStream.new ObjectInputStream.new ObjectInput.readInt if ( ) { Map.get } ObjectInput.readObject if ( InetAddress.equals ) { return ( ) } ObjectInput.close return ( ) Exception.printStackTrace if ( ) { FileInputStream.close } if ( File.delete File.exists ) { } if ( ) { FileInputStream.close } }
File.mkdirs File.list if ( ) { IOException.new } for ( ) { if ( String.charAt ) { continue } File.new File.new if ( File.isDirectory ) { File.lastModified File.setLastModified } }
return ( JFrame.getExtendedState )
AtomicReference<Object>.new
Map<String,List<String>>.remove
Set<Object>.add if ( Map<String,Integer>.containsKey ) { Map<String,Integer>.put } else { Map<String,Integer>.get Map<String,Integer>.put } String.replace
Set<Integer>.add
if ( List<Object>.isEmpty ) { return ( List<Object>.get ) }
if ( ) { if ( String.length ) { } return ( ) }
List.add List.size List.toArray
if ( ) { List<Object>.get if ( ) { List<Object>.remove Math.min Math.max return ( ) } return ( ) }
JPanel.removeAll FlowLayout.new JPanel.setLayout for ( ; ; ) { if ( ) { String.valueOf } else { String.valueOf } if ( ) { JPanel.add } } JToggleButton.setText Dimension.new JToggleButton.setPreferredSize ResourceBundle.getBundle ResourceBundle.getString JToggleButton.setToolTipText JToggleButton.addActionListener JPanel.add JPanel.add JToggleButton.setText Dimension.new JToggleButton.setPreferredSize ResourceBundle.getBundle ResourceBundle.getString JToggleButton.setToolTipText JPanel.add
Math.ceil
return ( AccessController.doPrivileged )
if ( ) { IllegalArgumentException.new } else { if ( ) { IllegalArgumentException.new } else { if ( ) { IllegalArgumentException.new } } }
if ( List<Object>.size ) { for ( ; List<Object>.size ; ) { List<Object>.get } }
Object.getClass if ( ) { Class.getName IllegalArgumentException.new } else { if ( ) { return ( Long.longValue ) } else { Class.getName Object.getClass Class.getName IllegalArgumentException.new } }
for ( Map<Object,Object>.values ) { }
if ( ) { if ( ) { if ( ) { List<Object>.add } else { List<Object>.add } } } else { List<Object>.add }
if ( ) { List<Object>.size AtomicInteger.new for ( ) { Set<String>.contains Throwable.getMessage if ( AtomicInteger.decrementAndGet ) { } } }
ArrayList<Object>.new
if ( ) { DestroyFailedException.new }
if ( String.equals ) { }
if ( ) { Thread.currentThread Thread.getId } if ( ) { RuntimeException.new } if ( ) { RuntimeException.new } if ( ) { RuntimeException.new } WeakReference<Object>.get
if ( ) { HashMap<String,String>.new } Map<File,Object>.get if ( ) { Map<File,Object>.put }
HashMap<String,List<Object>>.new for ( ) { for ( ) { if ( Map<String,List<Object>>.containsKey ) { ArrayList<Object>.new Map<String,List<Object>>.put } Map<String,List<Object>>.get } } Map<String,List<Object>>.values ArrayList<Object>.new for ( Map<String,List<Object>>.values ) { List<Object>.get List<Object>.add }
List<Object>.iterator
if ( ) { RuntimeException.new } if ( ) { ArrayList<Object>.get if ( ) { ArrayList<Object>.set return ( ) } }
if ( ) { Principal.getName } else { Principal.getName } Principal.getName SecurityException.getMessage
LinkedHashMap<String,String>.new Map<String,String>.put
HashSet.new Set<Object>.add
return ( GraphicsConfiguration.createCompatibleImage )
if ( ) { Signature.initSign } else { if ( ) { Cipher.init } } SSLException.new
Timer.stop
Map<String,Object>.remove
FileOutputStream.new BufferedOutputStream.new ZipOutputStream.new for ( ) { if ( File.exists ) { if ( File.getAbsolutePath File.getAbsolutePath String.contains ) { File.toURI File.getParentFile File.toURI URI.relativize URI.getPath if ( String.length ) { String.length String.substring } } } } ZipOutputStream.close
if ( ) { IllegalStateException.new } ArrayList<Object>.get ArrayList<Object>.size ArrayList<Object>.get
if ( String.isEmpty ) { Integer.parseInt }
Set<Object>.addAll Set<Object>.addAll
String.getBytes ByteArrayInputStream.new XPathFactory.newInstance XPathFactory.newXPath XPath.evaluate if ( ) { if ( ) { return ( Attr.getValue ) } else { if ( ) { return ( Text.getTextContent ) } } }
if ( ) { Statement.execute } else { Statement.execute } Statement.getGeneratedKeys if ( ) { Statement.executeUpdate } else { Statement.executeUpdate } Statement.getGeneratedKeys Statement.close PreparedStatement.execute PreparedStatement.getGeneratedKeys PreparedStatement.executeUpdate PreparedStatement.getGeneratedKeys PreparedStatement.close
Graphics.drawChars return ( FontMetrics.charWidth )
if ( ) { NullPointerException.new } TreeMap<Object,Object>.get if ( ) { IllegalArgumentException.new }
ArrayList<Object>.new
if ( ) { Properties.new } Properties.getProperty DriverPropertyInfo.new Properties.getProperty DriverPropertyInfo.new
Switch ( ) { default : IllegalStateException.new }
for ( ) { Math.abs String.format if ( ) { String.format break } }
for ( ; ; ) { if ( String.equals String.equals ) { IllegalArgumentException.new } if ( String.startsWith ) { String.substring } } if ( File.isDirectory ) { File.getPath IOException.new } if ( File.exists ) { File.getName }
return ( CopyOnWriteArrayList<Object>.addAllAbsent )
if ( Collection<String>.size ) { IllegalArgumentException.new } ArrayList<Object>.new for ( ) { if ( ) { Collection<Object>.add } }
OutputStream.close
if ( ) { Thread.new Thread.start Thread.join }
return ( String.new ) AssertionError.new
Switch ( ) { default : RuntimeException.new } return ( CharSequence.toString )
Thread.currentThread if ( ) { if ( ) { if ( ) { Error.new } return ( ) } }
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } if ( ) { return ( Math.log ) } else { Math.pow return ( ) }
return ( List.size )
StringBuilder.new for ( ; ; ) { if ( ) { StringBuilder.append } StringBuilder.append } return ( StringBuilder.append StringBuilder.toString )
JPopupMenu.new HashMap<String,Object>.new
if ( String.isEmpty ) { IllegalArgumentException.new } if ( String.isEmpty ) { IllegalArgumentException.new }
Switch ( ) { case : System.currentTimeMillis break default : RuntimeException.new }
if ( File.isDirectory ) { return ( ) } File.listFiles System.currentTimeMillis for ( ) { if ( File.lastModified ) { if ( File.delete ) { } } } Runnable.new
for ( Map<String,String>.entrySet ) { Entry<String,String>.getKey Entry<String,String>.getValue } System.currentTimeMillis System.currentTimeMillis
UnsupportedOperationException.new
if ( ) { if ( ) { NullPointerException.new } }
return ( Collections.unmodifiableCollection )
if ( ) { StringBuffer.new if ( ) { StringBuffer.append } if ( ) { if ( ) { StringBuffer.append } StringBuffer.append } StringBuffer.toString }
Switch ( ) { case : StringBuffer.new for ( ; ; ) { StringBuffer.append } return ( StringBuffer.toString ) default : return ( String.new String.replace ) }
if ( Pattern.matcher Matcher.find ) { return ( ) } for ( ) { String.replace }
return ( Hashtable.keys )
return ( Long.toString )
if ( ) { IllegalArgumentException.new }
Manifest.getMainAttributes Attributes.getValue Attributes.getValue if ( ) { IllegalArgumentException.new }
return ( Map<String,Object>.get )
JOptionPane.showMessageDialog
return ( ArrayList<Object>.new )
RandomAccessFile.seek RandomAccessFile.readUnsignedShort RandomAccessFile.readUnsignedShort for ( ; ; ) { RandomAccessFile.readUnsignedShort }
UUID.randomUUID Map<String,UUID>.put
if ( ) { if ( List.isEmpty ) { return ( ) } return ( ) }
for ( ) { File.getName if ( HashMap<Object,Object>.containsKey ) { if ( ) { File.lastModified } } }
do { InputStream.read } while ( ) ; if ( ) { IOException.new }
if ( Set<Object>.add ) { PrintWriter.println return ( ) } PrintWriter.println Map<Object,Object>.get if ( ) { PrintWriter.println } else { if ( ) { PrintWriter.println } else { if ( ) { PrintWriter.println } else { if ( ) { PrintWriter.println } else { AssertionError.new } } } }
System.getProperty if ( ) { return ( System.getenv ) }
if ( ) { if ( ) { NullPointerException.new } List<Object>.add }
for ( ) { Integer.toString }
Object.new
if ( String.indexOf ) { String.substring } if ( String.indexOf ) { String.substring } String.indexOf if ( ) { String.substring }
Class.getName
ReentrantReadWriteLock.writeLock WriteLock.unlock
if ( ) { return ( Comparable.compareTo ) } else { return ( Comparator.compare ) }
List<Object>.add List<Object>.add
return ( StringBuilder.new StringBuilder.append StringBuilder.append StringBuilder.append )
if ( Thread.interrupted ) { InterruptedException.new } System.currentTimeMillis while ( System.currentTimeMillis ) { if ( ) { Thread.sleep } }
if ( String.length String.length ) { return ( ) } String.length String.charAt String.charAt Character.isLetterOrDigit Character.isLetterOrDigit Character.isWhitespace Character.isWhitespace Character.getType Character.getType Pattern.matcher Matcher.find Pattern.matcher Matcher.find
HashMap<String,Package>.get if ( ) { if ( ) { ClassLoader.getPackage } if ( ) { HashMap<String,Package>.get if ( ) { HashMap<String,Package>.put } } }
if ( ) { IllegalArgumentException.new }
if ( ) { TimeUnit.toMillis Math.min } if ( ) { TimeUnit.toMillis } if ( ) { TimeUnit.toMillis }
return ( String.replace )
if ( ) { IllegalArgumentException.new }
for ( ) { Math.min System.arraycopy }
Callable<Void>.new
String.format
return ( ByteArrayInputStream.new )
return ( String.length String.indexOf String.indexOf String.indexOf String.indexOf String.indexOf String.indexOf String.indexOf String.indexOf String.indexOf )
ArrayList.new if ( Proxy.type Proxy.type ) { Proxy.address if ( ) { SocketAddress.getClass IllegalArgumentException.new } InetSocketAddress.getPort } if ( ) { SocketException.new } if ( Proxy.type ) { InetSocketAddress.createUnresolved List<InetSocketAddress>.add } else { for ( List<InetAddress>.size ; ; ) { List<InetAddress>.get InetSocketAddress.new List<InetSocketAddress>.add } }
List<Object>.remove
Integer.parseInt if ( ) { NumberFormatException.new }
while ( ) { if ( ConcurrentMap<Object,Object<Object,Object>Object>.remove ) { Queue<Object<Object,Object>Object>.add } }
HashMap<String,Long>.remove System.currentTimeMillis Long.valueOf HashMap<String,Long>.put
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new }
URLConnection.getClass Class.getName String.startsWith URLConnection.setUseCaches
if ( ) { IllegalArgumentException.new } ArrayList<Object>.add ArrayList<Object>.add
if ( ) { Object.hashCode DecimalFormat.format }
if ( ) { AccessibleAWTPopupMenu.new }
List<Object>.stream Optional<Integer>.get PrintStream.println
AssertionError.new
if ( ) { IllegalArgumentException.new }
return ( SSLSocketFactory.createSocket )
Object.hashCode for ( ; ; ) { if ( Object.equals ) { return ( ) } }
System.getProperty File.new FileWriter.new FileWriter.write FileWriter.close File.setReadable File.setWritable File.length Preferences.userRoot Preferences.sync Preferences.put Preferences.flush File.exists File.length
if ( ) { IllegalArgumentException.new }
List<Object>.clear
if ( ) { String.replace if ( String.charAt ) { String.length String.substring } if ( String.length String.charAt ) { String.length String.substring } } Consumer<Object>.new Runnable.new
if ( String.equals ) { return ( ) }
System.currentTimeMillis Notification.new NotificationBroadcasterSupport.sendNotification NotificationBroadcasterSupport.sendNotification
if ( ) { Map.put Set.remove }
return ( Properties.getProperty )
StringBuilder.new String.charAt StringBuilder.append if ( ) { while ( ) { String.charAt StringBuilder.append } } else { while ( ) { String.charAt StringBuilder.append } } return ( StringBuilder.toString )
List<Object>.add
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new }
if ( ) { Point.new }
return ( String.format String.format )
Map<Object,Object>.size for ( Map<Object,Object>.entrySet ) { Entry<Object,Object>.getKey Entry<Object,Object>.getValue }
List<Object>.remove
System.arraycopy
if ( ) { PrintStream.println }
CountDownLatch.countDown
Arrays.asList
return ( Set<URI>.contains )
if ( ) { IllegalArgumentException.new }
return ( Integer.intValue )
Queue<Object>.add
return ( Object.toString )
Long.valueOf if ( ) { return ( BigInteger.valueOf ) }
ArrayBlockingQueue<Runnable>.new CallerRunsPolicy.new ThreadPoolExecutor.new
return ( ORB.create_string_tc ORB.create_alias_tc )
ReentrantLock.lock ReentrantLock.unlock
ArrayList<Object>.new for ( ) { while ( ) { List<Object>.add } } List<Object>.add
for ( Collection<Object>.iterator ; Iterator.hasNext ; ) { Iterator.next } if ( ) { for ( ConcurrentMap.values Collection.iterator ; Iterator.hasNext ; ) { Iterator.next } }
ArrayList<Object>.size
return ( Class.getName )
Integer.parseInt
for ( ) { if ( ) { if ( String.startsWith String.endsWith ) { } } }
if ( ) { IllegalArgumentException.new } HashSet<Object>.new
return ( MBeanConstructorInfo[].clone )
BigInteger.new BigDecimal.new BigInteger.new BigDecimal.new BigDecimal.divide BigDecimal.toString
Throwable.getMessage if ( ) { Throwable.printStackTrace } if ( ) { Throwable.printStackTrace }
if ( AtomicInteger.decrementAndGet ) { }
if ( ) { StringBuilder.new String.valueOf StringBuilder.append }
if ( ) { String.format return ( ) } String.format String.format String.format
BufferedInputStream.new InputStreamReader.new IOException.getMessage Logger.log
return ( Class<>.getField ) return ( Class<>.getDeclaredField )
if ( ) { if ( ) { IllegalStateException.new } }
if ( ) { Integer.valueOf }
String[].clone
if ( String.equalsIgnoreCase ) { if ( String.equalsIgnoreCase ) { IllegalArgumentException.new } }
UnsupportedOperationException.new
List<Object>.isEmpty if ( ) { if ( ) { File.new } }
JarInputStream.new while ( JarInputStream.getNextJarEntry ) { if ( JarEntry.getName String.equals ) { JarEntry.getSize return ( ) } } if ( ) { JarInputStream.close }
if ( ) { return ( String.toLowerCase ) }
Pattern.matcher return ( Matcher.matches Matcher.group )
if ( ) { LinkedHashMap<String,Object>.new Collections.synchronizedMap }
Switch ( ) { case : if ( ) { Math.pow } break }
RuntimeException.new
Boolean.valueOf
ReentrantLock.lock ReentrantLock.unlock
ByteArrayOutputStream.new ByteArrayOutputStream.flush ByteArrayOutputStream.toByteArray
return ( HashMap<String,String>.new )
Boolean.valueOf SocketImpl.setOption
GridBagLayout.new BorderFactory.createLineBorder BorderFactory.createTitledBorder GridBagConstraints.new Box.createHorizontalBox if ( ) { JLabel.new Box.add Box.createHorizontalStrut Box.add Box.createHorizontalGlue Box.add Box.add BorderFactory.createEmptyBorder Box.setBorder } JPanel.new if ( ) { FlowLayout.new JPanel.new JPanel.add JPanel.getPreferredSize Dimension.new JPanel.setPreferredSize }
while ( ) { Class.getDeclaredMethod break Class.getSuperclass } if ( Method.getReturnType ) { return ( ) } Method.getModifiers
JScrollPane.new JTable.new BorderLayout.new DefaultTableModel.new JTable.setModel JScrollPane.setViewportView
if ( ) { StringBuilder.new StringBuilder.append } if ( ) { Switch ( ) { default : String.valueOf StringBuilder.new StringBuilder.append StringBuilder.append break } }
LookAndFeel.installColorsAndFont
Map<Object,Object>.size for ( Map<Object,Object>.entrySet ) { Entry<Object,Object>.getKey Entry<Object,Object>.getValue }
URLConnection.setDoOutput URLConnection.setRequestProperty
return ( Proxy.newProxyInstance )
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } if ( List<List<Object>>.get List<Object>.contains ) { List<List<Object>>.get List<Object>.add return ( ) }
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new }
for ( ) { String.split String.split }
UUID.randomUUID System.currentTimeMillis
Set<String>.contains
ArrayList.new if ( List<Object>.isEmpty ) { } StringBuilder.new StringBuilder.append for ( ) { StringBuilder.toString List<Object>.add List<Object>.add }
UnsupportedOperationException.new
if ( ) { if ( ) { NullPointerException.new } }
CountDownLatch.new CountDownLatch.countDown
if ( List<Object>.size ) { return ( ) } List<Object>.get for ( ) { Math.max }
if ( ) { NullPointerException.new }
FileInputStream.new while ( FileInputStream.read ) { ZipOutputStream.write } IOException.printStackTrace
if ( ) { IllegalArgumentException.new }
ArrayList.new for ( ) { List<String>.add } Callable<List<String>>.new
StringBuffer.new StackTraceElement.getFileName StringBuffer.append StringBuffer.append StackTraceElement.getLineNumber StringBuffer.append StringBuffer.append StackTraceElement.getMethodName StringBuffer.append StringBuffer.append StringBuffer.append return ( StringBuffer.toString )
if ( ) { IllegalStateException.new } return ( ByteOrder.nativeOrder )
Double.doubleToRawLongBits Double.doubleToRawLongBits return ( Double.longBitsToDouble )
if ( ) { IllegalStateException.new }
DatagramSocket.new
Runnable.new Runnable.run
if ( ) { RuntimeException.new }
if ( ) { IllegalArgumentException.new }
if ( ) { Math.log Math.log FloatControl.setValue if ( ) { FloatControl.getValue } }
StringBuilder.new StringBuilder.append String.format StringBuilder.append StringBuilder.append for ( Map<String,String>.keySet ) { Map<String,String>.get String.format StringBuilder.append } String.format StringBuilder.append return ( StringBuilder.toString )
System.arraycopy
if ( List<Object>.isEmpty ) { }
return ( Collection<>.toArray )
List<String>.add List<String>.add List<Object>.add
HashSet<String>.new for ( ) { Set<String>.addAll }
if ( ) { if ( ) { System.arraycopy } }
StringBuilder.new for ( ) { if ( StringBuilder.length ) { StringBuilder.append } File.getPath StringBuilder.append } return ( StringBuilder.toString )
if ( List<Element>.size ) { } if ( List<Element>.size ) { } URL.getPath Pattern.matcher if ( Matcher.find ) { Matcher.group } HashSet<String>.new for ( ) { if ( ) { if ( URL.toString URL.toString String.equals ) { } } URL.getPath Set<String>.add }
if ( ) { Long.toString }
WeakReference<Object>.get
return ( Integer.intValue )
for ( ; ; ) { if ( ) { if ( ) { if ( ) { Thread.currentThread } } else { if ( ) { LockSupport.park } } } }
return ( Collection<Object>.isEmpty Collections.max )
for ( Map<String,Object>.entrySet ) { if ( Entry<String,Object>.getValue ) { Entry<String,Object>.getKey Entry<String,Object>.getValue } }
if ( ) { IllegalArgumentException.new }
HashMap.new Math.min Math.log Math.min
UnsupportedOperationException.new
return ( return ( Integer.compare ) Comparator<Object>.new Collections.max )
if ( ) { PrintStream.print if ( ) { for ( HashMap<String,Object>.keySet ) { HashMap<String,Object>.get PrintStream.print } } PrintStream.println }
if ( ) { IllegalStateException.new }
ArrayList.new
ConcurrentMap<String,Object>.get HashSet<Object>.new for ( ) { if ( ) { Set<Object>.add } }
for ( Map<Object,Object>.values ) { }
if ( ) { InvalidParameterException.new } if ( ) { InvalidParameterException.new }
return ( Map<Object,Integer>.containsKey )
if ( ) { Window.addWindowFocusListener }
return ( HashSet<Object>.new )
if ( String.contains String.contains String.contains String.contains String.contains ) { return ( ) }
return ( HashSet<Object>.new )
ArrayList<Object>.new List<Object>.addAll
ResultSet.getMetaData ResultSetMetaData.getColumnCount for ( ; ; ) { ResultSetMetaData.getColumnType }
if ( ) { return ( Math.max Math.max ) }
if ( ) { if ( ) { Switch ( ) { default : AssertionError.new } } return ( ) }
if ( String.trim String.length ) { } if ( ) { if ( List<Object>.size ) { return ( List<Object>.iterator ) } } if ( ) { for ( ) { if ( String.equals ) { return ( ) } if ( String.equals ) { } } }
Random.setSeed
MARSHAL.new
BorderLayout.new GridBagLayout.new Insets.new GridBagConstraints.new Insets.new GridBagConstraints.new Insets.new GridBagConstraints.new Insets.new GridBagConstraints.new
if ( ) { IllegalArgumentException.new } PBEParameterSpec.getSalt PBEParameterSpec.getIterationCount
Class.getDeclaredMethod Method.setAccessible Method.invoke
return ( String.new )
Vector.elements while ( Enumeration.hasMoreElements ) { Enumeration.nextElement }
if ( Container.getLayout ) { IllegalArgumentException.new }
GridLayout.new JPanel.new for ( ; ; ) { for ( ; ; ) { JLabel.new JButton.new JButton.setBackground JButton.add JPanel.add } }
URL.openStream Properties.new Properties.load Properties.getProperty
return ( Float.valueOf )
for ( ) { ArrayList<Object>.new if ( ) { List<Object>.set } if ( ) { List<Object>.size List<Object>.set } if ( ) { if ( ) { String.format } } }
Map<Object,Object>.get
for ( ; ; ) { if ( ) { if ( ) { if ( ) { Boolean.parseBoolean } } } } Date.new
DefaultTableModel.new Connection.createStatement Statement.executeQuery ResultSet.getMetaData ResultSetMetaData.getColumnCount for ( ; ; ) { ResultSetMetaData.getColumnName DefaultTableModel.addColumn } while ( ResultSet.next ) { for ( ; ; ) { ResultSet.getString } DefaultTableModel.addRow } SQLException.printStackTrace
Thread.join Exception.printStackTrace
if ( SortedMap<String,Object>.containsKey ) { SortedMap<String,Object>.get return ( ) }
System.identityHashCode
if ( String.isEmpty ) { }
File.getName String.indexOf if ( ) { return ( String.substring ) }
if ( HashMap<String,Object>.get ) { return ( ) } if ( String.equals ) { JMenu.new HashMap<String,Object>.put JPopupMenu.add } else { if ( ) { HashMap<String,Object>.get JMenu.new HashMap<String,Object>.put } else { HashMap<String,Object>.get if ( ) { PrintStream.println System.exit } HashMap<String,Object>.put } }
if ( ) { return ( Collections.emptyList ) } return ( Collections.unmodifiableCollection )
String.trim if ( ) { ParsePosition.new for ( ; ; ) { ParsePosition.setErrorIndex ParsePosition.setIndex DateFormat.parse if ( ParsePosition.getIndex ParsePosition.getIndex String.length ) { continue } Date.getTime return ( ) } }
if ( ) { NullPointerException.new }
Runnable.new
if ( List<Object>.size ) { return ( ) } List<Object>.get
HashMap.new
ArrayList<Object>.new for ( ) { if ( Entry<Object,Object>.getKey ) { Entry<Object,Object>.getValue List<Object>.add } } if ( ) { if ( ) { List<Object>.add } } if ( ) { List<Object>.addAll } if ( ) { if ( ) { List<Object>.add } }
if ( ) { InetSocketAddress.getAddress InetAddress.getHostAddress InetSocketAddress.getPort } if ( ) { IllegalArgumentException.new }
if ( ) { IllegalArgumentException.new } Class.getComponentType
HashMap<String,Object>.new
IllformedLocaleException.new
File.createTempFile if ( File.delete ) { File.toString IOException.new } if ( File.mkdir ) { File.toString IOException.new }
CookieManager.new CookieManager.setCookiePolicy
StringBuilder.new for ( ; ; ) { StringBuilder.append } return ( StringBuilder.toString )
InputStream.read_long for ( ; ; ) { InputStream.read_any }
JPanel.new JPanel.setBackground Dimension.new JPanel.setMinimumSize JSplitPane.add JSplitPane.add
for ( HashMap<Object,Integer>.entrySet ) { if ( Entry<Object,Integer>.getValue ) { Entry<Object,Integer>.getKey Entry<Object,Integer>.getValue } }
for ( ; ; ) { File.getName String.split }
System.exit
if ( ) { List.nil return ( List.of ) } else { List.nil return ( List.of ) }
Hashtable.size for ( ; ; ) { Vector.new } Vector.size for ( ; ; ) { Vector.elementAt } if ( ) { Vector.size PrintStream.println }
if ( ) { File.getCanonicalFile if ( File.exists File.delete ) { IOException.new } if ( File.renameTo ) { return ( ) } IOException.new } else { if ( File.renameTo ) { IOException.new } }
return ( Vector<String>.size )
Socket.new Socket.getOutputStream OutputStream.write OutputStream.write OutputStream.write ObjectOutputStream.new ObjectOutputStream.writeUTF ObjectOutputStream.flush Socket.getInputStream BufferedInputStream.new ObjectInputStream.new ObjectInputStream.readInt ObjectInputStream.readUTF ObjectInputStream.close ObjectOutputStream.close Socket.close Exception.printStackTrace
File.new
Vector.iterator if ( Iterator.hasNext ) { Iterator.next ComponentUI.getMinimumSize } while ( Iterator.hasNext ) { Iterator.next ComponentUI.getMinimumSize }
return ( Locale.getDefault )
Integer.new
PrintStream.println for ( ; Vector<Object>.size ; ) { if ( ) { PrintStream.println } Vector<Object>.get PrintStream.println if ( ) { PrintStream.println } } PrintStream.println
for ( ArrayList<Object>.size ; ; ) { if ( ArrayList<Object>.get ) { ArrayList<Object>.add break } } if ( ) { ArrayList<Object>.add }
ArrayList<Object>.add
Logger.getLogger Logger.setUseParentHandlers Logger.setLevel FileHandler.new SimpleFormatter.new FileHandler.setFormatter Logger.addHandler IOException.printStackTrace SecurityException.printStackTrace
ImageIO.read RuntimeException.new if ( ) { RuntimeException.new } File.getAbsolutePath String.replace if ( ) { if ( String.startsWith ) { RuntimeException.new } String.length String.substring } String.lastIndexOf if ( ) { String.substring }
if ( ) { IllegalArgumentException.new }
if ( ) { Error.new }
List<Object>.remove
StringReader.new IllegalStateException.new
while ( InputStream.read ) { OutputStream.write }
Runnable.new
SimpleDateFormat.new if ( String.length String.charAt ) { String.replace TimeZone.getTimeZone SimpleDateFormat.parse } else { if ( String.indexOf String.length String.charAt String.length String.charAt ) { String.length String.substring String.length String.substring TimeZone.getTimeZone SimpleDateFormat.parse } else { String.length String.substring TimeZone.getTimeZone SimpleDateFormat.parse } } GregorianCalendar.new GregorianCalendar.setTime
AtomicReference<Object>.getAndSet while ( ) { Math.min InputStream.read if ( Thread.interrupted ) { InterruptedIOException.new } if ( ) { EOFException.new } } AtomicReference<Object>.set
ByteBuffer.allocate ByteBuffer.flip
Exception.getMessage Exception.getMessage
System.getProperty if ( String.startsWith ) { }
StringBuilder.new
PrintStream.println ArrayList<String>.new List<String>.addAll for ( ) { File.getPath List<String>.add } StringWriter.new PrintWriter.new List<String>.size List<String>.toArray PrintWriter.flush if ( StringWriter.getBuffer StringBuffer.length ) { StringWriter.toString PrintStream.println } if ( ) { Exception.new }
return ( String.length )
String.split for ( ) { String.indexOf if ( ) { if ( String.substring String.equals ) { return ( String.substring Locale.new ) } } }
if ( ) { if ( CharSequence.toString ) { return ( ) } }
LinkedHashMap<Object,Object>.new LinkedHashMap<Object,Object>.new
InputStream.close
Properties.new Properties.load
String.format
return ( ArrayList<Object>.size )
for ( ; ; ) { String.format } for ( ) { String.format }
return ( String.compareTo )
Vector.iterator if ( Iterator.hasNext ) { Iterator.next ComponentUI.getAccessibleChildrenCount } while ( Iterator.hasNext ) { Iterator.next ComponentUI.getAccessibleChildrenCount }
IllegalStateException.new
List<Object>.get while ( ) { List<Object>.get }
if ( ) { List<Object>.size }
List<Object>.size List<Object>.toArray
return ( List<Long>.get )
for ( ; ; ) { Float.floatValue }
StringBuffer.new Properties.keySet TreeSet.new SortedSet.iterator while ( Iterator.hasNext ) { Iterator.next if ( String.startsWith ) { Properties.getProperty } StringBuffer.append StringBuffer.append } if ( StringBuffer.length ) { StringBuffer.toString Exception.new }
Integer.toString
while ( Deque<Object>.isEmpty ) { Deque<Object>.pop }
if ( ) { return ( Collections.unmodifiableList ) }
return ( Arrays.asList HashSet<String>.new )
if ( ) { NullPointerException.new }
if ( String.isEmpty ) { for ( String.split ) { String.trim } } if ( String.isEmpty ) { } if ( String.isEmpty ) { System.setProperty } if ( String.isEmpty ) { } if ( String.endsWith ) { } if ( String.startsWith ) { } URI.new
if ( ThreadLocal.get ) { Hashtable.remove }
AtomicBoolean.set
StringBuilder.new StringBuilder.setLength while ( ) { StringBuilder.setCharAt } return ( StringBuilder.toString )
if ( ) { Exception.new }
String.length while ( String.charAt Character.isWhitespace ) { } if ( String.substring String.equals ) { } String.indexOf String.substring String.toUpperCase while ( String.charAt ) { } String.indexOf String.substring Integer.parseInt if ( ) { String.substring String.trim }
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new }
for ( ; ; ) { if ( ) { Exception.new } }
Properties.new if ( ) { while ( Iterator<String>.hasNext ) { Iterator<String>.next Properties.put } }
System.getSecurityManager if ( ) { AWTPermission.new SecurityManager.checkPermission } Thread.currentThread Thread.getThreadGroup if ( ) { DefaultKeyboardFocusManager.new } Map.put
Map<String,Object>.get if ( ) { System.arraycopy Map<String,Object>.put } else { if ( ) { Map<String,Object>.put } else { Map<String,Object>.put } }
Collection<Object>.add
if ( ) { IllegalArgumentException.new }
return ( Date.clone )
HashMap.new for ( ) { List<URI>.addAll Map<URI,List<URI>>.put } if ( List<URI>.isEmpty ) { }
if ( Map<String,Object>.containsKey ) { if ( Set<String>.contains ) { Set<String>.add return ( ) } }
BigInteger.new BigDecimal.new BigInteger.new BigDecimal.new BigDecimal.divide BigDecimal.toString BigDecimal.scale
return ( Long.parseLong )
if ( ) { File.getAbsolutePath File.new } File.getAbsolutePath File.new if ( File.exists ) { File.mkdir } if ( ) { File.new if ( File.exists ) { File.createNewFile } }
ArrayList<String>.remove
if ( ) { if ( ) { IllegalArgumentException.new } }
Image.getWidth Image.getHeight PixelGrabber.new if ( PixelGrabber.grabPixels ) { PixelGrabber.status AWTException.new }
RuntimeException.new
return ( BasicArrowButton.new )
return ( File.isDirectory Collection<String>.contains )
Properties.getProperty Properties.getProperty Properties.getProperty Properties.getProperty if ( ) { Integer.parseInt } Properties.getProperty if ( ) { Integer.parseInt } Properties.getProperty if ( ) { Float.parseFloat }
while ( ) { if ( ) { Iterator<Object>.next } if ( ) { Iterator<Object>.next } if ( Iterator<Object>.hasNext Iterator<Object>.hasNext ) { if ( Iterator<Object>.hasNext Iterator<Object>.hasNext ) { return ( ) } return ( ) } Iterator<Object>.next Iterator<Object>.next }
for ( ; Iterator<Character>.hasNext ; ) { Iterator<Character>.next } for ( ; Iterator<Character>.hasNext ; ) { Iterator<Character>.next }
if ( ) { Error.new }
if ( String.equals ) { rpc.new }
if ( ) { if ( ) { NullPointerException.new } List<Object>.set }
if ( ) { Container.setComponentOrientation } GridBagLayout.new Container.setLayout GridBagConstraints.new ButtonGroup.new
Properties.propertyNames StringBuilder.new if ( Properties.isEmpty ) { while ( Enumeration.hasMoreElements ) { Enumeration.nextElement Properties.getProperty StringBuilder.append } } return ( StringBuilder.toString )
List<Object>.stream Stream.map Collectors.toList Stream.collect
StringBuffer.new Switch ( ) { case : StringBuffer.append break case : StringBuffer.append break case : StringBuffer.append break default : StringBuffer.append break } if ( ) { StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append } for ( ; Iterator.hasNext ; ) { Iterator.next StringBuffer.append StringBuffer.append } return ( StringBuffer.toString )
return ( return ( Function<,Boolean>.apply ) Callable<Boolean>.new )
Supplier<Object>.get Supplier<Object>.get
if ( ) { Method.invoke InvocationTargetException.toString IllegalAccessException.toString }
if ( ) { IllegalArgumentException.new } CompositeName.new Name.add
ThreadLocal<ByteBuffer>.get if ( ByteBuffer.capacity ) { ByteBuffer.allocateDirect ByteOrder.nativeOrder ByteBuffer.order ThreadLocal<ByteBuffer>.set } ByteBuffer.rewind ByteBuffer.put ByteBuffer.put Lock.lock Lock.unlock BigInteger.new BigInteger.intValue BigInteger.new BigInteger.intValue
if ( ) { Arrays.fill Arrays.fill }
HashSet<CRL>.new for ( Map<String,SoftReference<X509CRL>>.values ) { SoftReference<X509CRL>.get if ( ) { Set<CRL>.add } } return ( Collections.unmodifiableSet )
UnsupportedOperationException.new
return ( String.format )
for ( ; ; ) { Vector<Object>.elementAt }
Calendar.getInstance Calendar.setTimeInMillis Calendar.add
if ( ) { URI.toString }
AtomicReference<Object>.set
return ( HashSet<Object>.new )
Properties.getProperty Properties.getProperty Properties.getProperty Properties.getProperty Properties.getProperty Properties.getProperty Properties.getProperty Properties.getProperty Properties.getProperty
return ( StringBuffer.new FieldPosition.new StringBuffer.toString )
Objects.requireNonNull if ( ) { IllegalArgumentException.new } HashSet<Object>.new HashSet<Object>.new HashSet<Integer>.new EnumSet.noneOf EnumSet.noneOf
return ( ArrayList<Object>.new )
Map<String,Object>.clear for ( ) { for ( ) { for ( ) { Map<String,Object>.put } } }
for ( HashMap<String,Object>.entrySet ) { Entry<String,Object>.getKey Entry<String,Object>.getValue HashMap<String,Object>.put }
ArrayList<Object>.new List<Object>.add if ( ) { List<Object>.add } List<Object>.add List<Object>.add for ( ; ; ) { List<Object>.add } List<Object>.add
return ( List<Object>.size )
return ( Integer.parseInt )
PreparedStatement.setShort PreparedStatement.setShort PreparedStatement.setInt PreparedStatement.executeQuery ResultSet.next ResultSet.getInt PreparedStatement.setShort PreparedStatement.setShort PreparedStatement.setInt PreparedStatement.executeQuery ResultSet.next ResultSet.getTimestamp ResultSet.getObject ResultSet.getInt ResultSet.close PreparedStatement.setShort PreparedStatement.setShort PreparedStatement.setInt PreparedStatement.executeQuery while ( ResultSet.next ) { ResultSet.getInt ResultSet.getShort ResultSet.getShort ResultSet.getString ResultSet.getTimestamp } ResultSet.close
if ( ) { NullPointerException.new } if ( ) { NullPointerException.new }
String.toCharArray if ( ) { if ( ) { System.arraycopy return ( ) } else { if ( ) { System.arraycopy return ( ) } } }
StringBuilder.new if ( ) { StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append } if ( ) { StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append } for ( ) { StringBuilder.append } if ( ) { StringBuilder.append } return ( StringBuilder.toString )
System.currentTimeMillis LinkedList<String>.new Arrays.asList LinkedList<String>.addAll
String.replace Pattern.compile Pattern.matcher while ( Matcher.find ) { Matcher.group Matcher.group String.replaceAll }
if ( ) { Object.getClass Class.getName }
Map<String,Object>.get if ( ) { Class<Object>.getDeclaredConstructor Constructor<Object>.newInstance Map<String,Object>.put }
System.arraycopy
return ( Arrays.equals )
if ( String.length ) { return ( ) }
while ( ) { System.arraycopy if ( ) { System.arraycopy } if ( ) { if ( ) { System.arraycopy } } }
if ( ) { IllegalArgumentException.new } IllegalArgumentException.new
IllegalStateException.new
if ( String.length ) { return ( ) }
PrintStream.println
LinkedHashSet<String>.new String.length StringBuilder.new StringBuilder.append StringBuilder.append StringBuilder.toString StringTokenizer.new while ( StringTokenizer.hasMoreTokens ) { StringTokenizer.nextToken String.toLowerCase if ( ) { Double.valueOf continue } if ( List<String>.contains ) { Set<String>.add } }
Runnable.new
Collection<Character>.toArray
return ( String.equals )
for ( ) { if ( ) { Math.ceil } }
for ( ; ; ) { if ( String.isEmpty ) { IllegalArgumentException.new } } Arrays.copyOf
ArrayList<Object>.new
LinkedList.new LinkedList.new
for ( ; Vector.size ; ) { if ( Vector.get ) { return ( ) } }
UUID.randomUUID UUID.toString
ArrayList.iterator while ( Iterator.hasNext ) { Iterator.next if ( String.indexOf ) { return ( ) } } ArrayList.iterator while ( Iterator.hasNext ) { Iterator.next if ( String.indexOf ) { return ( ) } }
Math.min Math.min
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } if ( Socket.isClosed ) { IllegalArgumentException.new }
if ( ) { Integer.valueOf }
StringBuilder.new String.format StringBuilder.append for ( ) { StringBuilder.append } return ( StringBuilder.toString )
QName.getLocalPart if ( String.equals ) { return ( ) }
if ( ) { Thread.interrupt }
if ( ) { IllegalArgumentException.new } List<Object>.add
if ( Logger.isLoggable ) { Arrays.asList Logger.finest } Throwable.toString Logger.log
return ( Integer.intValue )
if ( String.length ) { }
if ( Map<String,Object>.get ) { return ( ) } Map<String,Object>.put
if ( ) { Exception.new Exception.fillInStackTrace }
if ( ) { if ( ) { return ( Boolean.booleanValue ) } return ( String.equals ) }
Switch ( ) { default : Integer.toHexString PrintStream.println break }
return ( Collections.unmodifiableList )
WeakReference<Object>.new
if ( ) { NullPointerException.new }
return ( Integer.intValue )
Math.min
ArrayList<Object>.new
Class.getName Method.getName
return ( String.new String.replace )
ReadLock.lock if ( ) { IllegalStateException.new } ReadLock.unlock
if ( ) { ArrayList<Object>.new ArrayList<Object>.new ArrayList<Object>.add for ( ; ; ) { ArrayList<Object>.add } for ( ) { if ( ) { ArrayList<Object>.add } } if ( ArrayList<Object>.isEmpty ) { JOptionPane.showMessageDialog return ( ) } } if ( ) { Math.max } if ( ) { Math.max }
SelectionKey.cancel
return ( ArrayList<Object>.new )
Thread.currentThread HashMap.put
String.toUpperCase String.endsWith String.startsWith String.endsWith String.startsWith String.startsWith String.equals String.equals String.equals String.startsWith String.endsWith
DataInputStream.readFully
for ( ; ; ) { String.length Math.max } for ( ; ; ) { String.length }
Math.max
Set<Object>.add
return ( Node.getNodeType Node.getNamespaceURI Node.getLocalName )
DecimalFormat.format JTextField.setText
if ( ) { if ( ) { if ( Objects.equals ) { } } }
StringBuffer.new StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append return ( StringBuffer.toString )
if ( ) { IllegalStateException.new } return ( Integer.parseInt )
ScriptEngine.eval
return ( GregorianCalendar.new GregorianCalendar.new )
if ( ) { OutputStream.write_Object } else { if ( ) { if ( ) { OutputStream.write_Object } } }
Math.abs Math.acos Math.toDegrees
UUID.randomUUID UUID.toString
System.gc
DoubleBuffer.put
BigInteger.valueOf if ( BigInteger.compareTo ) { return ( ) } if ( BigInteger.compareTo ) { return ( ) } BigInteger.modInverse BigInteger.multiply BigInteger.mod BigInteger.multiply BigInteger.mod BigInteger.multiply BigInteger.mod return ( BigInteger.equals )
if ( ) { ArrayList<Object>.new }
List<Object>.indexOf Collections.rotate ArrayList<String>.new ArrayList<String>.new ArrayList<String>.new ArrayList<String>.new for ( ) { ArrayList<String>.add ArrayList<String>.add ArrayList<String>.add ArrayList<String>.add }
return ( Arrays.asList )
if ( ) { System.arraycopy } else { System.arraycopy if ( ) { System.arraycopy } else { OutputStream.write } }
if ( ) { Integer.valueOf }
SimpleDateFormat.new if ( String.contains ) { return ( ) }
StringBuilder.new StringBuilder.append if ( ) { StringBuilder.append } else { if ( ) { Object.toString StringBuilder.append for ( ; ; ) { if ( ) { StringBuilder.append break } StringBuilder.append Object.toString StringBuilder.append } } } StringBuilder.append return ( StringBuilder.toString )
Set<Object>.isEmpty
ArrayList.new for ( ) { if ( String.equals ) { List<String>.add } }
if ( ) { Integer.valueOf }
if ( ) { EnumMapValueCollection<Object,Object>.new }
String.trim String.toLowerCase String.trim String.toLowerCase return ( StringBuilder.new StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.toString )
BufferedImage.createGraphics if ( ) { Graphics2D.setRenderingHints } Graphics2D.drawImage Graphics2D.dispose
if ( Class.isAssignableFrom ) { Class<>.newInstance return ( ) } else { if ( Class.isAssignableFrom ) { Class<>.newInstance return ( ) } else { String.format } }
return ( Random.nextInt )
if ( ) { PrintStream.println } System.currentTimeMillis InputStream.close InputStream.close HashMap.new Map<String,String>.put if ( Arrays.equals ) { Exception.new } Exception.toString Exception.getStackTrace Arrays.toString
if ( ) { while ( ) { System.arraycopy } System.arraycopy }
if ( ) { IllegalArgumentException.new } ByteArrayInputStream.new
for ( ; ; ) { Connection.createStatement Statement.executeQuery SQLException.toString SQLException.getSQLState SQLException.new }
OutputStreamWriter.new for ( ) { OutputStreamWriter.write OutputStreamWriter.write } OutputStreamWriter.flush
if ( ) { Hashtable.put }
if ( ) { return ( CharSequence.equals ) } return ( CharSequence.length CharSequence.length Math.max )
for ( ; ; ) { if ( ) { Math.exp } } return ( Math.log )
LinkedList.new List.add List.add List.add Map.get Map.get Map.get
if ( Collection<Object>.isEmpty ) { return ( ) } HashMap<String,Object>.new ArrayList<Object>.new ArrayList<Object>.iterator while ( Iterator<Object>.hasNext ) { List<Object>.iterator while ( Iterator<Object>.hasNext ) { Iterator<Object>.next Map<String,Object>.get if ( ) { Map<String,Object>.put } } }
ArrayList<String>.new
return ( List<Object>.get )
return ( String.hashCode )
if ( ) { RuntimeException.new }
if ( String.equals String.equals ) { String.equals String.equals } String.trim
CallableStatement.setString CallableStatement.setString CallableStatement.setString CallableStatement.setString CallableStatement.setString CallableStatement.setString CallableStatement.executeUpdate CallableStatement.close
return ( Map.size )
Map<String,Object>.size Map<String,Object>.entrySet Set.iterator Iterator.next Entry<String,Object>.getValue if ( StringBuilder.length ) { StringBuilder.length StringBuilder.delete } for ( ) { StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append } StringBuilder.toString String.getBytes RuntimeException.new
JPanel.new JPanel.new JPanel.new JPanel.new JPanel.new JLabel.new JPanel.new JPanel.new Font.new BorderLayout.new BorderFactory.createEtchedBorder JPanel.setBorder BorderLayout.new JPanel.setLayout BorderLayout.new JPanel.setLayout GridLayout.new JPanel.setLayout JPanel.add UIManager.getDefaults UIDefaults.getColor JPanel.setBackground Font.new JPanel.setFont GridLayout.new JPanel.setLayout JPanel.add JPanel.add Font.new JLabel.setFont JPanel.add JPanel.add BorderLayout.new JPanel.setLayout BorderFactory.createEmptyBorder JPanel.setBorder GridLayout.new JPanel.setLayout JPanel.add
Map<String,Object>.put
if ( ) { if ( VariableElement.getKind VariableElement.getConstantValue ) { } }
if ( ) { PrintStream.println }
EventListenerList.remove
if ( ) { if ( ) { if ( ) { IllegalArgumentException.new } if ( Arrays.equals ) { IllegalArgumentException.new } if ( Arrays.deepEquals ) { IllegalArgumentException.new } } }
if ( ) { if ( ) { NullPointerException.new } List<Object>.add }
List<Object>.size List<Object>.get if ( ) { Class.cast }
if ( Set<Object>.size Set<Object>.size ) { }
if ( ) { IllegalArgumentException.new } IllegalStateException.new
List<Object>.add
for ( ; ; ) { Character.forDigit } return ( String.new )
if ( ParameterizedType.getRawType ParameterizedType.getRawType Type.equals ) { ParameterizedType.getActualTypeArguments ParameterizedType.getActualTypeArguments return ( ) }
if ( EnumSet<Object>.contains ) { }
return ( return ( ) Callable<Integer>.new )
if ( ) { if ( ) { Runnable.new ExecutorService.submit } }
while ( ) { if ( ) { if ( ) { Number.doubleValue } } else { if ( ) { Object.toString } } }
if ( String.isEmpty ) { }
if ( ) { Integer.valueOf }
if ( String.contains String.indexOf ) { }
return ( List.contains )
Math.pow Math.pow Math.sqrt
return ( Math.pow )
if ( String.equals ) { return ( ) }
if ( ) { IndexOutOfBoundsException.new }
if ( ) { NullPointerException.new }
if ( ) { Integer.valueOf Integer.valueOf IllegalArgumentException.new } if ( ) { Integer.valueOf Integer.valueOf IllegalArgumentException.new } if ( ) { Integer.valueOf Integer.valueOf IllegalArgumentException.new }
StringBuilder.new StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append return ( StringBuilder.toString )
if ( ) { return ( Collections.unmodifiableCollection ) } else { return ( Collections.emptyList ) }
Collections.emptyList
return ( IOException.getClass IOException.getMessage )
Boolean.valueOf
ClassNotFoundException.new
if ( ) { IllegalStateException.new }
Class.getResource URL.toURI NamingException.getMessage URISyntaxException.getMessage
MouseEvent.getPoint if ( MouseEvent.isShiftDown MouseEvent.isControlDown ) { JList.setSelectedIndex } JList.getLeadSelectionIndex JList.ensureIndexIsVisible
if ( ) { IllegalStateException.new }
if ( List<Object>.isEmpty ) { }
StringBuffer.new if ( ) { StringBuffer.append } if ( ) { StringBuffer.append } if ( ) { StringBuffer.append } if ( ) { StringBuffer.append } if ( ) { StringBuffer.toString }
StringBuffer.new StringBuffer.append if ( ) { StringBuffer.append LinkedHashMap.keySet Set.iterator while ( Iterator.hasNext ) { Iterator.next StringBuffer.append StringBuffer.append StringBuffer.append if ( Iterator.hasNext ) { StringBuffer.append } } StringBuffer.append } return ( StringBuffer.toString )
if ( ) { Class.getSimpleName } if ( ) { if ( ) { HashMap<Long,Object>.put } return ( ) }
QName.new if ( ) { if ( ) { if ( HashMap.containsKey ) { HashMap.get Class.forName Class.newInstance HashMap.get Class.forName Class.getMethod Method.invoke Exception.getMessage RemoteException.new } } }
CertificateFactory.getInstance BufferedInputStream.new CertificateFactory.generateCertificate CertificateException.printStackTrace if ( ) { InputStream.close } IOException.printStackTrace KeyStore.getDefaultType KeyStore.getInstance KeyStore.load KeyStore.setCertificateEntry Exception.printStackTrace
ArrayList<Object>.new for ( ) { Object.toString List<Object>.add }
if ( ) { IllegalArgumentException.new }
for ( ; ; ) { while ( ) { if ( BooleanSupplier.getAsBoolean ) { return ( ) } Queue<Object>.poll } if ( BooleanSupplier.getAsBoolean ) { return ( ) } if ( Queue<Object>.isEmpty ) { return ( ) } AtomicLongFieldUpdater<Object>.get if ( ) { AtomicLongFieldUpdater<Object>.addAndGet } }
if ( ) { NullPointerException.new }
System.currentTimeMillis List<CharSequence>.get for ( ; List<CharSequence>.size Math.min ; ) { List<CharSequence>.get } List<CharSequence>.size System.currentTimeMillis Exception.getMessage
for ( ; ; ) { if ( ) { if ( Thread.currentThread Thread.isInterrupted ) { return ( ) } } } for ( ; ; ) { if ( ) { if ( Thread.currentThread Thread.isInterrupted ) { return ( ) } } }
Class.getDeclaredField Field.setAccessible Field.get RuntimeException.new RuntimeException.new
Vector<Object>.new Vector<Object>.addElement Vector<Object>.addElement return ( Vector<Object>.elements )
if ( ) { IllegalStateException.new } if ( ) { Executor.execute }
if ( ) { IllegalStateException.getMessage }
if ( ) { return ( ) RuntimeException.new } URL.new URL.openConnection HttpURLConnection.setRequestMethod HttpURLConnection.setDoOutput HttpURLConnection.setUseCaches HttpURLConnection.setReadTimeout HttpURLConnection.addRequestProperty HttpURLConnection.getOutputStream OutputStreamWriter.new Writer.write Writer.flush Writer.close OutputStream.flush OutputStream.close HttpURLConnection.connect HttpURLConnection.getResponseCode if ( ) { HttpURLConnection.getResponseMessage IOException.new } HttpURLConnection.getInputStream HttpURLConnection.getContentEncoding HttpURLConnection.getContentEncoding InputStreamReader.new LineNumberReader.new while ( LineNumberReader.readLine ) { } LineNumberReader.close if ( ) { HttpURLConnection.disconnect }
ByteBuffer.put
for ( ) { Map<String,Object>.get System.arraycopy } HashMap<String,Object>.new for ( ) { for ( ) { Map<String,Map<String,Object>>.get System.arraycopy } Map<String,Object>.put } Map<String,Object>.clear Map<String,Map<String,Object>>.clear
if ( ) { JTextField.setText }
SocketException.new
String[].clone
String.length String.length for ( ; ; ) { String.charAt if ( ) { Writer.write continue } Writer.write }
for ( ) { if ( ) { if ( BitSet.get ) { continue } } }
System.arraycopy System.arraycopy
Map<Object,Object>.clear Map<Object,Object>.put Map<Object,Object>.put Runnable.new
if ( ) { IllegalArgumentException.new } ArrayList<Object>.add
return ( EmulatedFields.defaulted )
if ( ) { for ( ; Vector<String[]>.size ; ) { } }
JFrame.new JFrame.setBounds JFrame.setDefaultCloseOperation JPopupMenu.new JButton.new ActionListener.new JButton.addActionListener JFrame.getContentPane Container.add JPanel.new LineBorder.new JPanel.setBorder GridBagLayout.new JPanel.setLayout JButton.new GridBagConstraints.new Insets.new JPanel.add JButton.addActionListener JButton.new JButton.addActionListener GridBagConstraints.new Insets.new JPanel.add JTable.new DefaultTableModel.new JTable.setModel GridBagConstraints.new Insets.new JPanel.add
LinkedHashMap.new if ( ) { for ( ; ; ) { String.valueOf LinkedHashMap<String,String[]>.put } }
if ( ) { IllegalArgumentException.new }
PropertyChangeSupport.addPropertyChangeListener
return ( Integer.toString )
Pattern.matcher if ( Matcher.find ) { String.format Exception.new } Matcher.group if ( Matcher.group ) { Matcher.group } if ( Matcher.group ) { Matcher.group } if ( Matcher.group ) { Matcher.group } if ( Matcher.group ) { Matcher.group } Matcher.group
LinkedList<Object>.add
if ( List<Object>.isEmpty ) { return ( ) } if ( ) { List<Object>.size List<Object>.subList ArrayList.new List<Object>.removeAll } List<Object>.get List<Object>.subList ArrayList.new List<Object>.clear if ( List<Object>.isEmpty ) { List<Object>.get }
if ( String.startsWith ) { String.substring } else { if ( String.startsWith ) { String.substring } else { String.substring } } for ( ; ; ) { for ( ; ; ) { Math.max } }
Map.size for ( Map.values Collection.iterator ; Iterator.hasNext ; ) { Iterator.next } Map.size
ArrayList.new Collection.size Collection.toArray for ( ; ; ) { if ( ) { if ( ) { List.iterator while ( Iterator.hasNext ) { Iterator.next if ( ) { List.add } } } } } List.size Exception.getLocalizedMessage HashMap.new HashMap.put Vector.new
for ( ) { Math.pow Math.pow } return ( Math.pow Math.pow )
StringBuilder.new StringBuilder.append StringBuilder.append for ( ) { StringBuilder.append StringBuilder.append } StringBuilder.length StringBuilder.deleteCharAt StringBuilder.append if ( ) { StringBuilder.toString Logger.info } return ( StringBuilder.toString )
PrintStream.println for ( ; ; ) { PrintStream.printf Math.round PrintStream.printf Math.round PrintStream.printf Math.round PrintStream.printf Math.round PrintStream.printf }
if ( ) { if ( ) { return ( String.equals ) } }
if ( ) { IllegalArgumentException.new }
Location.getLineNumber Location.getColumnNumber
while ( ) { ConcurrentHashMap<Object,AtomicLong>.get if ( ) { AtomicLong.new ConcurrentHashMap<Object,AtomicLong>.putIfAbsent } AtomicLong.get if ( ) { if ( AtomicLong.new ConcurrentHashMap<Object,AtomicLong>.replace ) { return ( ) } continue } return ( ) }
for ( LinkedHashMap<String,Object>.values ) { }
Boolean.valueOf
String[].clone
if ( Selector.select ) { Selector.selectedKeys } IOException.getMessage Error.text Set<SelectionKey>.iterator while ( Iterator<SelectionKey>.hasNext ) { Iterator<SelectionKey>.next Iterator<SelectionKey>.remove SelectionKey.attachment if ( SelectionKey.isReadable ) { } if ( SelectionKey.isWritable ) { if ( ) { Exception.getMessage Error.text return ( ) } } }
AtomicBoolean.set
if ( String.equals ) { Switch ( ) { case : return ( String.equals ) case : MessageDigest.getInstance String.getBytes MessageDigest.digest return ( String.toUpperCase String.equals ) UnsupportedOperationException.new UnsupportedOperationException.new } }
ArrayList.new ArrayList.new List<Object>.add List<Object>.add ArrayList.new List<Object>.add List<Object>.add
if ( ) { IllegalStateException.new }
MessageDigest.digest File.getAbsolutePath String.new String.new return ( Arrays.equals )
Class<>.getField Field.get if ( Class<>.getName String.equals ) { Class<>.getName String.format } Class<>.getName IllegalAccessException.getMessage String.format Class<>.getName NoSuchFieldException.getMessage String.format
if ( ) { PrintStream.println }
List<String>.isEmpty ArrayList<String>.new Collections.unmodifiableList
for ( ; ; ) { Integer.new }
return ( StringReader.new )
OutputStreamWriter.flush OutputStreamWriter.close if ( ) { if ( ) { BufferedOutputStream.flush BufferedOutputStream.close } if ( ) { OutputStreamWriter.close } if ( ) { ByteArrayOutputStream.close } }
for ( ArrayList<Object>.iterator ; Iterator<Object>.hasNext ; ) { Iterator<Object>.next if ( ) { Iterator<Object>.remove } }
for ( ; ; ) { while ( Iterator<Object>.hasNext ) { Iterator<Object>.next } }
if ( ) { List<Object>.size List<Object>.add return ( ) }
if ( ) { if ( ) { return ( Math.abs ) } else { if ( ) { return ( Math.abs ) } } }
for ( ) { Integer.toString }
List<String>.add Collections.addAll
Map<Class,Object>.put
URL.getPort URL.getPort URL.getProtocol URL.getProtocol if ( String.equals ) { return ( ) } URL.getHost URL.getHost if ( String.equals ) { return ( ) } URL.getFile URL.getFile if ( String.equals ) { return ( ) }
ArrayList<Entry<String,String>>.new
if ( String.isEmpty ) { String.split }
if ( Class<Object>.isAssignableFrom ) { Class<>.getName Class<Object>.getName Exception.new } Class<>.getDeclaredConstructor Constructor<>.setAccessible Constructor<>.newInstance RuntimeException.new
return ( String.equals )
Document.getDocumentElement ArrayList<Object>.new for ( ) { List<Object>.add continue } List<Object>.size List<Object>.toArray
if ( ) { Integer.valueOf }
JTextArea.getText return ( String.contains String.contains )
StringBuilder.new Class.getName StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append for ( ; ; ) { if ( ) { StringBuilder.append } Class.getName StringBuilder.append } StringBuilder.append return ( StringBuilder.toString )
return ( Map<String,Object>.get )
if ( ) { IllegalArgumentException.new } Package.new HashMap.put
if ( String.equals ) { }
ReentrantReadWriteLock.readLock ReadLock.unlock
ArrayList<Object>.remove
if ( CharSequence.length ) { } if ( CharSequence.length ) { }
List<Object>.size while ( List<Object>.size ) { List<Object>.add }
PrintStream.println for ( ; ; ) { Connection.setAutoCommit } PrintStream.println for ( ; ; ) { PreparedStatement.close }
Paths.get Files.readAllBytes String.new
if ( ) { if ( ) { IllegalArgumentException.new } }
if ( String.equals ) { }
BigInteger.new BigDecimal.new BigDecimal.unscaledValue BigInteger.equals
Map<String,String>.put if ( ) { Map<String,String>.put } Map<String,String>.put Map<String,String>.put
Switch ( ) { case : String.getBytes String.length break case : String.getBytes String.length break default : String.getBytes String.length break }
if ( String.startsWith String.startsWith ) { return ( ) } if ( String.length String.charAt Character.isLetter String.charAt String.charAt String.charAt ) { return ( ) }
for ( HashMap<String,HashMap<Integer,Integer>>.keySet ) { HashMap<String,HashMap<Integer,Integer>>.get HashMap<Integer,Integer>.keySet for ( ) { HashMap<Integer,Integer>.get HashMap<Integer,Integer>.put } if ( Set<Integer>.size ) { HashMap<Integer,Integer>.get HashMap<Integer,Integer>.put } } for ( HashMap<String,Object>.keySet ) { HashMap<String,Object>.get if ( HashMap<String,HashMap<Integer,Integer>>.containsKey ) { } }
IdentityHashMap<Object,Object>.new Map<Object,Object>.size Map<Object,Object>.size ArrayList<Object>.new for ( Map<Object,Object>.values ) { List<Object>.add } Collections.sort
for ( ; ; ) { Collections.singletonList }
OutputStream.write OutputStream.write OutputStream.write OutputStream.write OutputStream.write OutputStream.write OutputStream.write OutputStream.write OutputStream.write
if ( Map<Object,Object>.isEmpty ) { } Map<Object,Object>.entrySet while ( Iterator<Entry<Object,Object>>.hasNext ) { Iterator<Entry<Object,Object>>.next Entry<Object,Object>.getKey Entry<Object,Object>.getValue List<Object>.isEmpty }
Logger.fine
if ( AtomicReference<Object>.compareAndSet ) { AtomicReference<Object>.get IllegalStateException.new }
SSLParameters.getCipherSuites SSLParameters.getProtocols if ( SSLParameters.getNeedClientAuth ) { if ( SSLParameters.getWantClientAuth ) { } }
if ( ) { if ( List.isEmpty ) { } List.remove if ( String.endsWith ) { } } if ( ) { Integer.parseInt } String.split if ( ) { File.new }
ArrayList.new for ( ) { List<Object>.add } List<Object>.clear List<Object>.addAll for ( ) { Math.random }
File.exists
if ( ) { if ( ) { Calendar.getInstance Calendar.setTime Calendar.getInstance Calendar.add if ( Calendar.before ) { } } }
if ( Field.isAccessible ) { Field.setAccessible } if ( ) { Field.get if ( Field.getType ) { IllegalStateException.new } } if ( ) { IllegalArgumentException.new } if ( Field.getModifiers ) { } Field.getType Object.getClass IllegalArgumentException.new Field.set if ( ) { Field.getName }
Calendar.getInstance Calendar.set Calendar.clone Calendar.getTimeZone Calendar.getTimeZone
String.length
while ( ) { AtomicReferenceArray.length AtomicReferenceArray.get if ( ) { while ( ) { if ( Object.equals ) { return ( ) } } if ( AtomicReferenceArray.compareAndSet ) { return ( ) } } }
return ( ArrayList<Object>.new )
BufferedWriter.write BufferedWriter.newLine BufferedWriter.flush
if ( ) { IllegalArgumentException.new }
if ( ) { UnsupportedOperationException.new } Set<Object>.iterator Iterator<Object>.next Iterator<Object>.hasNext Iterator<Object>.next
if ( ) { IllegalStateException.new } return ( FileInputStream.new )
Document.getElementsByTagNameNS NodeList.item Node.getAttributes Document.createAttributeNS Element.setAttributeNodeNS NamedNodeMap.getNamedItemNS Attr.getNodeName
return ( return ( Iterable<>.iterator return ( Iterator<>.hasNext ) return ( Iterator<>.next ) Iterator<>.remove Iterator<Object>.new ) Iterable<Object>.new )
MessageDigest.getInstance InternalError.new MessageDigest.digest return ( UUID.new )
MessageDigest.getInstance String.getBytes MessageDigest.update String.getBytes MessageDigest.update String.getBytes MessageDigest.update String.getBytes MessageDigest.update String.getBytes MessageDigest.update MessageDigest.digest if ( String.equals ) { MessageDigest.update String.getBytes MessageDigest.update String.getBytes MessageDigest.update String.getBytes MessageDigest.update String.getBytes MessageDigest.update MessageDigest.digest }
if ( ) { return ( FileOutputStream.new ) FileNotFoundException.getMessage } else { return ( ByteArrayOutputStream.new ) }
RuntimeException.new
if ( ) { PrintStream.println }
return ( Collections.emptyMap )
InputStream.available DataInputStream.new DataInputStream.readFully InputStream.close String.new String.new Pattern.compile Pattern.matcher if ( Matcher.matches ) { return ( Matcher.group ) } else { String.matches return ( ) }
for ( ; CharSequence.length ; ) { CharSequence.charAt }
Math.atan Math.toDegrees Math.atan Math.toDegrees Math.atan Math.toDegrees Math.atan Math.toDegrees Math.atan Math.toDegrees
if ( ) { ArrayList<Object>.new }
if ( ) { IllegalArgumentException.new } for ( ; ; ) { for ( ArrayList<Object>.size ; ; ) { ArrayList<Object>.get } }
Map<String,Object>.clear
if ( ) { while ( InputStream.read ) { } IOException.printStackTrace return ( ) }
if ( ) { return ( String.split Arrays.asList HashSet.new Collections.unmodifiableSet ) } return ( HashSet<String>.new Collections.unmodifiableSet )
List<Object>.get List<Object>.get ArrayList<Object>.new List<Object>.size List<Object>.size List<Object>.get List<Object>.get List<Object>.get List<Object>.get ArrayList<Object>.new Callable<Void>.new List<Object>.get
if ( CharSequence.toString String.contains ) { }
Window.removeWindowStateListener Window.addWindowStateListener
BufferedWriter.new PrintWriter.new if ( ) { if ( ) { if ( ) { ByteBuffer.allocate ByteBuffer.flip ByteBuffer.getLong return ( ) } } }
File.getName String.equalsIgnoreCase FileInputStream.new File.getAbsolutePath
Runnable.new
if ( ) { Vector.size for ( ; ; ) { Vector.elementAt } } else { String.trim if ( String.length ) { } }
return ( JAXBElement<Object>.new )
if ( ) { NullPointerException.new }
if ( ) { if ( ) { String.format } else { String.format } }
if ( ) { if ( List<Object>.nonEmpty ) { while ( List<Object>.nonEmpty ) { } while ( List<Object>.nonEmpty ) { } } }
for ( Map<String,String>.keySet ) { }
Semaphore.release if ( ) { ExecutorService.shutdownNow }
Attribute.getName String.substring String.toUpperCase String.substring Attribute.getValue Object.getClass Method.invoke ReflectionException.new Attribute.getValue InvalidAttributeValueException.new InvalidAttributeValueException.initCause MBeanException.new
Date.getTime Random.nextInt Date.new
return ( ThreadLocal<Object>.get )
return ( List<Object>.listIterator )
System.arraycopy
InputStreamReader.new BufferedReader.new while ( BufferedReader.readLine ) { String.trim } IOException.printStackTrace if ( ) { BufferedReader.close } IOException.printStackTrace
JTabbedPane.getTitleAt JComboBox<String>.removeItem JTabbedPane.remove
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new }
List<Object>.add
for ( ; ; ) { Short.shortValue } if ( ) { RuntimeException.new }
ArrayList<Object>.new if ( String.equals String.equals ) { ArrayList.new for ( ) { ArrayList<Object>.addAll } List<Object>.get List<Object>.get for ( ; List<Object>.size ; ) { if ( List<Object>.size ) { List<Object>.get } } String.valueOf } else { if ( String.equals ) { } }
return ( System.currentTimeMillis return ( ) )
if ( ) { Math.max Math.min }
return ( Arrays.asList Collections.unmodifiableList )
LinkedHashMap.new for ( Map<String,Set<String>>.entrySet ) { List<String>.get List<String>.size List<String>.subList if ( Map<String,Map<String,Set<String>>>.containsKey ) { Map<String,Map<String,Set<String>>>.get Entry<String,Set<String>>.getValue Collections.unmodifiableSet Map<String,Set<String>>.put } else { LinkedHashMap.new Map<String,Map<String,Set<String>>>.put Entry<String,Set<String>>.getValue Map<String,Set<String>>.put } } LinkedHashMap.new for ( Map<String,Map<String,Set<String>>>.entrySet ) { Entry<String,Map<String,Set<String>>>.getValue Collections.unmodifiableMap Entry<String,Map<String,Set<String>>>.getKey Map<String,Object>.put } return ( Collections.unmodifiableMap )
return ( Class<>.isArray Class.isAssignableFrom Class.isAssignableFrom Class.isAssignableFrom Class.isAssignableFrom )
TimeUnit.toMillis
if ( ) { if ( ) { Runtime.getRuntime Runtime.availableProcessors Executors.newFixedThreadPool for ( ; ; ) { Runnable.new ExecutorService.execute } ExecutorService.shutdown while ( ExecutorService.isTerminated ) { Thread.yield } } }
if ( ) { Collections.sort } else { Collections.sort }
if ( ) { IOException.new }
ArrayList<Object>.new List<Object>.add
return ( Integer.intValue )
ArrayList.new List<Object>.add List<Object>.add Hashtable<String,Object>.get File.new File.getName Hashtable<String,Object>.get Hashtable<String,Object>.get if ( String.equals ) { }
if ( String.trim String.equals ) { return ( ) } Vector.new StringTokenizer.new while ( StringTokenizer.hasMoreTokens ) { StringTokenizer.nextToken String.trim if ( String.equals ) { Vector.addElement } } return ( Vector.isEmpty Vector.size Vector.toArray )
return ( Iterable<>.iterator )
HashSet<File>.new if ( File.isFile File.getName String.endsWith ) { Set<File>.add } else { if ( File.isDirectory ) { for ( File.listFiles ) { Set<File>.addAll } } }
ArrayList<Object>.new for ( ) { List<Object>.add }
Class.getResourceAsStream Properties.load if ( ) { InputStream.close }
if ( String.isEmpty ) { } if ( String.isEmpty ) { } if ( String.isEmpty ) { } if ( String.isEmpty ) { } if ( String.isEmpty ) { } if ( String.isEmpty ) { }
Switch ( ) { default : RuntimeException.new }
HashSet<Object>.new
return ( ArrayList<String>.get )
HashMap.new if ( ) { IllegalArgumentException.new } for ( ; ; ) { Map<String,String>.put }
List<Object>.isEmpty List<Object>.isEmpty List<Object>.get List<Object>.isEmpty
ArrayList<Object>.add
return ( AtomicBoolean.get )
String.trim
KeyAgreementSpi.engineInit
if ( BigDecimal.signum ) { return ( ) } if ( ) { BigDecimal.negate }
return ( String.startsWith )
return ( return ( ) return ( ) if ( ) { IllegalStateException.new } )
return ( Object.toString String.equals )
Integer.valueOf
if ( ) { NullPointerException.new }
if ( ) { List<Object>.add }
if ( Class.isAssignableFrom ) { if ( Class<>.isInterface Class<>.isEnum ) { return ( ) } Class<>.getDeclaredField if ( ) { Class<>.getName } Field.getModifiers if ( Modifier.isPrivate ) { Class<>.getName } if ( Modifier.isStatic ) { Class<>.getName } if ( Modifier.isFinal ) { Class<>.getName } }
if ( List<Object>.contains ) { if ( List<Object>.contains ) { return ( ) } }
StringBuilder.append for ( ; ; ) { if ( ) { StringBuilder.append } } StringBuilder.append
return ( Map<String,String>.get )
ArrayList<Set<Object>>.new for ( ) { HashMap<Object,ArrayList<Object>>.get for ( ) { ArrayList<Set<Object>>.add } }
return ( if ( ) { RuntimeException.new } return ( ) Iterable<Object>.new )
LinkedList<Object[]>.new List<Object[]>.add List<Object[]>.add List<Object[]>.add List<Object[]>.add List<Object[]>.add List<Object[]>.add List<Object[]>.add List<Object[]>.add return ( List<Object[]>.toArray )
return ( Map<Object,Map<Object,Object>>.isEmpty )
Math.round Math.max Math.max if ( ) { if ( Map<String,Object>.containsKey Map<String,Object>.containsKey ) { Math.round } } if ( ) { if ( ) { if ( String.equals ) { if ( String.equals ) { } } if ( String.equals ) { if ( String.equals ) { } } } }
File.new
Runnable.new
if ( ) { LinkedList<Object>.new } for ( List<Object>.iterator ; Iterator<Object>.hasNext ; ) { Iterator<Object>.next if ( ) { List<Object>.add return ( ) } } List<Object>.add
if ( Stack<String>.size ) { Stack<String>.pop Stack<String>.peek return ( ) }
return ( ArrayList<Object>.get )
RuntimeException.new
if ( ) { if ( Number.doubleValue Math.abs ) { return ( Number.doubleValue Number.doubleValue ) } } else { if ( Number.longValue ) { return ( Number.longValue Number.longValue ) } }
StringBuffer.new while ( StringBuffer.length ) { }
LinkedList<Object>.isEmpty LinkedList<Object>.getFirst LinkedList<Object>.getLast
ArrayList.new for ( ) { List<String>.add }
if ( ) { System.currentTimeMillis while ( ) { System.currentTimeMillis } return ( ) }
ThreadLocal<Map<Object,Object>>.get if ( ) { HashMap<Object,Object>.new ThreadLocal<Map<Object,Object>>.set } Map<Object,Object>.put
return ( Float.intBitsToFloat )
LinkedList.add
String.indexOf if ( ) { String.indexOf if ( ) { return ( String.substring ) } }
if ( ) { if ( String.equalsIgnoreCase ) { if ( ) { Arrays.copyOfRange } } } URL.new PrintStream.println if ( ) { System.exit }
if ( String.equals ) { }
if ( String.equals ) { }
Map<Object,Object>.remove
for ( ) { if ( String.equals ) { ArrayList<Object>.remove return ( ) } }
if ( ) { String.split } for ( ; ; ) { Integer.parseInt }
if ( ) { if ( ) { MouseEvent.getSource MouseEvent.getPoint } }
if ( ) { Graphics.setColor } else { Graphics.setColor } Switch ( ) { case : Graphics.fillRect Graphics.fillRect break case : Graphics.fillRect Graphics.fillRect break case : Graphics.fillRect Graphics.fillRect break default : Graphics.fillRect Graphics.fillRect }
Properties.remove if ( String.startsWith ) { }
if ( ) { NoSuchElementException.new }
if ( ) { if ( String.startsWith String.startsWith String.startsWith ) { } }
return ( Observable.flatMap )
BigInteger.compareTo BigInteger.compareTo
File.new
Map<Object,Integer>.get if ( ) { Map<Object,Integer>.put } else { if ( ) { Map<Object,Integer>.put } }
if ( Vector.size ) { return ( ) }
for ( ) { if ( ) { List<PropertyChangeListener>.remove return ( ) } }
if ( ) { Arrays.toString Arrays.toString } if ( ) { if ( ) { if ( ) { if ( ) { RuntimeException.new } return ( ) } } }
return ( DatagramSocket.getSendBufferSize )
Map<Integer,Object>.put
List<Object>.size for ( ; ; ) { List<Object>.get }
if ( ) { if ( ) { String.contains } }
if ( ) { NullPointerException.new } for ( ) { if ( ) { NullPointerException.new } } ArrayList.new List<Object>.add for ( ) { List<Object>.add }
for ( ; ; ) { System.arraycopy }
List<Object>.lastIndexOf if ( ) { return ( List<Object>.get ) } else { return ( List<Object>.size List<Object>.get ) }
String.getBytes String.getBytes
for ( ) { for ( ) { if ( Set<Object>.contains ) { } } } for ( ) { if ( Set<Object>.isEmpty ) { return ( ) } }
for ( Object.getClass Class.getDeclaredMethods ) { Method.getAnnotation if ( ) { Method.getDeclaringClass } }
if ( ) { CharSequence.toString }
UIManager.getUI
List<Object>.clear
HashMap<String,String>.new Map<String,String>.put HashMap<String,Object>.new Map<String,Object>.put Map<String,Object>.put Double.parseDouble
if ( ) { File.new File.length return ( ) }
Integer.parseInt Integer.parseInt Math.max Integer.parseInt ArrayList.new ArrayList.add ArrayList.add ArrayList.add ArrayList.add Short.parseShort Math.max ArrayList.new ArrayList.add ArrayList.add Short.parseShort Math.min Math.max ArrayList.new ArrayList.add ArrayList.add
if ( ) { System.arraycopy } if ( ) { System.arraycopy } Reader.read
ArrayList<Object>.new ArrayList<Object>.add
if ( ) { if ( ) { RoundEnvironment.getRootElements if ( Set<>.isEmpty ) { ProcessingEnvironment.getMessager Set<>.iterator Iterator.next Messager.printMessage } } }
SecretKeySpec.new Mac.getInstance Mac.init Mac.doFinal
ArrayList<X509Certificate>.new Collection<X509Certificate>.add
if ( String.isEmpty ) { return ( ) }
LinkedList<Element>.new Element.getFirstChild while ( ) { if ( Node.getNodeType ) { LinkedList<Element>.add } Node.getNextSibling }
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new }
File.new File.getAbsoluteFile FileOutputStream.new OutputStreamWriter.new BufferedWriter.new Writer.write Writer.write while ( ) { Long.valueOf if ( ) { Writer.write Writer.write } else { if ( ) { Writer.write Writer.write Writer.write Writer.write } } Writer.write } Writer.write Writer.write Writer.write Writer.close IOException.toString
if ( ) { NullPointerException.new }
if ( ) { ArrayList<Object>.new } List<Object>.add
if ( ) { IllegalArgumentException.new } String.indexOf String.indexOf if ( String.length ) { IllegalArgumentException.new } String.substring Integer.parseInt String.substring Integer.parseInt String.length String.substring Integer.parseInt return ( Date.new )
if ( ) { ArrayList.add }
Long.parseLong
for ( ; ; ) { if ( ) { if ( ) { Arrays.copyOf } } }
return ( SimpleImmutableEntry<Object,Object>.new )
HashSet<String>.add
ObjectOutputStream.defaultWriteObject ObjectOutputStream.writeObject
Integer.valueOf
Double.new
for ( ; ; ) { Math.abs }
String.getBytes Math.min System.arraycopy
if ( ) { if ( ) { if ( ) { if ( ) { if ( ) { if ( ) { IllegalArgumentException.new } } } } } }
DropTarget.new CardLayout.new JPanel.new ComponentListener.new JFrame.addComponentListener WindowStateListener.new JFrame.addWindowStateListener WindowAdapter.new JFrame.addWindowListener JFrame.setDefaultCloseOperation JFrame.setJMenuBar JPanel.new JFrame.setContentPane JPanel.setLayout JPanel.add JPanel.add JPanel.add if ( ) { JFrame.addWindowListener }
if ( String.contains ) { URI.create if ( URI.getHost ) { return ( URI.getHost ) } }
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new }
if ( ) { IllegalArgumentException.new }
if ( ) { if ( ) { return ( FontMetrics.getHeight ) } } IllegalArgumentException.new
if ( ) { if ( ) { if ( ) { if ( String.equalsIgnoreCase ) { String.new } } } }
if ( ) { NullPointerException.new } if ( ) { NullPointerException.new }
HashMap.new for ( ) { Map<String,Object>.put }
if ( ) { Integer.valueOf }
return ( Iterable<Object>.iterator )
List<Object>.clear List<Object>.addAll
if ( String.compareTo ) { return ( Integer.parseInt ) return ( ) }
if ( String.length ) { File.new File.getParent String.length String.substring }
if ( ) { IllegalArgumentException.new } List<Float>.add
if ( ) { Long.parseLong return ( ) System.currentTimeMillis }
if ( ) { return ( Collections.emptySet ) } if ( ) { HashSet<Entry<Object,Object>>.new while ( Enumeration<>.hasMoreElements ) { Enumeration<>.nextElement return ( Entry<Object,Object>.getKey Entry<Object,Object>.getKey String.equals Entry<Object,Object>.getValue Entry<Object,Object>.getValue Object.equals ) return ( String.hashCode Object.hashCode ) return ( ) return ( ) return ( ) Entry<Object,Object>.new Set<Entry<Object,Object>>.add } }
OutputStream.write OutputStream.write
Switch ( String.toLowerCase ) { default : IllegalArgumentException.new }
return ( Calendar.getTimeInMillis Calendar.getTimeInMillis )
Arrays.setAll
String.format Connection.prepareStatement PreparedStatement.setInt PreparedStatement.setLong PreparedStatement.setInt PreparedStatement.setInt PreparedStatement.setInt List<Integer>.toArray Connection.createArrayOf PreparedStatement.setArray PreparedStatement.setInt PreparedStatement.executeUpdate PreparedStatement.close
ArrayList<Object>.new Iterable<>.iterator Iterator<>.next while ( Iterator<>.hasNext ) { Iterator<>.next List<Object>.add }
if ( TreeSet<Object>.size ) { return ( ) } if ( TreeSet<Object>.stream ) { }
List.size List.get if ( String.startsWith ) { String.length String.substring } Long.parseLong Exception.getMessage
String.concat
DocumentBuilderFactory.newInstance DocumentBuilderFactory.setNamespaceAware MessageFactory.newInstance MessageFactory.createMessage DocumentBuilderFactory.newDocumentBuilder DocumentBuilder.newDocument Document.importNode Document.appendChild SOAPMessage.getSOAPBody SOAPBody.addDocument SOAPMessage.getSOAPPart SOAPPart.importNode SOAPMessage.getSOAPHeader SOAPHeader.appendChild
return ( Arrays.asList )
for ( ; ; ) { String.valueOf }
if ( ) { IllegalArgumentException.new }
return ( List<Object>.get )
if ( ) { if ( StringBuilder.length ) { StringBuilder.append } StringBuilder.append }
return ( JCheckBox.isSelected )
return ( String.valueOf Integer.parseInt )
return ( Set<PathMatcher>.stream Stream.anyMatch )
if ( Method.getParameterTypes ) { return ( ) } Method.getName if ( String.equals ) { return ( ) } if ( Set<Method>.isEmpty ) { IllegalStateException.new } else { if ( Set<Method>.size ) { IllegalStateException.new } else { return ( Set<Method>.iterator Iterator.next ) } }
return ( Integer.intValue )
return ( String.valueOf )
return ( ArrayBlockingQueue<Object>.poll )
if ( ArrayList<Object>.isEmpty ) { }
WeakReference<Object>.new UUID.toString UUID.toString if ( ) { Switch ( ) { case : IllegalArgumentException.new case : UnsupportedOperationException.new default : RuntimeException.new } }
for ( ; Iterator.hasNext ; ) { Iterator.next }
return ( Integer.intValue )
for ( ) { if ( HashMap<String,Object>.get ) { } } return ( HashMap<String,Object>.values ArrayList<Object>.new )
if ( List.size ) { List.size } return ( List.get )
return ( String.length )
if ( ) { NullPointerException.new } if ( Class<>.isInstance ) { return ( Enum.name ) }
JButton.doClick WindowAdapter.new
JButton.setEnabled
return ( Integer.intValue )
List<Object>.size for ( ; List<Object>.size ; ) { List<Object>.get }
ArrayList<Object>.new
Stack.pop
return ( List<Object>.get )
ReentrantLock.lock ReentrantLock.unlock
Objects.requireNonNull if ( ) { HashSet.new Set<Object>.add } else { Set<Object>.add }
if ( String.charAt ) { return ( ) }
if ( String.getBytes String.length ) { return ( URLEncoder.encode ) return ( ) }
return ( BigInteger.bitLength )
if ( ) { NullPointerException.new }
AtomicLong.new
String.length String.length StringBuffer.new for ( ; ; ) { String.charAt String.indexOf if ( ) { StringBuffer.append } else { if ( ) { String.charAt StringBuffer.append } } } return ( StringBuffer.toString )
if ( ) { RuntimeException.new } RuntimeException.new
return ( ServerSocketFactory.getDefault return ( ServerSocketFactory.createServerSocket ) PrivilegedExceptionAction<ServerSocket>.new AccessController.doPrivileged )
if ( String.length ) { IllegalArgumentException.new } return ( X509Certificate.getSubjectDN Principal.getName Locale.getDefault String.toUpperCase Locale.getDefault String.toUpperCase String.contains )
String.startsWith return ( String.charAt String.valueOf String.toLowerCase String.substring )
if ( ) { RuntimeException.new }
if ( ) { NullPointerException.new }
if ( ) { if ( String.trim String.length ) { } }
System.getSecurityManager if ( ) { if ( ) { RuntimePermission.new SecurityManager.checkPermission } }
UnsupportedOperationException.new
if ( ) { Math.min }
return ( Set<Entry<Object,Object>>.contains )
HashMap<Connection,Object>.put
HashMap<String,CollationElement>.new for ( ; ; ) { HashMap<String,CollationElement>.put }
for ( List<Object>.size ; ; ) { List<Object>.get List<Object>.remove }
while ( ) { FileChannel.truncate return ( ) }
LinkedHashMap<Object,Set<File>>.new for ( ) { Map<Object,Set<File>>.put }
System.nanoTime System.nanoTime if ( ) { if ( List<Object>.size ) { List<Object>.get } }
if ( ) { StringBuffer.append for ( ; ; ) { StringBuffer.append } }
Boolean.valueOf
Switch ( ) { default : IllegalArgumentException.new } return ( Float.new )
if ( Float.isNaN ) { List<Object>.add }
return ( String.valueOf )
if ( JTable.getColumnCount ) { PrintStream.println return ( ) } JTable.getTableHeader if ( ) { JTableHeader.getDefaultRenderer } JTable.getColumnModel TableColumnModel.getColumn TableColumn.getHeaderRenderer if ( ) { TableColumn.getHeaderValue TableCellRenderer.getTableCellRendererComponent Component.getPreferredSize }
StringCharacterIterator.new
for ( ConcurrentHashMap<String,Object>.values ) { } ConcurrentHashMap<String,Object>.clear
return ( Function<Object,Object>.apply Objects.requireNonNull )
if ( ) { Stack<Object>.clear } if ( ) { Stack<Object>.clear }
if ( String.startsWith ) { return ( ) } System.lineSeparator String.indexOf String.substring if ( String.endsWith ) { return ( String.length String.length String.substring ) }
ArrayList<File>.new if ( ) { Collection<File>.add }
if ( ) { System.currentTimeMillis }
return ( return ( ) return ( ) UnsupportedOperationException.new Iterator<Object>.new )
return ( Constructor.getDeclaringClass Class.getName )
Class.getName
return ( Float.valueOf )
if ( String.startsWith String.endsWith ) { }
if ( ) { if ( ) { Math.max Math.round Math.round } } else { if ( ) { if ( ) { Math.max Math.round Math.round } } } OutOfMemoryError.getMessage
if ( ) { if ( ) { ArithmeticException.new } else { if ( ) { ArithmeticException.new } } }
return ( Integer.intValue )
for ( ) { if ( File.new File.canExecute ) { break } } Runtime.getRuntime Runtime.exec Process.getErrorStream InputStream.read if ( ) { RuntimeException.new } PrintStream.write Process.waitFor if ( ) { RuntimeException.new } Integer.toString Runtime.exec PrintStream.println Thread.sleep Runtime.exec Process.waitFor if ( ) { RuntimeException.new }
return ( ArrayList<Integer>.contains )
Switch ( ) { default : IllegalArgumentException.new }
if ( ) { IllegalArgumentException.new } else { if ( ) { return ( Math.pow Math.pow ) } }
if ( ) { GregorianCalendar.new GregorianCalendar.set GregorianCalendar.set return ( GregorianCalendar.getTime Date.getTime ) }
return ( NumberFormat.format NumberFormat.format NumberFormat.format NumberFormat.format NumberFormat.format NumberFormat.format )
if ( List<String>.size ) { return ( List<String>.size List<String>.get ) }
if ( ) { IllegalArgumentException.new }
if ( String.contains ) { String.indexOf String.substring Integer.parseInt String.indexOf String.substring } String.split for ( ; ; ) { Integer.parseInt }
for ( LinkedHashMap<String,Object>.values ) { }
ArrayList<Object>.add
for ( ; ; ) { BigDecimal.add BigDecimal.add } if ( BigDecimal.signum ) { } BigDecimal.multiply if ( BigDecimal.signum ) { } BigDecimal.multiply BigDecimal.add
List<Object>.size
DataOutputStream.writeFloat
File.listFiles if ( ) { Arrays.sort } for ( ) { File.getName if ( File.isDirectory ) { if ( SourceVersion.isIdentifier ) { } } else { if ( ) { File.new } } }
if ( ) { LogManager.getLogger Logger.getLevel return ( Level.getName ) return ( LogManager.getLoggerNames Collections.list ) LogManager.getLogger Logger.getParent return ( Logger.getName ) LogManager.getLogger if ( ) { IllegalArgumentException.new } if ( ) { Level.parse } Logger.setLevel LoggingMXBean.new }
if ( ) { SQLException.new }
SwingUtilities.invokeLater
String.length
Point2D.getX Point2D.getX Point2D.getY Point2D.getY Double.new Math.tan Math.abs Math.tan Point2D.getX Point2D.getY Point2D.setLocation Point2D.getX Point2D.getX Point2D.getY Point2D.getY Double.new
LinkedHashSet<TypeElement>.new
if ( ) { return ( Object.equals ) }
return ( ArrayList<Object>.new )
for ( ; ; ) { String.toLowerCase String.indexOf if ( ) { if ( ) { String.substring String.length String.substring } } } for ( ; ; ) { if ( ) { PrintStream.println } }
File.getParentFile if ( String.equals ) { File.getPath File.new if ( File.exists ) { File.getAbsolutePath if ( File.delete ) { } } if ( ) { if ( File.getPath File.new File.renameTo ) { } File.getPath File.new } }
Properties.new Properties.setProperty Properties.setProperty ArrayList<Long>.new for ( ; ; ) { ArrayList<Long>.add } for ( ; ; ) { if ( ArrayList<Long>.get ) { ArrayList<Long>.get } } Thread.currentThread Thread.sleep for ( ; ; ) { ArrayList<Long>.get }
if ( File.exists File.isDirectory ) { return ( ) } return ( File.getAbsolutePath )
if ( ) { return ( Comparable<Object>.compareTo ) } return ( Comparator<>.compare )
File.new if ( File.exists ) { File.new if ( File.exists ) { return ( ) } }
Class<Object>.getName
System.currentTimeMillis
if ( ) { PrintStream.println }
Stack.pop Stack.isEmpty Stack.peek
ArrayList.new for ( ; ; ) { Stack.pop List.add }
if ( KeyEvent.getKeyCode ) { }
List<Object>.size ArrayList<Object>.new
return ( Class<Object>.cast )
if ( ) { IllegalStateException.new }
if ( Thread.interrupted ) { InterruptedException.new } if ( ) { if ( ) { System.nanoTime for ( ; ; ) { if ( ) { System.nanoTime } } } }
if ( ) { return ( String.replace ) } else { return ( String.replace ) }
HashMap<String,Object>.get if ( ) { HashMap<Object,Integer>.clear for ( ) { HashMap<Object,Integer>.put } } HashMap<String,Object>.get if ( ) { HashMap<Object,Integer>.clear HashMap<Object,Integer>.put } HashMap<String,Object>.get HashMap<String,Object>.get HashMap<String,Object>.get HashMap<String,Object>.get HashMap<String,Object>.get
Class.getResourceAsStream InputStreamReader.new BufferedReader.new ArrayList<Object>.new BufferedReader.readLine while ( BufferedReader.readLine ) { StringTokenizer.new StringTokenizer.nextToken StringTokenizer.nextToken Integer.parseInt StringTokenizer.nextToken Integer.parseInt for ( ; ; ) { StringTokenizer.nextToken Integer.parseInt } List<Object>.add } List<Object>.toArray if ( ) { BufferedReader.close }
if ( Map.containsKey ) { return ( ) } Map.get
return ( MessageDigest.digest )
ByteArrayInputStream.new Exception.printStackTrace
ArrayList<Object>.add
if ( ) { if ( ) { NullPointerException.new } }
Collections.unmodifiableList List<Object>.size
Runnable.new
List<Long>.size List<Long>.get while ( ) { if ( ) { List<Object>.size List<Object>.get } }
Callable<Void>.new
Hashtable<String,Object>.clear
EnumSet.copyOf
if ( ) { String.format } if ( ) { String.format }
do { StringBuffer.charAt } while ( ) ; if ( ) { return ( StringBuffer.substring ) } else { return ( StringBuffer.substring ) }
BorderLayout.new
if ( ) { Exception.new }
if ( String.equals ) { }
Class.getName if ( ) { RuntimeException.new } Integer.parseInt if ( ) { RuntimeException.new } Boolean.parseBoolean
for ( ; ; ) { if ( String.equals ) { break } }
if ( ) { Integer.valueOf }
RejectedExecutionHandler.rejectedExecution
Map<Object,Map<Object,Object>>.isEmpty
Socket.getInputStream InputStreamReader.new BufferedReader.new Socket.getOutputStream PrintWriter.new PrintWriter.println while ( BufferedReader.readLine ) { String.trim String.indexOf String.lastIndexOf if ( ) { String.substring String.substring String.substring } String.trim String.trim } Socket.close
if ( ) { IllegalArgumentException.new } ByteArrayInputStream.new
return ( Class.getCanonicalName String.contains )
Integer.new if ( ) { return ( Integer.intValue ) }
Collections.singletonList
ThreadFactory.newThread
return ( URI.create )
Vector.setElementAt Vector.toArray
return ( CopyOnWriteArrayList<Object>.new )
Class.new Class.new
if ( ) { IllegalArgumentException.new } if ( ) { System.arraycopy }
return ( String.equals )
if ( ) { if ( String.equalsIgnoreCase ) { } }
Files.newOutputStream
if ( ) { PrintStream.println } if ( ) { ContentHandler.startElement }
for ( ServiceLoader.load ) { } RuntimeException.new
List<Object>.forEach List<Object>.forEach
String.indexOf return ( String.substring )
List<Object>.add
for ( ; ; ) { if ( Object.equals ) { return ( ) } }
HashMap<String,Object>.get if ( ) { System.currentTimeMillis }
if ( ) { if ( Iterator<>.hasNext ) { Iterator<>.next } }
Document.getDoctype DocumentType.getEntities NamedNodeMap.getNamedItem Node.getAttributes
BigInteger.new BigDecimal.new BigInteger.new BigDecimal.new
for ( HashMap<,Integer>.keySet ) { if ( HashMap<,Integer>.get ) { HashMap<,Integer>.get } }
return ( File.getPath )
return ( if ( ) { AffineTransform.new } if ( ) { AffineTransform.new } AffineTransform.new AffineTransform.createInverse AffineTransform.preConcatenate return ( ) )
if ( String.trim String.length ) { } if ( ) { if ( String.indexOf ) { } if ( String.indexOf ) { } }
return ( return ( Function<,Integer>.apply ) Callable<Integer>.new )
return ( Class.newInstance ) AssertionError.new AssertionError.new
Map.put
if ( Set<Object>.size ) { } return ( String.format )
if ( ) { IdentityHashMap<Object,Object>.get IdentityHashMap<Object,Object>.put Objects.equals }
Collection<Object>.add String.new StringBuilder.append IllegalStateException.new
if ( ) { NullPointerException.new }
for ( ; List<Object>.size ; ) { List<Object>.get } if ( ) { List<Object>.get PrintStream.println }
if ( ) { File.getAbsolutePath }
List<String>.size StringBuilder.new if ( ) { Exception.new } for ( ; ; ) { List<String>.get StringBuilder.append StringBuilder.append } return ( StringBuilder.toString )
return ( Set<String>.isEmpty )
return ( ActionListener.new )
Math.log Math.log Math.ceil Math.log Math.log Math.log Math.ceil
do { RandomAccessFile.read if ( ) { EOFException.new } } while ( ) ;
if ( ) { System.arraycopy System.arraycopy }
return ( Charset.decode CharBuffer.toString )
if ( ) { return ( Collections.emptyList ) } ArrayList.new for ( ; ; ) { List<Object>.add }
ByteArrayOutputStream.new ByteArrayOutputStream.toByteArray
Timer.new TimerTask.new Timer.schedule
List<Object>.add
if ( AtomicBoolean.compareAndSet ) { return ( ) }
HashMap<String,Object>.get HashMap<String,Object>.put
ArrayList<Object>.new ArrayList<Object>.new
if ( ) { IllegalArgumentException.new }
return ( MenuDragMouseHandler.new )
RuntimeException.new
for ( ) { if ( ) { if ( ) { if ( ) { IllegalStateException.new } } } }
if ( ) { IllegalArgumentException.new } for ( ) { Collection.add }
return ( LayoutQueue.getDefaultQueue )
if ( ) { ArrayList<Object>.new } ArrayList<Object>.new for ( ) { if ( ) { List<Object>.remove } }
Map.get Map.get List.size Math.abs List.size Math.abs List.size Math.abs List.size Math.abs
return ( Collections.unmodifiableSet )
if ( Character.isDigit ) { Float.valueOf } DataOutputStream.writeLong DataOutputStream.writeFloat if ( ) { DataOutputStream.writeLong while ( String.equals ) { String.toLowerCase if ( ) { DataOutputStream.writeLong } } DataOutputStream.writeLong } DataOutputStream.writeLong
ArrayList<Object>.size if ( ) { for ( ; ; ) { ArrayList<Object>.get if ( ) { if ( ) { ArrayList<Object>.remove } } } if ( ) { Collections.sort } } for ( ; ; ) { ArrayList<Object>.get }
ArrayList.new for ( ) { if ( ) { List<Object>.add } } if ( List<Object>.size ) { List<Object>.get }
List<Integer>.size List<Integer>.size List<Object>.size ByteArrayOutputStream.new DataOutputStream.new DataOutputStream.writeInt DataOutputStream.writeInt DataOutputStream.writeInt DataOutputStream.writeInt DataOutputStream.writeInt List<Object>.size for ( ; ; ) { List<Integer>.get DataOutputStream.writeInt List<String>.get DataOutputStream.writeUTF } for ( ; ; ) { List<Integer>.get DataOutputStream.writeInt List<String>.get DataOutputStream.writeUTF } if ( ) { for ( ) { DataOutputStream.writeInt DataOutputStream.writeUTF } } DataOutputStream.close return ( ByteArrayOutputStream.toByteArray )
ReentrantLock.lock if ( ) { Class.getComponentType Array.newInstance } if ( ) { System.arraycopy } else { System.arraycopy System.arraycopy } ReentrantLock.unlock
return ( Properties.clone )
JLabel.setForeground JLabel.setBackground JLabel.setFont
HashMap<String,String>.new Integer.toString Map<String,String>.put Integer.toString Map<String,String>.put Integer.toString Map<String,String>.put Integer.toString Map<String,String>.put Integer.toString Map<String,String>.put Integer.toString Map<String,String>.put Integer.toString Map<String,String>.put Integer.toString Map<String,String>.put Integer.toString Map<String,String>.put
ArrayList<Object>.get
Integer.getInteger Integer.getInteger Integer.getInteger if ( ) { List<Object>.add } if ( ) { ArrayList<Object>.new Thread.new Thread.setDaemon return ( ) ThreadFactory.new Executors.newScheduledThreadPool }
ArrayList<Object>.add ArrayList<Integer>.add ArrayList<Object>.add ArrayList<Float>.add
if ( ) { IllegalArgumentException.new } HashMap<String,Collection<X509Certificate>>.new for ( Map<String,Collection<X509Certificate>>.entrySet ) { Entry<String,Collection<X509Certificate>>.getKey Locale.getDefault String.toUpperCase Entry<String,Collection<X509Certificate>>.getValue Map<String,Collection<X509Certificate>>.put }
if ( SoftReference<Object>.get ) { SoftReference<Object>.new }
Reader.markSupported BufferedReader.new
if ( ) { Integer.valueOf }
ReentrantReadWriteLock.readLock Lock.lock if ( String.length ) { IllegalArgumentException.new } Lock.unlock
while ( ) { BufferedReader.readLine if ( ) { if ( String.contentEquals ) { } Exception.getMessage if ( String.startsWith ) { } } }
List.size while ( ) { List.get }
if ( String.endsWith ) { } if ( X509Certificate.getPublicKey ) { X509Certificate.getPublicKey RSAKey.getModulus BigInteger.toByteArray } X509Certificate.getEncoded Exception.getMessage
Connection.getMetaData DatabaseMetaData.getTables ResultSet.next ResultSet.close if ( ) { ResultSet.close }
if ( ) { JComponent.removePropertyChangeListener }
TimeUnit.convert TimeUnit.convert TimeUnit.convert
return ( Double.parseDouble )
return ( DateFormat.parse ) RuntimeException.new
if ( ) { if ( ) { IllegalArgumentException.new } }
HashMap<Object,Map<Object,Map<Object,Set<Object>>>>.new for ( ; ; ) { if ( ) { Map.get Set.iterator while ( Iterator<Object>.hasNext ) { Iterator<Object>.next } } }
return ( String.equals String.equals )
Double.doubleToLongBits
if ( Vector.size ) { return ( ) } Vector.addElement
Runnable.new
HashMap.new
for ( ) { if ( Method.getName String.equals ) { continue } Method.getParameterTypes if ( ) { Object.getClass } Method.invoke return ( ) }
Any.insert_Streamable
Method.getReturnType Method.getName if ( Class.getName String.equals ) { }
if ( ) { Socket.close }
if ( ) { IllegalArgumentException.new }
for ( ; ; ) { HashSet<Object>.new BitSet.new }
if ( ) { InvalidParameterException.new } if ( ) { InvalidParameterException.new }
return ( ReentrantReadWriteLock.new Map<Object,Object>.get )
StringBuilder.new String.lastIndexOf if ( ) { String.substring StringBuilder.append } else { StringBuilder.append } if ( ) { return ( StringBuilder.toString ) } String.trim if ( String.length ) { return ( StringBuilder.toString ) } if ( String.startsWith ) { StringBuilder.append } StringBuilder.append return ( StringBuilder.toString )
if ( ) { PrintStream.println }
IOException.getMessage
if ( ) { NullPointerException.new } ArrayList<Object>.size BitSet.new
InternalError.new
Double.new
for ( ; ; ) { if ( String.equals ) { return ( ) } }
TimeUnit.toMillis System.currentTimeMillis TimeUnit.toMillis
Boolean.valueOf
if ( List<Object>.isEmpty ) { return ( Exception.new ) } ArrayList.new for ( ) { if ( ) { List<Object>.add } } List<Object>.add return ( ArrayList.new )
if ( Collection<>.isEmpty ) { Collection<>.size Collection<>.toArray }
HashMap.new
return ( Integer.intValue )
System.currentTimeMillis System.currentTimeMillis System.currentTimeMillis Arrays.sort System.currentTimeMillis System.currentTimeMillis System.currentTimeMillis
Arrays.asList
if ( ) { DOMException.new }
Boolean.valueOf HashMap.put
return ( Entry<Object,Object>.equals )
if ( ) { IllegalArgumentException.new } EnumSet<Object>.addRange
if ( Logger.isLoggable ) { Logger.log } if ( ) { Logger.log RuntimeException.new } Logger.log Logger.log
if ( List<String>.size ) { List<String>.get return ( ) } else { List<String>.get List<String>.size List<String>.subList Map<String,Object>.put return ( ) }
if ( ) { IllegalArgumentException.new }
System.currentTimeMillis Timestamp.new
MouseAdapter.new MouseMotionAdapter.new
Throwable.printStackTrace RuntimeException.new
if ( ) { PrintWriter.close }
if ( ) { NullPointerException.new } if ( ) { IllegalArgumentException.new } if ( ) { NullPointerException.new } if ( ) { IllegalArgumentException.new } if ( ) { NullPointerException.new } if ( ) { IllegalArgumentException.new }
JOptionPane.new JOptionPane.createDialog JDialog.show
if ( ) { NullPointerException.new }
PrintStream.println PrintStream.println PrintStream.println PrintStream.println PrintStream.println PrintStream.println PrintStream.println PrintStream.println PrintStream.println PrintStream.println PrintStream.println PrintStream.println
Collection<Object>.add
if ( String.isEmpty ) { return ( ) } for ( ; String.length ; ) { String.charAt if ( ) { if ( ) { if ( Character.digit ) { return ( ) } } } }
for ( Map<Integer,Object>.values ) { }
RuntimeException.new
for ( Map<String,String>.keySet ) { Map<String,String>.get String.replace }
ByteArrayOutputStream.new while ( InputStream.read ) { ByteArrayOutputStream.write } ByteArrayOutputStream.toByteArray ByteArrayOutputStream.close
if ( ) { if ( String.equalsIgnoreCase ) { } } IOException.getMessage PrintStream.println
return ( List<Object>.add )
CharSequence.length if ( ) { IndexOutOfBoundsException.new } for ( ; ; ) { if ( CharSequence.charAt CharSequence.charAt ) { } }
UnsupportedOperationException.new
ArrayList<Object>.new List<Object>.add for ( ) { for ( ) { if ( ) { List<Object>.add } } }
Document.getElementsByTagName NodeList.item Node.getFirstChild CharacterData.substringData
if ( ) { IllegalStateException.new }
for ( ; ; ClassLoader.getParent ) { } ArrayList<Object>.new ArrayList<Object>.addAll ArrayList<Object>.clear for ( ; ArrayList<Object>.size ; ) { ArrayList<Object>.get }
return ( ArrayList<Object>.new )
for ( ; ; ) { if ( ) { if ( Object.equals ) { return ( ) } } }
JTable.convertRowIndexToModel if ( ) { JTable.getFont Component.setFont } else { if ( ) { if ( ) { JCheckBox.setVisible } else { JTable.getFont Component.setFont } } } JTable.isCellEditable if ( ) { if ( ) { Color.darker } } if ( ) { JTable.getSelectionBackground JTable.getSelectionForeground } Component.setBackground Component.setForeground
while ( ) { InterruptedException.printStackTrace }
if ( ) { Arrays.asList }
if ( String.equals ) { } if ( String.equals ) { }
ObjectInput.readInt ObjectInput.readFully
Arrays.fill ArrayList<Object>.size for ( ; ArrayList<Object>.size ; ) { ArrayList<Object>.get for ( ArrayList<Object>.get ; ; ) { } }
for ( ; String.length ; ) { for ( ; String.length ; ) { if ( String.charAt String.charAt String.charAt String.charAt ) { break } } } return ( String.length String.length )
if ( Double.isInfinite ) { return ( ) }
PrintStream.println
for ( ; List<Object>.size ; ) { List<Object>.add } for ( ) { List<Object>.add }
PrintStream.println if ( String.equals ) { if ( String.equals ) { RuntimeException.new } } PrintStream.println PrintStream.println if ( ) { PrintStream.println } PrintStream.println PrintStream.println if ( ) { PrintStream.println } PrintStream.println
ResourceBundle.getString
if ( ) { if ( ) { IllegalArgumentException.new } } else { if ( Map<String,String>.containsKey ) { IllegalArgumentException.new } } if ( Map<String,String>.isEmpty ) { IllegalArgumentException.new }
Iterable<>.iterator if ( Iterator<>.hasNext ) { Iterator<>.next while ( Iterator<>.hasNext ) { Iterator<>.next if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } } }
if ( ) { IllegalArgumentException.new } Math.max Math.min
if ( ) { Deque<Closeable>.addFirst }
Objects.requireNonNull
return ( Random.nextInt )
if ( ) { IllegalArgumentException.new }
if ( ) { HashMap<Integer,Object>.new Map<Integer,Object>.put Map<Integer,Object>.put Map<Integer,Object>.put Map<Integer,Object>.put Map<Integer,Object>.put Map<Integer,Object>.put Map<Integer,Object>.put Map<Integer,Object>.put Map<Integer,Object>.put Map<Integer,Object>.put Map<Integer,Object>.put Map<Integer,Object>.put Map<Integer,Object>.put }
Runnable.new Thread.new Thread.start
List<Object>.size for ( ; ; ) { List<Object>.get } List<Object>.size for ( ; ; ) { List<Object>.get } List<Object>.size for ( ; ; ) { List<Object>.get } List<Object>.size for ( ; ; ) { List<Object>.get } List<Object>.size for ( ; ; ) { List<Object>.get }
if ( ) { if ( ) { NullPointerException.new } }
if ( ) { if ( ) { ArrayList.new for ( ) { List.add } return ( ) } }
PrintWriter.println
LinkedList<Object>.new List<Object>.add
ByteArrayOutputStream.new return ( ByteArrayOutputStream.toString )
for ( ) { Map<String,Object>.get for ( ) { Map<String,Object>.get } }
if ( ) { if ( ) { PrintStream.println } return ( ) } else { if ( ) { if ( ) { PrintStream.println } } else { if ( ) { PrintStream.println } } }
return ( LinkedHashMap<String,Object>.size )
Iterator<Object>.next Iterator<Object>.next while ( ) { Math.min if ( ) { IllegalStateException.new } if ( ) { Iterator<Object>.next } if ( ) { Iterator<Object>.next } }
while ( Iterator<Object>.hasNext ) { if ( List<Object>.size ) { break } Iterator<Object>.next List<Object>.iterator while ( Iterator<Object>.hasNext ) { Iterator<Object>.next while ( Iterator<Object>.hasNext ) { Iterator<Object>.next } if ( ) { Iterator<Object>.remove } } }
if ( ) { IllegalArgumentException.new }
if ( System.getProperty ) { return ( ) } if ( String.equals String.contains ) { } for ( ) { String.split if ( String.equalsIgnoreCase ) { } }
ArrayList<Object>.clear
String.valueOf PrintStream.println for ( ; ; ) { Thread.start } Thread.sleep PrintStream.println
File.new File.toPath
if ( ) { if ( ) { System.arraycopy } else { if ( ) { System.arraycopy } else { System.arraycopy System.arraycopy } } }
if ( ) { if ( ) { IllegalArgumentException.new } }
Long.new Long.longValue Long.new Long.longValue Long.new Long.longValue BigDecimal.new BigDecimal.new BigDecimal.divide BigDecimal.movePointRight return ( BigDecimal.intValue )
if ( ) { IllegalStateException.new }
ArrayList.new for ( ) { ArrayList<Object>.size ArrayList<Object>.add } while ( ArrayList<Object>.size ) { ArrayList<Object>.size ArrayList<Object>.add } for ( ; ; ) { ArrayList<Object>.get }
if ( ) { IllegalArgumentException.new }
ByteArrayInputStream.new Exception.printStackTrace
BigDecimal.new
Exception.getMessage
if ( Map<Object,Object>.isEmpty ) { while ( Iterator<Object>.hasNext ) { Iterator<Object>.next } Map<Object,Object>.clear }
if ( ) { return ( String.valueOf ) }
if ( ) { if ( ) { String.trim if ( String.length ) { } if ( String.startsWith ) { String.substring } for ( ; ; ) { String.substring Integer.parseInt } if ( String.length ) { String.substring Integer.parseInt } else { Color.getAlpha } return ( Color.new ) } }
Color.new
if ( String.equals ) { }
return ( Hashtable.get )
if ( Map<String,Object>.containsKey Map<String,Object>.get Boolean.valueOf ) { String.replaceAll }
if ( ) { IllegalArgumentException.new } HashMap<String,Collection<X509Certificate>>.new for ( Map<String,Collection<X509Certificate>>.entrySet ) { Entry<String,Collection<X509Certificate>>.getKey Locale.getDefault String.toUpperCase Entry<String,Collection<X509Certificate>>.getValue Map<String,Collection<X509Certificate>>.put }
return ( return ( ) Callable<Object>.new )
LogManager.getLogManager LogManager.checkAccess
if ( ) { return ( Comparable.compareTo ) } if ( ) { return ( Comparable.compareTo ) }
if ( ) { IllegalArgumentException.new }
do { AtomicReference<Object>.get } while ( AtomicReference<Object>.compareAndSet ) ;
if ( String.isEmpty ) { return ( Collections.emptyList ) } if ( ) { Arrays.asList } else { Collections.emptyList }
Set<Object>.add while ( Iterator<Object<Object>>.hasNext ) { Iterator<Object<Object>>.next }
if ( ) { if ( ) { Switch ( ) { case : FocusListener.focusGained break case : FocusListener.focusLost break } } }
if ( ) { Error.text return ( ) } PrintStream.println
File.listFiles if ( ) { IllegalArgumentException.new } for ( ) { if ( File.isDirectory ) { } if ( File.delete ) { IOException.new } }
Double.isNaN Double.isNaN Double.isInfinite Double.isInfinite
return ( PatternSyntaxException.new )
Boolean.valueOf
DOMTestDocumentBuilderFactory.newInstance
if ( ) { LinkedList<Object>.listIterator while ( ListIterator<Object>.hasNext ) { ListIterator<Object>.next if ( ) { if ( ) { ListIterator<Object>.remove } Collection<Object>.add } } }
List<Object>.size
List<Object>.add
return ( String.valueOf Collections.singleton )
ResultSet.getString ResultSet.getString ResultSet.getString ResultSet.getString ResultSet.getString ResultSet.getString ResultSet.getString ResultSet.getBoolean
while ( ) { Character.codePointAt if ( Character.toLowerCase ) { return ( ) } Character.charCount }
if ( Set<String>.contains ) { Set<String>.add }
Map<Object,Object>.get if ( ) { Map<Object,Object>.put }
if ( String.equals ) { }
Connection.setAutoCommit Connection.commit
StringBuffer.new String.length for ( ; ; ) { if ( String.charAt ) { String.charAt StringBuffer.append } } return ( StringBuffer.toString )
if ( String.length ) { return ( ) }
StringBuilder.new return ( StringBuilder.toString )
ArrayList.new if ( ) { Arrays.asList List<String>.addAll } else { Class.forName Class.getMethod Method.invoke File.new if ( File.exists File.isDirectory ) { File.listFiles for ( ) { if ( File.exists File.isFile File.getName String.endsWith ) { File.getAbsolutePath List<String>.add } } } Exception.getMessage }
Map<String,Object>.get Map<String,Object>.put
List<Integer>.set
return ( HashMap<Object,Object>.get )
BasicComboPopup.getList JList.getModel JList.getCellRenderer for ( ; ListModel.getSize ; ) { ListModel.getElementAt ListCellRenderer.getListCellRendererComponent Component.getPreferredSize Math.max } if ( GraphicsEnvironment.isHeadless ) { GraphicsEnvironment.getLocalGraphicsEnvironment GraphicsEnvironment.getMaximumWindowBounds Rectangle.getHeight } Math.max
ArrayList.new for ( ) { List<Object>.add }
String.length while ( String.charAt Character.isWhitespace ) { } return ( String.substring )
if ( GraphicsEnvironment.isHeadless ) { Toolkit.getDefaultToolkit Toolkit.getScreenResolution }
for ( ; ; ) { for ( ; ; ) { ColorModel.getRGB ColorModel.getAlpha ColorModel.getDataElements BufferedImage.getRaster WritableRaster.setDataElements } }
FileOutputStream.new BufferedOutputStream.new while ( InputStream.read ) { OutputStream.write } OutputStream.flush
if ( ) { IllegalArgumentException.new } File.new
ReentrantLock.lock if ( ReentrantLock.isLocked ) { ReentrantLock.unlock }
if ( ) { if ( Map<Object,>.isEmpty ) { IllegalArgumentException.new } Map<Object,>.keySet Set.iterator Iterator<Object>.next if ( Class.isEnum ) { Class.getSuperclass } }
Map<String,Object>.get Map<String,Object>.get Map<String,String>.get Class.forName Class<>.getDeclaredMethod Method.invoke
PriorityQueue<Object>.clear
PrintStream.println
if ( ) { String.lastIndexOf if ( ) { String.substring } }
return ( Charset.defaultCharset )
StringBuilder.new StringBuilder.append StringBuilder.append String.format StringBuilder.append String.format StringBuilder.append String.format StringBuilder.append String.format StringBuilder.append String.format StringBuilder.append String.format StringBuilder.append return ( StringBuilder.toString )
ConcurrentHashMap.new ConcurrentHashMap.new ConcurrentHashMap.new for ( ) { ArrayList<Object>.new } if ( ) { ScheduledThreadPoolExecutor.new return ( ) ThreadFactory.new ScheduledThreadPoolExecutor.setThreadFactory ScheduledThreadPoolExecutor.scheduleAtFixedRate } return ( ConcurrentMap<Object,Object>.size )
ArrayList<Integer>.new for ( ) { List<Integer>.add }
if ( ) { NullPointerException.new } if ( ) { IllegalArgumentException.new }
return ( Object.toString Method.invoke return ( ) return ( ) Object.toString Method.invoke ReflectiveOperationException.printStackTrace return ( ) Properties.new )
if ( ) { PrintStream.println } if ( ) { ContentHandler.ignorableWhitespace }
if ( ) { if ( ) { System.arraycopy } else { while ( ) { System.arraycopy } } }
if ( ) { Integer.new Set<Integer>.add } else { Integer.new Set<Integer>.remove }
StringWriter.new StringWriter.getBuffer return ( Writer.toString )
if ( ) { return ( Collections.unmodifiableList ) }
if ( ) { Integer.valueOf }
return ( return ( Set<Object>.iterator ) return ( ) return ( Iterator<Object>.hasNext ) return ( Set<Object>.contains Set<>.contains ) return ( Set<Object>.containsAll Set<>.containsAll ) )
IOException.printStackTrace RuntimeException.new if ( ) { ArrayList<String>.add } ArrayList<String>.add
return ( String.valueOf )
System.getProperty
ArrayList<Object>.new
return ( Object.toString )
List<Object>.add
FilterBypass.insertString String.length
for ( ) { if ( Map<Object,Integer>.containsKey ) { Map<Object,Integer>.get } }
ArrayList<Object>.get
if ( ) { NullPointerException.new }
BigInteger.valueOf for ( ) { BigInteger.valueOf BigInteger.add }
if ( ) { IllegalStateException.new }
Map<String,String>.putAll if ( ) { for ( Map<String,String>.keySet ) { } }
if ( Map<String,Object>.containsKey ) { Set<Object>.add Map<String,Object>.put }
URI.toASCIIString HashSet<String>.new if ( Set<String>.isEmpty ) { } HashSet<Object>.new for ( Map<String,Object>.keySet ) { Map<String,Object>.get Set<Object>.add }
return ( String.new ) return ( String.new )
Switch ( ) { default : AssertionError.new }
for ( HashMap<String,Object>.values ) { }
return ( Map<String,Object>.get )
if ( ) { IllegalArgumentException.new }
if ( MouseEvent.isMetaDown ) { return ( ) }
File.new
return ( Arrays.asList )
ArrayList<Object>.new List<Object>.add List<Object>.add
if ( ) { LinkedHashMap.new List<Object>.stream if ( ) { List<Object>.forEach } ArrayList.new Map<String,Object>.forEach List<Object>.forEach }
Collections.singleton if ( Set.size ) { }
if ( ) { NullPointerException.new }
StringBuilder.new ArrayList<Object>.new for ( ) { if ( ) { if ( String.matches ) { } } if ( ) { StringBuilder.append } else { if ( ) { Collection<Object>.add } } } StringBuilder.toString
Connection.createStatement Statement.close Connection.close
Hashtable.get Hashtable.get if ( Integer.intValue ) { return ( ) } if ( Integer.intValue ) { PrintStream.println return ( ) } Integer.intValue
LinkedList.new List.add List.add RuntimeException.new RuntimeException.new if ( Exception.getMessage String.contains ) { }
SocketChannel.close
for ( ; ArrayList<Object>.size ; ) { ArrayList<Object>.get if ( ) { ArrayList<Object>.get } else { if ( ArrayList<Object>.size ) { ArrayList<Object>.get } else { ArrayList<Object>.get ArrayList<Object>.get } } if ( ) { ArrayList<Object>.get } }
if ( ) { if ( ) { return ( Boolean.booleanValue ) } return ( String.equals ) }
String.length while ( ) { ByteBuffer.capacity ByteBuffer.position if ( ) { if ( ) { String.substring return ( ) } } else { for ( ; ; ) { String.charAt ByteBuffer.putChar } } }
UUID.randomUUID UUID.toString
if ( ) { IllegalArgumentException.new } if ( ) { IllegalStateException.new }
if ( ) { Math.min } else { if ( ) { Math.max } }
return ( StringReader.new )
SortedSet.comparator Set<Object>.addAll if ( ) { for ( ) { for ( ) { Comparator.compare if ( ) { Set<Object>.remove } } } }
if ( String.length ) { return ( ) }
return ( Locale.getDisplayLanguage )
return ( Iterable<>.iterator )
for ( ; ; ) { Integer.parseInt Integer.toString DefaultBoundedRangeModel.new } JSlider.new JSlider.getBackground
if ( ) { ArrayList<Long>.new } if ( ) { ArrayList<String>.new } if ( ) { ArrayList<String>.new }
return ( String.valueOf )
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new }
return ( Map<Integer,Object>.values ArrayList.new )
return ( Constructor<Object>.newInstance )
return ( HashSet<String>.size )
if ( ) { IllegalArgumentException.new }
if ( ) { ArrayList<Object>.new for ( ) { if ( ) { List<Object>.add } } return ( ) }
Document.createTextNode
return ( Socket.getOutputStream )
Node.getAttributes NamedNodeMap.getNamedItem Node.getNodeValue Node.getChildNodes for ( ; NodeList.getLength ; ) { NodeList.item if ( NodeList.item Node.getNodeName String.equals ) { NodeList.item Node.getAttributes NamedNodeMap.getNamedItem Node.getNodeValue } }
ExecutorService.execute
List<Object>.size List<Object>.stream List<Object>.stream
MessageFormat.format StringBuilder.new MessageFormat.format
File.new if ( File.exists ) { return ( ) } return ( File.delete )
if ( String.startsWith ) { return ( String.substring ) }
if ( List<Object>.size List<Object>.size ) { return ( ) }
Exception.getCause Exception.getCause
return ( Integer.intValue )
for ( ) { List<String>.add }
Class<>.getClassLoader ClassLoader.getResourceAsStream
if ( ) { IllegalArgumentException.new }
if ( ) { NullPointerException.new } if ( ) { NullPointerException.new }
System.currentTimeMillis System.currentTimeMillis System.currentTimeMillis System.currentTimeMillis System.currentTimeMillis System.currentTimeMillis if ( ) { PrintStream.println PrintStream.println } if ( ) { PrintStream.println PrintStream.println PrintStream.println }
if ( ) { PrintStream.println }
return ( ArrayList.new )
Double.toString Properties.setProperty Boolean.toString Properties.setProperty
System.arraycopy
ReentrantReadWriteLock.writeLock Lock.lock if ( ) { IllegalArgumentException.new } Lock.unlock
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new }
if ( ) { String.concat }
if ( ) { Writer.write }
ObjectOutputStream.defaultWriteObject ObjectOutputStream.writeInt ObjectOutputStream.writeInt ObjectOutputStream.writeInt for ( ; ; ) { if ( ) { for ( ; ; ) { if ( ) { for ( ; ; ) { if ( ) { ObjectOutputStream.writeInt ObjectOutputStream.writeLong } } } } } } if ( ) { InternalError.new } ObjectOutputStream.writeInt
if ( Set<String>.equals ) { return ( ) } for ( Map<Object,Set<Object>>.keySet ) { for ( Map<Object,Set<Object>>.get ) { } } for ( Map<Object,Set<Object>>.keySet ) { for ( Map<Object,Set<Object>>.get ) { } }
if ( ) { if ( ) { NullPointerException.new } }
if ( ) { if ( String.startsWith ) { return ( ) } } if ( String.equals ) { }
HashMap<String,Object>.new for ( ; ; ) { Map<String,Object>.put }
ThreadLocal<Random>.get if ( ) { Random.nextLong Random.new ThreadLocal<Random>.set }
UnsupportedOperationException.new
if ( ) { File.new }
Map<String,Object>.get
DataOutputStream.writeShort
ExecutorService.shutdownNow
Dimension.getWidth Dimension.getWidth Dimension.getHeight Dimension.getHeight Dimension.getHeight Math.min Math.round Dimension.getHeight Dimension.getWidth Math.min Dimension.getHeight Dimension.getWidth Math.min
Hashtable.get if ( ) { return ( Hashtable.get ) }
Integer.valueOf if ( ConcurrentHashMap<Integer,Object>.get ) { } if ( ) { ConcurrentHashMap<Integer,Object>.get if ( ) { ConcurrentHashMap<String,Object>.remove ConcurrentHashMap<Integer,Object>.remove if ( ) { ClassNotFoundException.getMessage } } return ( ) }
LinkedList<Object>.new HashMap<Object,Object>.new
Math.max Math.max
Hashtable.clone
if ( ) { Integer.valueOf }
List.add List.size List.toArray
if ( ) { Double.doubleToRawLongBits Double.doubleToRawLongBits if ( ) { if ( ) { if ( ) { if ( ) { if ( Double.isInfinite ) { return ( ) } return ( ) } } } } }
if ( ) { for ( ) { if ( String.equals ) { } } }
if ( String.startsWith String.length ) { String.substring Attribute.new MBeanServer.setAttribute } else { if ( String.equals ) { if ( String.equals ) { if ( String.equals ) { MBeanServer.getMBeanInfo } else { MBeanServer.invoke } } } } if ( ) { if ( ) { Exception.new return ( ) } }
Objects.requireNonNull String.isEmpty if ( Optional<Object>.isPresent ) { return ( ) } Optional<Object>.get
Error.new
ArrayList.new
List<Object>.add
for ( ; ; ) { if ( ) { if ( String.equals ) { } } }
for ( ; ; ) { for ( ; ; ) { if ( ) { Math.abs } } }
while ( Enumeration<String>.hasMoreElements ) { Enumeration<String>.nextElement } if ( String.equalsIgnoreCase ) { } Map<String,Object>.put
return ( CompletableFuture<Object>.thenApply )
if ( ) { FileDialog.setPreferredSize } FileDialog.getSize FileDialog.setPreferredSize FileDialog.setVisible FileDialog.getSize FileDialog.getFiles
ArrayList.new ArrayList.new List.add List.add List.add List.add List.add List.add List.add List.add Document.getElementsByTagName NodeList.item Node.getChildNodes Document.createDocumentFragment Document.createElement Document.createElement DocumentFragment.appendChild DocumentFragment.appendChild Node.appendChild for ( ; NodeList.getLength ; ) { NodeList.item Node.getNodeType if ( ) { Node.getNodeName List.add } }
return ( Locale.getDefault String.toLowerCase String.startsWith )
Statement.executeQuery ResultSet.next ResultSet.getString
HashMap<Integer,Integer>.new for ( ) { List<String>.indexOf List<String>.indexOf Map<Integer,Integer>.put }
return ( String.new )
Runnable.new
if ( ) { IndexOutOfBoundsException.new }
if ( ) { StringBuilder.new StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.toString }
if ( ) { Thread.currentThread Thread.interrupt Thread.currentThread Thread.interrupt }
if ( ) { FileNotFoundException.new } if ( String.contains ) { }
StringSelection.new Toolkit.getDefaultToolkit Toolkit.getSystemClipboard Clipboard.setContents JButton.new
Exception.getMessage if ( ) { Exception.getMessage JTextField.setText } Exception.printStackTrace
Arrays.fill
if ( List<Object>.isEmpty ) { for ( ; List<Object>.size ; ) { List<Object>.get } }
List<Object>.iterator while ( Iterator<Object>.hasNext ) { Iterator<Object>.next if ( String.equals ) { return ( ) } }
String.replaceAll String.replaceAll String.replaceAll String.replaceAll String.replaceAll String.split Arrays.asList LinkedHashSet<String>.new Set<String>.toArray StringBuilder.new for ( ) { if ( String.trim ) { continue } String.trim StringBuilder.append StringBuilder.append } if ( StringBuilder.length ) { StringBuilder.length StringBuilder.deleteCharAt } return ( StringBuilder.toString )
Vector.iterator while ( Iterator.hasNext ) { Iterator.next ComponentUI.uninstallUI }
if ( ) { IllegalArgumentException.new }
String[].clone
ArrayList<URI>.new List<URI>.addAll if ( ) { Map<String,Set<URI>>.values Collection.iterator Iterator.next Object.size if ( ) { Map<String,Set<URI>>.keySet Set.iterator Iterator.next } HashSet<URI>.new } else { for ( Map<String,Set<URI>>.entrySet ) { Entry<String,Set<URI>>.getValue Set<URI>.size if ( ) { Entry<String,Set<URI>>.getValue Set<URI>.size Entry<String,Set<URI>>.getKey } Entry<String,Set<URI>>.getValue Entry<String,Set<URI>>.getKey } } for ( ) { Exception.getMessage }
if ( ) { Map<Object,CharSequence>.put if ( CharSequence.toString CharSequence.toString String.equals ) { Map<Object,CharSequence>.remove } } else { Map<Object,CharSequence>.remove Map<Object,CharSequence>.put }
StringBuffer.new for ( ) { StringBuffer.append } return ( StringBuffer.toString )
if ( ) { NullPointerException.new }
if ( ) { if ( ) { String.lastIndexOf String.substring } } while ( ) { String.lastIndexOf String.substring } if ( ) { if ( ) { if ( String.length ) { String.format } } else { String.format } } return ( String.intern )
Connection.createStatement for ( ; ; ) { PrintStream.println Statement.execute Statement.execute Statement.execute Statement.execute Statement.execute if ( SQLException.getSQLState String.equals ) { } Statement.execute Statement.execute } for ( ; ; ) { PrintStream.println Statement.execute Statement.execute Statement.execute Statement.execute Statement.execute if ( SQLException.getSQLState String.equals ) { } Statement.execute Statement.execute }
return ( List<Object>.size List<Object>.size List<Object>.get List<Object>.get List<Object>.size List<Object>.get )
return ( Arrays.hashCode )
String[].clone
ToolTipManager.sharedInstance if ( ) { ToolTipManager.unregisterComponent } else { if ( ) { ToolTipManager.registerComponent } }
if ( ) { return ( File.getUsableSpace ) } File.getPath
Document.getElementsByTagName NodeList.item Document.createAttribute Node.getAttributes NamedNodeMap.setNamedItem NamedNodeMap.getNamedItem Attr.getNodeName
System.arraycopy Cipher.getInstance Cipher.init Cipher.doFinal Cipher.init Cipher.doFinal Cipher.init Cipher.doFinal System.arraycopy System.arraycopy System.arraycopy Exception.getMessage
Class.getName if ( ) { Class.forName Class.newInstance RuntimeException.new }
SSLSocket.close
for ( ; ; Node.getNextSibling ) { if ( Node.getNodeType ) { return ( ) } }
ArrayList<Object>.new for ( ) { if ( ) { List<Object>.add } }
String.split for ( ) { String.length Math.max for ( String.toCharArray ) { if ( ) { if ( ) { IllegalArgumentException.new } } } } for ( ; ; ) { for ( ; String.length ; ) { String.charAt } }
for ( ; ; ) { if ( String.equals ) { return ( ) } }
return ( Long.parseLong )
if ( ) { if ( ) { if ( String.equals ) { if ( String.equals ) { if ( String.equals ) { } } } } }
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } PushbackReader.new Reader.read
if ( Class<>.isAssignableFrom ) { IllegalArgumentException.new }
HashSet.new Set<Object>.removeAll if ( Set<Object>.isEmpty ) { return ( Optional.empty ) } return ( Optional.of )
if ( String.isEmpty ) { return ( ) } HashSet<Object>.new HashSet<Object>.new Set<Object>.addAll Set<Object>.add for ( ) { if ( ) { Set<Object>.add } }
return ( Integer.intValue )
return ( List<Integer>.size )
if ( ) { Math.max }
return ( Collections.emptySet )
if ( ArrayList<Object>.size ) { return ( ) } ArrayList.new ArrayList<Object>.add ArrayList<Object>.add for ( ) { if ( ) { ArrayList<Object>.add } else { ArrayList<Object>.add } }
Switch ( ) { default : AssertionError.new }
List<Object>.size List<Object>.size List<Object>.size for ( ; ; ) { List<Object>.get List<Object>.get for ( ; ; ) { List<Object>.get for ( ; ; ) { List<Object>.get List<Object>.get List<Object>.get } } }
if ( ) { Exception.new }
if ( System.currentTimeMillis ) { if ( ) { Timestamp.getTime if ( System.currentTimeMillis ) { return ( ) } } System.currentTimeMillis }
HashSet<String>.new Set<String>.add
List<Object>.remove
Arrays.sort
if ( ) { ArrayList<Object>.new for ( ; List<Object>.size ; ) { List<Object>.get List<Object>.add } } if ( ) { ArrayList<Object>.new for ( ; List<Object>.size ; ) { List<Object>.get List<Object>.add } }
ArrayList.new
CharBuffer.wrap
if ( ) { IllegalArgumentException.new }
if ( Boolean.booleanValue ) { }
ComponentOrientation.getOrientation
if ( ) { return ( Collections.emptyMap ) } else { if ( ) { return ( Collections.singletonMap ) } else { HashMap<String,String>.new TreeMap<String,String>.new for ( ; ; ) { Map<String,String>.put } return ( Collections.unmodifiableMap ) } }
return ( String.new )
String.format String.format String.format String.format String.format
Properties.new if ( ) { Properties.setProperty } if ( ) { Properties.setProperty } if ( ) { Properties.setProperty } if ( ) { Properties.setProperty } File.toPath Path.resolve Path.toAbsolutePath Path.toString Properties.setProperty File.getPath Map<URI,Object>.put
Hashtable.clone if ( Hashtable.containsKey ) { Map.get if ( ) { Hashtable.put } } if ( Hashtable.containsKey ) { Date.new Hashtable.put } if ( Hashtable.containsKey ) { Map.get Hashtable.put }
MouseEvent.getPoint MouseEvent.consume
if ( ) { if ( CharBuffer.position ) { CharBuffer.compact CharBuffer.flip } } CharBuffer.limit CharBuffer.array Reader.read if ( ) { CharBuffer.limit }
if ( ) { Integer.valueOf }
if ( ) { TransformerException.new ErrorListener.fatalError }
HashMap<String,String>.new Map<String,String>.put
if ( ) { String.valueOf IllegalArgumentException.new }
Math.sin Math.sqrt Math.cosFromSin
if ( ) { for ( ; ; ) { if ( ) { Component.getName } if ( ) { JComponent.putClientProperty JComponent.putClientProperty JComponent.putClientProperty JComponent.putClientProperty JComponent.putClientProperty } } }
ResourceBundle.getString
return ( Character.toLowerCase )
if ( ) { LinkedList.new } List<Object>.add
Connection.close
Float.floatToRawIntBits
if ( String.equals ) { return ( ) } String.indexOf if ( ) { if ( String.length ) { if ( ) { String.charAt String.length String.substring } } } if ( ) { String.length String.split for ( ) { SourceVersion.isIdentifier } }
Arrays.sort System.arraycopy PrintStream.println ByteArrayInputStream.new ObjectInputStream.new ObjectInputStream.readObject ObjectInputStream.close ByteArrayInputStream.close if ( String.equalsIgnoreCase ) { return ( ) } Exception.printStackTrace
if ( ) { if ( ) { Integer.new Hashtable.put StringBuffer.setLength StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.toString Hashtable.put } }
Long.parseLong if ( ) { NumberFormatException.new }
if ( List<Object>.nonEmpty ) { if ( List<Object>.nonEmpty ) { return ( ) } }
String.compareTo
if ( ) { IllegalArgumentException.new } else { return ( ) IllegalArgumentException.new }
List<Object>.add
return ( ArrayList<Object>.size )
while ( ) { if ( String.equals ) { } }
for ( Map<String,Object>.keySet ) { Map<String,String>.get Map<String,Object>.get if ( ) { Document.createElement Element.setAttribute String.toString Element.setAttribute } if ( ) { Element.appendChild } }
StringBuilder.new Arrays.sort for ( ) { if ( StringBuilder.length ) { StringBuilder.append } String.endsWith String.length String.substring StringBuilder.append } return ( StringBuilder.toString )
for ( ArrayList<Object>.size ; ; ) { ArrayList<Object>.get if ( Objects.equals ) { if ( Objects.equals ) { break } } }
if ( ) { IndexOutOfBoundsException.new } for ( ; ; ) { if ( InputStream.available ) { return ( ) } }
SwingUtilities.invokeLater
Stack<Object>.push
if ( ) { IndexOutOfBoundsException.new }
if ( ) { Integer.valueOf }
return ( Map<Object,Object>.size )
if ( ) { Integer.valueOf }
BufferedWriter.write
StringBuilder.new StringBuilder.append StringBuilder.toString return ( String.valueOf Long.parseLong )
Map<String,String>.put
if ( ) { IllegalStateException.new } if ( ) { IllegalArgumentException.new }
return ( String.valueOf )
while ( ) { String.length String.substring return ( ) }
ArrayList.new List<String>.size List<String>.get Long.valueOf List<Long>.add Callable<Void>.new List<Long>.get Long.valueOf Class.getName
if ( String.equals ) { }
File.new File.mkdirs for ( ; ; ) { Integer.new } for ( ; ; ) { Integer.new } for ( ; ; ) { String.valueOf String.valueOf String.getBytes } for ( ; ; ) { String.valueOf String.valueOf String.new }
if ( String.equals ) { }
return ( String.new )
if ( Color.equals ) { ActionEvent.getSource Timer.stop } JTable.updateUI ActionListener.new Timer.new Timer.start
if ( ) { BeanContext.addBeanContextMembershipListener BeanContextChildSupport.setBeanContext BeanContext.iterator }
NoSuchMethodError.new
if ( Map.containsKey ) { Map.remove }
if ( Double.isNaN ) { return ( ) }
StringBuffer.new for ( ; ; ) { if ( ) { StringBuffer.append } if ( ) { StringBuffer.append if ( ) { StringBuffer.append } } } StringBuffer.append StringBuffer.append return ( StringBuffer.toString )
Vector.iterator if ( Iterator.hasNext ) { Iterator.next ListUI.getCellBounds } while ( Iterator.hasNext ) { Iterator.next ListUI.getCellBounds }
PrintWriter.new
return ( Exception.toString )
CharacterCodingException.getMessage SQLException.initCause UnsupportedCharsetException.getCharsetName SQLException.initCause Exception.getMessage SQLException.initCause
return ( Hashtable<Object,Object>Object.new )
if ( ) { if ( ) { return ( Boolean.booleanValue ) } return ( String.equals ) }
if ( ) { for ( ) { Pattern.matcher if ( Matcher.matches ) { Matcher.group Matcher.group Map<String,String>.put } } }
for ( ) { if ( ) { if ( ) { PrintStream.println } } }
if ( ) { if ( ) { Writer.write } Writer.write return ( ) }
if ( ) { Calendar.getInstance Calendar.setTime if ( ) { Calendar.add } return ( Calendar.getTime ) }
if ( ) { ArrayList.new HashSet.new List.size for ( ; ; ) { List.get } }
StringBuilder.new StringBuilder.append StringBuilder.append StringBuilder.append
HashMap<Object,Integer>.new
return ( MethodHandles.lookup Lookup.unreflectVarHandle ) RuntimeException.new
return ( Integer.intValue )
while ( ) { List<List<Object>>.get for ( List<Object>.size ; ; ) { List<Object>.get } }
return ( return ( ) if ( ) { NoSuchElementException.new } return ( ) if ( ) { IllegalStateException.new } Iterator<Object>.new )
if ( ) { Integer.valueOf }
List<String>.remove
StringBuilder.new StringBuilder.append StringBuilder.append return ( StringBuilder.toString )
for ( ) { if ( ) { Process.exitValue Runtime.getRuntime Process.destroy Runnable.new Thread.new Runtime.addShutdownHook } } Collection<Process>.clear
PrintWriter.print
if ( ) { String.format } String.format String.getBytes
return ( Map<Double,String>.get )
HashSet<String>.new Long.valueOf HashSet<String>.new
if ( ) { IllegalArgumentException.new }
return ( Integer.intValue )
NumberFormat.clone NumberFormat.clone
String.trim String.indexOf if ( ) { String.substring }
return ( Set<Object>.contains )
for ( ; ; ) { if ( ) { HashMap.new for ( ) { if ( ) { Collection<Object>.size } Map<Object,Object>.put } for ( Map<Object,Object>.values ) { } return ( ) } }
Connection.createStatement if ( Connection.getAutoCommit ) { Connection.commit }
ArrayList<Object>.indexOf while ( ArrayList<Object>.contains ) { ArrayList<Object>.indexOf ArrayList<Object>.remove } if ( ) { ArrayList<Object>.add } else { ArrayList<Object>.add }
Map<String,Object>.putAll
if ( ) { Math.min Math.min if ( ) { ArrayList<Object>.new for ( ; ArrayList<Object>.size ; ) { ArrayList<Object>.get } return ( ) } }
Arrays.sort Arrays.sort for ( ; ; ) { Float.new } Arrays.asList Arrays.equals Arrays.sort for ( ; ; ) { Float.new } Arrays.asList Arrays.equals
return ( String.equals )
for ( ; ; ) { if ( ) { LogRecord.setResourceBundle LogRecord.setResourceBundleName return ( ) } }
if ( ) { IllegalArgumentException.new }
String.getBytes String.getBytes String.getBytes String.getBytes
AtomicInteger.set return ( AtomicBoolean.get )
TreeSet.new TreeSet.new
if ( ) { return ( Collections.unmodifiableList ) }
StringBuilder.new StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append Integer.toString StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.toString String.getBytes RuntimeException.new
if ( ) { IllegalArgumentException.new }
OutputStream.write_long for ( ; ; ) { NameValuePairHelper.write }
ArrayTypeCode.setLength
File.new if ( File.isAbsolute ) { return ( File.new ) }
ArrayList<Object>.size for ( ; ; ) { ArrayList<Object>.get ArrayList<Object>.size for ( ; ; ) { ArrayList<Object>.get } }
if ( ) { IllegalArgumentException.new } List<ListenerData>.add
return ( List<Object>.get )
return ( EventListenerList.getListeners )
if ( ) { ArrayIndexOutOfBoundsException.new }
if ( ) { IndexOutOfBoundsException.new } if ( ) { IndexOutOfBoundsException.new } if ( Double.isNaN ) { IllegalArgumentException.new }
if ( HashMap<String,Stack<Object>>.containsKey ) { if ( HashMap<String,Stack<Object>>.get ) { return ( HashMap<String,Stack<Object>>.get ) } }
return ( ThreadLocal<Object>.get )
Properties.getProperty Properties.getProperty if ( ) { Class.getName }
if ( ) { if ( ) { return ( ) PrintStream.println PrintStream.println PrintStream.println PrintStream.println return ( ) } }
if ( ) { Class.forName Class.newInstance if ( ) { Error.new } }
ObjectInputStream.defaultReadObject ObjectInputStream.readInt for ( ; ; ) { ObjectInputStream.readObject }
Math.min
JTextField.setText
if ( ) { Queue<Object>.remove } Queue<Object>.add
HashSet.new while ( ) { Collection<Object>.clear for ( ) { Collection<Object>.addAll } if ( Collection<Object>.isEmpty ) { break } Collection<Object>.clear Collection<Object>.addAll }
for ( ; ; ) { AtomicInteger.get if ( AtomicInteger.compareAndSet ) { return ( ) } }
Error.new
if ( ) { ArrayList<JAXBElement<Object>>.new }
URL.getFile URL.getRef String.length
if ( ) { if ( ) { NullPointerException.new } }
AtomicBoolean.set while ( AtomicBoolean.get ) { Thread.sleep return ( ) if ( Thread.currentThread Thread.isInterrupted ) { return ( ) } }
JSplitPane.getDividerSize
UnsupportedOperationException.new
if ( ) { Integer.valueOf }
for ( ; ; ) { Character.forDigit } return ( String.new )
ArrayList.new for ( ) { List<String>.add }
JComponent.getInsets JProgressBar.getOrientation
Locale.getDefault
Arrays.sort
if ( ) { NullPointerException.new } ReentrantLock.lockInterruptibly while ( AtomicInteger.get ) { Condition.await } AtomicInteger.getAndIncrement if ( ) { Condition.signal } ReentrantLock.unlock
Long.valueOf
return ( Optional.ofNullable )
BigDecimal.valueOf BigDecimal.movePointLeft do { BigDecimal.subtract BigDecimal.divide BigDecimal.subtract Thread.yield } while ( BigDecimal.compareTo ) ; return ( BigDecimal.setScale )
Hashtable.values Collection.iterator while ( Iterator.hasNext ) { Iterator.next Connection.close } Hashtable.clear
if ( ) { NullPointerException.new } if ( ) { NullPointerException.new } Object.getClass Class.getResource if ( ) { PrintStream.println return ( BufferedImage.new ) } return ( Toolkit.getDefaultToolkit Toolkit.createImage )
JInternalFrame.getInsets if ( JInternalFrame.isIcon ) { JPopupMenu.show } else { JPopupMenu.getPreferredSize JPopupMenu.show }
String.length String.length if ( ) { String.substring } else { if ( ) { String.substring } } Math.min if ( String.equals ) { return ( ) } while ( ) { String.substring String.indexOf if ( String.substring String.substring String.equals ) { } }
List<Object>.size return ( List<Object>.size List<Object>.get )
if ( Map<String,Object>.containsKey ) { return ( Map<String,Object>.get ) } Map<String,Object[]>.get if ( ) { if ( ) { IllegalArgumentException.new } return ( ) }
ArrayList<List<String>>.new List<List<String>>.add List<String>.add
if ( ) { IndexOutOfBoundsException.new } if ( ) { IndexOutOfBoundsException.new }
return ( String.new )
if ( String.equals ) { return ( ) }
if ( ) { RuntimeException.new }
if ( ) { EnvironmentSet.new }
if ( Set<Integer>.size ) { PrintStream.println } HashSet<Integer>.new HashSet<Integer>.new for ( ) { if ( ) { Set<Integer>.add } else { Set<Integer>.add } } for ( ) { Double.new Map<Integer,Number>.put } Collection<Integer>.iterator Iterator.next Math.random Float.new Map<Number,Number>.put Math.random Float.new Map<Number,Number>.put
return ( Locale.getDefault )
Set<Object>.iterator Iterator<Object>.next Iterator<Object>.remove
ByteArrayInputStream.new Exception.printStackTrace
HashMap<String,Object>.clear
return ( Comparable.compareTo )
for ( Map<String,Boolean>.entrySet ) { if ( Entry<String,Boolean>.getValue ) { continue } return ( Entry<String,Boolean>.getKey ) }
JButton.new JButton.setActionCommand JButton.addActionListener JLabel.new URL.toString JTextField.new Box.createHorizontalBox Box.add Box.add Box.createVerticalBox Box.add Box.add
return ( String.format )
Toolkit.getDefaultToolkit Toolkit.getSystemClipboard Exception.toString PrintStream.printf Clipboard.new
Date.new ArrayList<Object>.new for ( ; ; ) { List<Object>.add } HashMap<String,Object>.new for ( ; ; ) { Map<String,Object>.put } Exception.printStackTrace
Switch ( ) { case : return ( Boolean.valueOf ) default : IllegalStateException.new }
for ( ; ; ) { if ( String.equalsIgnoreCase ) { } }
Vector<String>.iterator while ( Iterator<String>.hasNext ) { if ( Iterator<String>.next String.toLowerCase String.toLowerCase String.startsWith ) { Iterator<String>.remove } } if ( Vector<String>.size ) { JList<String>.setListData JList<String>.setSelectedIndex JList<String>.ensureIndexIsVisible JDialog.setVisible } else { JDialog.setVisible }
ArrayList<Object>.new Stack<Object>.new
return ( return ( ) Callable<Double>.new )
if ( ) { SecurityException.new } Element.setAttribute
if ( ) { if ( ) { Logger.warning } }
if ( String.isEmpty ) { }
if ( Object.getClass Class.getName Object.getClass Class.getName String.compareTo ) { System.identityHashCode System.identityHashCode }
if ( ) { X509Certificate.getCriticalExtensionOIDs if ( Set.isEmpty ) { for ( Set.iterator ; Iterator.hasNext ; ) { if ( Iterator.next String.equals ) { break } } if ( ) { X509Certificate.getKeyUsage if ( ) { InvalidKeyException.new } } } } Certificate.getPublicKey
for ( ; ; ) { Condition.signalAll }
File.listFiles Arrays.sort for ( ) { if ( File.isDirectory ) { } } for ( ) { if ( File.isDirectory ) { } }
if ( ) { PrintStream.println }
HashSet.new Collection.iterator while ( Iterator.hasNext ) { Iterator.next Collection.iterator while ( Iterator.hasNext ) { Iterator.next if ( Collection.containsAll ) { Set.addAll } } }
if ( ) { Integer.valueOf }
if ( ) { if ( ) { IllegalArgumentException.new } }
Map<String,Integer>.get
if ( ) { Integer.valueOf }
return ( AWTEventMulticaster.getListeners )
if ( SynthContext.getComponent ) { return ( ) } SynthContext.getComponent
HashSet.new Set<Object>.addAll if ( ) { ArrayList.new for ( ) { Set<Object>.addAll } } else { if ( ) { ArrayList.new for ( ) { Set<Object>.addAll } } }
return ( Math.sqrt )
Calendar.getInstance Date.new Calendar.setTime Calendar.set Calendar.getTime Date.new Calendar.setTime Calendar.set Calendar.getTime
Collection.add Collection.add
Map<String,Boolean>.get if ( ) { return ( Boolean.booleanValue ) } String.lastIndexOf if ( ) { Map<String,Boolean>.get if ( ) { return ( Boolean.booleanValue ) } } while ( ) { String.substring Map<String,Boolean>.get if ( ) { return ( Boolean.booleanValue ) } String.lastIndexOf }
for ( ; ; ) { if ( String.charAt String.indexOf ) { return ( ) } }
UnsupportedOperationException.new
return ( UUID.toString )
Vector<UndoableEditListener>.removeElement
BigDecimal.new
return ( Math.ceil Math.floor )
Switch ( ) { default : IllegalArgumentException.new }
Properties.new if ( String.indexOf ) { URL.new URL.openStream } else { FileInputStream.new } Properties.load InputStream.close
RuntimeException.new
if ( Double.isNaN ) { return ( ) }
Base64.getEncoder PrivateKey.getEncoded Encoder.encode String.new PrintWriter.new PrintWriter.println
FileInputStream.new
if ( ) { IllegalStateException.new }
for ( HashMap<Object,Object>.values ) { }
ArrayList<Object>.add
Long.toString
Map<Object,Object>.put BitSet.set
if ( ) { ArrayList<Object>.new }
InputStream.read while ( ) { MessageDigest.update InputStream.read } return ( MessageDigest.digest )
return ( Map<String,Object>.containsKey )
if ( ) { List<List<Object>>.add }
ByteBuffer.clear ByteBuffer.flip
List<Object>.remove
StringBuilder.append
Switch ( ) { default : AssertionError.new }
BorderLayout.new if ( ) { if ( KeyEvent.getKeyCode ) { ActionEvent.new for ( ) { ActionListener.actionPerformed } return ( ) } return ( ) return ( ) } else { Graphics.setColor Graphics.fillRect JLabel.new JLabel.setBorder }
if ( FloatBuffer.capacity ) { FloatBuffer.clear } for ( ) { FloatBuffer.slice FloatBuffer.position FloatBuffer.limit FloatBuffer.position }
for ( ; ; ) { Long.numberOfTrailingZeros }
Connection.createStatement Statement.executeUpdate Statement.executeUpdate Connection.setTransactionIsolation Connection.setAutoCommit Connection.rollback System.nanoTime Connection.commit System.nanoTime
Map<QName,Object>.get return ( Object.toString )
if ( ) { CloneNotSupportedException.new }
for ( ) { if ( List<Object>.contains ) { List<Object>.add if ( HashMap<Object,Object>.containsKey ) { HashMap<Object,Object>.put } HashMap<Object,ArrayList<Object>>.get if ( List<Object>.contains ) { List<Object>.remove } } }
Class.getName
if ( ) { Math.max if ( ) { if ( ) { Integer.valueOf Integer.valueOf } } }
return ( Optional.ofNullable )
if ( ) { ClassCastException.new } if ( Class<>.equals ) { String.toLowerCase if ( String.equals String.equals ) { return ( ) } if ( String.equals String.equals ) { return ( ) } ClassCastException.new }
return ( Character.charValue )
if ( ) { IllegalArgumentException.new } List<Object>.add
String.valueOf String.length PrintStream.print
while ( BufferedReader.readLine ) { if ( ) { String.trim if ( String.isEmpty ) { continue } } if ( ) { if ( String.startsWith ) { continue } } break }
for ( Map<UUID,Object>.values ) { }
ArrayList<Object>.new for ( ) { if ( ) { ArrayList<Object>.add } }
Map<Integer,Map<Object,Object<Object>>>.get if ( ) { HashMap<Object,Object<Object>>.new Map<Integer,Map<Object,Object<Object>>>.put } Map<Object,Object<Object>>.get if ( ) { Map<Object,Object<Object>>.put }
StringBuilder.new for ( Map<String,String>.entrySet ) { Entry<String,String>.getKey URLEncoder.encode StringBuilder.append StringBuilder.append Entry<String,String>.getValue URLEncoder.encode StringBuilder.append StringBuilder.append } return ( StringBuilder.toString String.getBytes ) RuntimeException.new
if ( Class<Object>.isAssignableFrom ) { return ( ) }
return ( Number.doubleValue Double.parseDouble )
return ( Number.doubleValue Double.parseDouble )
Calendar.set Calendar.set Calendar.set Calendar.get if ( ) { Calendar.getFirstDayOfWeek } Calendar.getInstance
for ( ; String.length ; ) { if ( String.charAt ) { } }
if ( ) { String.format }
System.arraycopy
ArrayList<Object>.new List<Object>.add if ( ) { List<Object>.add }
ArrayList<Object>.size for ( ; ; ) { ArrayList<Object>.get if ( ) { if ( Collection<String>.contains ) { continue } } else { if ( Collection<String>.contains ) { continue } } if ( ) { ArrayList<Object>.remove ArrayList<Object>.size } }
LinkedList.new while ( Iterator<Object>.hasNext ) { Iterator<Object>.next List<String>.add } List<String>.size List<String>.toArray
if ( ) { Arrays.asList HashSet<Object>.new }
Map<Object,Collection<Object>>.remove Collection<Object>.addAll Collection<Object>.size Collection<Object>.clear
return ( Hashtable.get )
BufferedImage.getType if ( ) { BufferedImage.getRaster WritableRaster.setDataElements } else { BufferedImage.setRGB }
Arrays.sort
while ( ) { Math.floor } while ( ) { Math.floor } if ( Math.abs Math.abs ) { } if ( ) { Math.floor if ( Math.abs Math.abs ) { } } Math.abs
if ( ) { Collection<Object>.size for ( Collection<Object>.iterator ; Iterator.hasNext ; ) { Iterator.next Collection<Object>.add } } return ( Collections.unmodifiableCollection )
HashMap.new Map<String,Object>.put Map<String,Object>.put
Element.getElementsByTagName if ( NodeList.getLength ) { NodeList.item Node.getChildNodes NodeList.item Node.getNodeValue }
JInternalFrame.addPropertyChangeListener
AssertionError.new
if ( ) { Collection<String>.add }
if ( Set.size ) { }
return ( List<Object>.size )
return ( LinkedBlockingQueue<Object>.take )
List<Long>.size for ( ; List<Long>.size ; ) { if ( List<Long>.size ) { List<Long>.get List<Long>.get } else { List<Long>.get List<Long>.get } }
KeyFactory.getInstance BigInteger.new ECPrivateKeySpec.new return ( KeyFactory.generatePrivate )
return ( Set<Object>.toString )
if ( ) { ResultSet.getMetaData } ResultSetMetaData.getColumnCount ParameterMetaData.getParameterCount
if ( Map.containsKey ) { Map.get } Map.put PrintStream.new
return ( Collections.emptyMap )
ThreadLocal<String>.get ThreadLocal<String>.set
if ( ) { IllegalStateException.new }
if ( String.startsWith ) { return ( ) }
File.new if ( File.exists ) { File.new File.getCanonicalPath File.new if ( File.exists String.equals ) { File.length File.length } }
return ( Integer.valueOf )
if ( ) { Runnable.new }
Long.valueOf if ( ) { HashSet.new } for ( ; ; ) { if ( ) { if ( Set.contains ) { if ( ) { Set.add } } } } if ( ) { if ( ) { if ( Set.size ) { } } }
return ( Float.intBitsToFloat )
if ( ) { if ( ) { IllegalArgumentException.new } } PrintStream.println MarshalledObject.new Exception.printStackTrace RuntimeException.new
FileOutputStream.new
for ( LinkedHashMap<String,Object>.values ) { }
Logger.severe
StringBuffer.new for ( ; ; ) { if ( ) { StringBuffer.append } } return ( StringBuffer.toString )
Files.newDirectoryStream
CharSequence.length CharSequence.charAt
BigInteger.new BigInteger.new BigInteger.add BigInteger.toByteArray BigInteger.signum
StringBuffer.new StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append return ( StringBuffer.toString )
return ( Float.intBitsToFloat )
for ( ) { if ( ) { if ( String.startsWith ) { } if ( String.startsWith ) { } List<Object>.add } }
if ( ) { return ( Collections.emptyList ) }
if ( ) { RuntimeException.new } JScrollPane.getHorizontalScrollBar JScrollBar.setValue JScrollPane.getVerticalScrollBar JScrollBar.setValue
if ( ExecutorService.isShutdown ) { } ExecutorService.execute
Class.getName Locale.getLanguage Locale.getCountry Locale.getVariant if ( ) { Integer.toString }
StringBuilder.new if ( ) { StringBuilder.append } if ( ) { String.format } while ( Iterator<Integer>.hasNext ) { Iterator<Integer>.next if ( Character.isSurrogate ) { StringBuilder.append continue } if ( ) { StringBuilder.appendCodePoint StringBuilder.appendCodePoint StringBuilder.appendCodePoint StringBuilder.appendCodePoint } else { StringBuilder.appendCodePoint StringBuilder.appendCodePoint StringBuilder.appendCodePoint StringBuilder.appendCodePoint } } return ( StringBuilder.toString )
if ( String.length ) { return ( ) } File.new if ( File.length File.exists File.isFile ) { return ( ) } StringBuilder.new StringBuilder.append StringBuilder.append StringBuilder.append String.replace StringBuilder.append StringBuilder.toString StringBuilder.new StringBuilder.append StringBuilder.append
Writer.write Writer.write if ( ) { Writer.write } if ( Set<Object>.contains ) { List<Object>.add Set<Object>.add } if ( ) { Writer.write for ( Collection<Object>.iterator ; Iterator<Object>.hasNext ; ) { Iterator<Object>.next if ( Iterator<Object>.hasNext ) { Writer.write } } Writer.write } Writer.write
return ( ArrayList<Object>.new )
while ( ) { String.charAt String.charAt }
return ( Integer.intValue )
Class.forName Class<>.getConstructor
Map<String,Object>.get Map<String,Object>.get Map<String,Object>.get HashMap<String,Object>.new Map<String,Object>.put Map<String,Object>.remove for ( Map<String,Object>.keySet ) { Map<String,Object>.get }
if ( ArrayList<Object>.size ) { ArrayList<Object>.get if ( ) { Class.getSimpleName if ( ) { if ( LinkedList<Object>.isEmpty ) { } } } }
RandomAccessFile.write
String.equals
Properties.new if ( ) { Properties.load } else { Properties.getProperty Properties.getProperty Properties.getProperty Properties.getProperty Properties.getProperty Properties.getProperty Properties.getProperty Properties.getProperty Properties.getProperty Properties.getProperty Properties.getProperty Properties.getProperty Properties.getProperty if ( String.startsWith ) { String.startsWith } Properties.getProperty Properties.getProperty }
if ( Map<String,Object>.containsKey ) { Map<String,Object>.get if ( ) { String.format return ( ) } }
Math.pow Math.pow Math.ceil
Float.valueOf Map<String,Object>.put
if ( Object.getClass Class.isArray ) { Object.getClass Class.getComponentType Array.set Object.getClass Class.getName } else { if ( ) { List<Object>.set } else { if ( ) { Map<Integer,Object>.put } else { Object.getClass Class.getName } } }
if ( String.length String.charAt ) { } if ( String.startsWith String.startsWith ) { if ( String.startsWith ) { String.substring } }
UnsupportedOperationException.new
LinkedList<Object>.addAll
if ( ) { Writer.write if ( ) { Writer.write } if ( ) { if ( ) { Writer.write } else { if ( ) { Writer.write } else { Arrays.asList Writer.write } } } Writer.write } Writer.write if ( ) { Writer.write }
if ( List<Set<Object>>.size ) { return ( List<Set<Object>>.get ) }
Vector.new
String[].clone
if ( ) { Object.toString }
Pattern.matcher if ( Matcher.find ) { Matcher.group return ( ) }
for ( ; ; ) { Map<Object,Object>.get Map<Object,Object>.put }
StringBuffer.new String.length Math.max StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append
HashSet.new if ( ) { Set.add } else { Set.add Set.add }
if ( ) { List<Object>.add }
Integer.valueOf for ( ) { Integer.valueOf }
TransformerFactory.newInstance return ( TransformerFactory.newTransformer )
return ( List<Object>.get )
AudioClip.play
Executor.new
Random.new for ( ; ; ) { Random.nextLong }
String.format
if ( Iterator<Object>.hasNext ) { Iterator<Object>.next if ( Iterator<Object>.hasNext ) { RuntimeException.new } return ( ) } else { RuntimeException.new }
Switch ( ) { case : RuntimeException.new case : if ( String.charAt ) { } break case : if ( String.charAt ) { } break }
ChangeEvent.new for ( ) { ChangeListener.stateChanged }
if ( ) { List<Object>.remove }
LinkedHashSet<Object>.new for ( ) { if ( ) { LinkedHashSet<Object>.add LinkedHashSet<Object>.addAll } else { LinkedHashSet<Object>.add } } return ( LinkedHashSet<Object>.toArray )
Stack<Object>.peek
ArrayList.new for ( ) { if ( HashMap<File,Object>.containsKey ) { HashMap<File,Object>.get if ( File.lastModified ) { HashMap<File,Object>.get File.lastModified ArrayList<File>.add } } }
List<Object>.add
String.indexOf String.indexOf if ( String.isEmpty ) { return ( ) } String.substring Integer.parseInt String.substring Integer.parseInt String.substring Integer.parseInt List<Object>.add
Objects.requireNonNull if ( ) { return ( Double.valueOf Optional.of ) } return ( Optional.empty )
JLabel.setText
Iterator<>.hasNext Iterator<>.next while ( Iterator<>.hasNext ) { Iterator<>.next }
String.trim
if ( Method.getModifiers ) { IllegalArgumentException.new }
if ( ) { UnsupportedOperationException.new } if ( ) { Math.min Math.min }
InetAddress.getLocalHost InetAddress.getHostAddress InetAddress.getByName InetAddress.getAddress InetAddress.getLoopbackAddress InetAddress.getAddress ByteBuffer.wrap ByteBuffer.getInt
BigDecimal.new BigDecimal.new
Error.new
PrintWriter.println
if ( ) { if ( ) { Integer.parseInt } }
if ( ) { IllegalArgumentException.new } StringBuffer.new StringBuffer.append StringBuffer.toString
if ( ) { if ( ) { IllegalStateException.new } }
Properties.new Class<>.getResourceAsStream Properties.load
ConcurrentNavigableMap.firstKey
List<Object>.size List<Object>.toArray
if ( Key.getFormat ) { InvalidKeyException.new } Key.getEncoded if ( ) { InvalidKeyException.new }
if ( ) { Guard.checkGuard }
Map<,>.size
if ( ) { PrintStream.println }
for ( Map<String,String>.entrySet ) { Entry<String,String>.getKey if ( List<Object>.size ) { for ( ) { Entry<String,String>.getValue } } else { Entry<String,String>.getValue } }
Map<Object,Object>.remove if ( ) { if ( Map<Object,Object>.isEmpty ) { } }
JEditorPane.setEditable HTMLEditorKit.new JEditorPane.setEditorKit if ( ) { File.new } File.getCanonicalPath String.replaceAll String.format HTMLEditorKit.getStyleSheet StyleSheet.addRule StyleSheet.addRule StyleSheet.addRule StyleSheet.addRule HTMLEditorKit.createDefaultDocument JEditorPane.setDocument AbstractAction.new Class.getName Logger.getLogger Logger.log
if ( ) { IndexOutOfBoundsException.new }
for ( ) { if ( Predicate<Object>.test ) { return ( ) } }
return ( Map<Object,Object>.keySet Collectors.toSet )
return ( List<Object>.size List<Object>.toArray )
if ( ) { HashMap<String,String>.new if ( List<Object>.isEmpty ) { List<Object>.get } return ( ) return ( ) }
if ( ) { if ( ) { return ( Boolean.booleanValue ) } return ( String.equals ) }
HashSet<Object>.new for ( Map<Object,Object>.keySet ) { if ( ) { Map<Object,Object>.get HashSet<Object>.add } }
Arrays.asList
if ( ) { ListResourceBundle.getString } if ( ) { ListResourceBundle.getString } if ( ) { MessageFormat.format ListResourceBundle.getString } if ( ) { RuntimeException.new }
if ( ) { if ( ) { IllegalStateException.new } IllegalStateException.new }
if ( ) { ArrayList<Object>.remove ArrayList<Object>.add }
MARSHAL.new
Path.toUri Path.toUri
if ( ) { Integer.valueOf }
HashSet<URI>.new ArrayList<Object>.new if ( ) { String.toString for ( ) { Set<URI>.add } }
if ( ) { HashMap.new }
if ( BigDecimal.compareTo ) { return ( ) }
ArrayDeque<Object>.clear
if ( ) { String.length String.substring String.format } Runnable.new
if ( ) { ArrayList<Integer>.new for ( ) { if ( ) { List<Integer>.add } } ArrayList<Object>.new if ( List<Integer>.isEmpty ) { } }
List<Object>.size Arrays.fill for ( ; ; ) { List<Object>.get }
Object.getClass Class.getFields for ( ; ; ) { Field.getName }
FileOutputStream.new OutputStreamWriter.new if ( ) { OutputStreamWriter.close } if ( ) { FileOutputStream.close }
return ( Optional.ofNullable )
if ( ) { if ( ) { if ( ) { return ( ) IOException.getMessage IllegalArgumentException.new } } } Object.getClass Class.getName IllegalArgumentException.new
HashMap<String,String>.new Map<String,String>.put
if ( File.exists ) { File.getParentFile File.mkdirs File.createNewFile } PrintWriter.new Class.newInstance PrintWriter.close Throwable.printStackTrace
String.lastIndexOf if ( ) { return ( String.substring ) }
File.new if ( File.exists File.isDirectory ) { IllegalStateException.new } if ( File.exists File.isDirectory File.canWrite ) { IllegalStateException.new } if ( File.exists ) { File.mkdir if ( ) { IllegalStateException.new } if ( File.canWrite ) { IllegalStateException.new } File.delete } Preferences.userRoot File.getAbsolutePath Preferences.put
return ( Collections.emptyList )
return ( Set<String>.contains Map<String,Object>.containsKey )
if ( ) { Class.getName Arrays.toString }
Map<String,Object>.entrySet Set.iterator while ( Iterator<Entry<String,Object>>.hasNext ) { Iterator<Entry<String,Object>>.next Entry<String,Object>.getValue File.delete Iterator<Entry<String,Object>>.remove }
return ( File.new )
if ( ) { IllegalArgumentException.new }
String.replaceAll String.replaceAll String.split Date.new Math.random
if ( Map<String,String>.isEmpty ) { if ( String.indexOf ) { } } for ( Map<String,String>.entrySet ) { Entry<String,String>.getKey Entry<String,String>.getValue URLConnection.setRequestProperty } URLConnection.getContentType
return ( Map<String,Object>.get )
Properties.remove Properties.remove if ( ) { if ( ) { Properties.getProperty if ( String.length ) { } } } Properties.remove Properties.remove Properties.remove if ( ) { Boolean.booleanValue } Properties.remove Properties.remove System.currentTimeMillis
if ( ) { String.format RuntimeException.new } Random.nextDouble for ( Map<Object,Double>.entrySet ) { Entry<Object,Double>.getValue if ( ) { return ( Entry<Object,Double>.getKey ) } } IllegalStateException.new
if ( String.length ) { return ( ) } return ( URI.new URI.toString )
if ( ) { for ( ) { if ( String.equals ) { break } } }
for ( ; List<Object>.nonEmpty ; ) { } if ( ) { for ( ; List<Object>.nonEmpty ; ) { } } List.nil
Switch ( ) { case : FileInputStream.new FileInputStream.getChannel FileChannel.size return ( ) case : URL.new URL.openConnection HttpURLConnection.setDoInput HttpURLConnection.getHeaderField if ( ) { String.split } HttpURLConnection.getContentLength HttpURLConnection.getInputStream return ( ) case : if ( ) { FileNotFoundException.new } return ( ) } FileNotFoundException.new
ArrayList<Integer>.clear return ( ArrayList<Integer>.isEmpty )
String.trim
File.toPath Files.readAllBytes return ( Charset.forName String.new )
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } ByteArrayInputStream.new ByteArrayOutputStream.new KeyStore.getInstance String.toCharArray KeyStore.load KeyStore.aliases if ( Enumeration<String>.hasMoreElements ) { Enumeration<String>.nextElement KeyStore.getCertificate String.toCharArray KeyStore.getKey if ( ) { String.toCharArray KeyStore.setKeyEntry KeyStore.store ByteArrayOutputStream.toByteArray } } ByteArrayInputStream.close ByteArrayOutputStream.close
if ( HashMap<String,WeakHashMap<Object,Set<Object>>>.get ) { for ( HashMap<String,WeakHashMap<Object,Set<Object>>>.get ) { } }
ByteArrayOutputStream.new IllegalStateException.new ByteArrayOutputStream.toByteArray
Map<Object,Object>.get if ( ) { for ( Map<Object,Object>.keySet ) { } if ( ) { Map<Object,Object>.get } }
CopyOnWriteArraySet<Object>.add
InterruptedException.getMessage IOException.printStackTrace JAXBException.printStackTrace
if ( ) { IllegalArgumentException.new }
System.getProperty
return ( EnumSet.of )
return ( Collections.unmodifiableSet )
Math.cos Math.cos Math.sin Math.sin Math.sin Math.sqrt Math.asin Math.sin Math.sin Math.cos Math.atan2 Math.cos Math.sin for ( ; ; ) { Math.sin Math.cos Math.asin Math.atan2 }
HashMap<Object,Integer>.new
if ( String.length ) { return ( ) } if ( String.endsWith ) { return ( String.length String.length String.substring ) }
return ( Double.new )
if ( ) { System.arraycopy }
Integer.valueOf Long.valueOf
String.format
Class<Object>.newInstance Class<Object>.getSimpleName
Switch ( ) { default : String.format RuntimeException.new }
Statement.execute Statement.execute
PrintStream.println
if ( ) { ArrayList<Object>.new }
if ( ) { Integer.valueOf }
if ( ) { Integer.valueOf }
if ( ) { IllegalArgumentException.new }
if ( ) { if ( ) { if ( ) { ArrayList<Object>.new List<Object>.add } } }
while ( ) { if ( String.charAt ) { } }
Runnable.run
Writer.close if ( ) { IOException.new }
Switch ( ) { default : IllegalArgumentException.new }
if ( ) { System.arraycopy }
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new }
Map.size for ( Map.entrySet Set.iterator ; Iterator.hasNext ; ) { Iterator.next } Entry.getKey Entry.getValue Map.clear
URI.toString HashMap<String,String>.new Map<String,String>.put Map<String,String>.put if ( ) { Map<String,String>.put } if ( ) { if ( ) { String.valueOf } }
Boolean.valueOf
Character.toString Character.toString Character.toString
ArrayList.new while ( ) { ArrayList.add if ( ) { JPopupMenu.getInvoker } else { Component.getParent } } ArrayList.size ArrayList.toArray
UIManager.getColor UIManager.getColor JSeparator.setOpaque
Point2D.getX Point2D.getY Point2D.getX Point2D.getY
if ( Set<Object>.size ) { }
HashSet.new for ( ) { Set<Object>.add }
ArrayList<Object>.add ArrayList<Object>.size ArrayList<Object>.get if ( String.equals ) { } DefaultTreeModel.nodeStructureChanged DefaultTreeModel.nodeStructureChanged TreePath.new JTree.setSelectionPath JTree.expandPath
for ( ; ; ) { if ( ProfileHeader.getColorSpace ) { return ( ) } }
if ( ) { for ( ) { PrintStream.println } } else { PrintStream.println } PrintStream.println
String[].clone
ArrayList.new HashSet.new for ( ) { if ( Set<String>.add ) { List<Object>.add } }
if ( ) { if ( ) { String.format if ( String.startsWith ) { } } }
return ( String.compareTo )
if ( ) { return ( Object.equals ) } else { if ( ) { return ( Object.equals ) } else { if ( ) { return ( Object.toString ) } } }
return ( HashMap<String,String>.keySet )
Integer.valueOf
Arrays.checkOffsetAndCount
String.getBytes SecretKeyFactory.getInstance PBEKeySpec.new SecretKeyFactory.generateSecret Cipher.getInstance PBEParameterSpec.new Cipher.init return ( Cipher.doFinal String.new ) RuntimeException.new
Deflater.new CRC32.reset
return ( EnumSet<Object>.contains )
Integer.toInt
PrintWriter.println
return ( Integer.toString )
return ( QName.new )
while ( Iterator<Entry<Object,Object>>.hasNext ) { Iterator<Entry<Object,Object>>.next if ( Entry<Object,Object>.getKey ) { Entry<Object,Object>.getKey Entry<Object,Object>.getValue } }
if ( ) { Map<String,String>.put }
for ( ; ; ) { AtomicLong.get }
IOException.new
Deflater.new
return ( return ( ) return ( ) Throwable.new return ( ) IllegalStateException.new )
Hashtable.keySet Set.iterator while ( Iterator.hasNext ) { Iterator.next Class.forName if ( Class.isAssignableFrom ) { Hashtable.get return ( ) } }
return ( Properties.new )
Class.getName if ( ) { if ( ) { Arrays.asList HashSet.new PrintStream.println Arrays.asList PrintStream.println for ( ; ; ) { if ( Set.remove ) { return ( ) } } return ( Set.size ) } }
List<>.removeAll
if ( ) { if ( String.startsWith String.startsWith String.startsWith ) { return ( ) } if ( String.startsWith String.startsWith String.equals ) { return ( ) } }
Switch ( ) { case : String.new if ( String.equals String.equals String.equals ) { if ( String.equals ) { return ( ) } } return ( ) }
return ( Collections.unmodifiableCollection )
Switch ( TypeMirror.getKind ) { }
ArrayList<Object>.remove WeakReference<Object>.get Runnable.new
Boolean[].getClass
Map<String,Object>.get
IllegalStateException.new
return ( Float.parseFloat )
if ( ) { IndexOutOfBoundsException.new } if ( ) { IndexOutOfBoundsException.new } if ( ) { IndexOutOfBoundsException.new } if ( ) { IndexOutOfBoundsException.new } if ( ) { IndexOutOfBoundsException.new }
ConcurrentHashMap<String,Object>.get ConcurrentHashMap<String,Object>.put if ( ) { ConcurrentHashMap<String,Object>.size }
List<Object>.get
PrintStream.println PrintStream.println Exception.printStackTrace
ArrayList<Object>.new for ( ; Iterator<Iterator<Object>>.hasNext ; ) { for ( Iterator<Iterator<Object>>.next ; Iterator<Object>.hasNext ; ) { Iterator<Object>.next List<Object>.add } } return ( Collections.unmodifiableList )
File.listFiles return ( File.isDirectory File.getName String.contains ) FileFilter.new File.listFiles
if ( ) { IllegalArgumentException.new } else { if ( String.startsWith ) { } if ( String.endsWith ) { } }
for ( ; List<Object>.size ; ) { List<Object>.get if ( ) { Set<Object>.addAll } if ( ) { Set<Object>.addAll } }
Arrays.asList Collections.max Math.max ArrayList.new for ( ; ; ) { if ( ) { List<Integer>.add } } if ( List<Integer>.size ) { Collections.sort while ( List<Integer>.size ) { List<Integer>.remove } } return ( List<Integer>.size List<Integer>.toArray )
if ( String.toLowerCase String.endsWith ) { } if ( ) { FileOutputStream.new OutputStreamWriter.new } Writer.write Writer.flush Writer.close Exception.printStackTrace
SimpleDateFormat.new Date.new SimpleDateFormat.format
if ( ) { IllegalStateException.new }
System.currentTimeMillis StringWriter.new PrintWriter.new StringWriter.toString
if ( ) { Object.notifyAll }
if ( ) { IllegalArgumentException.new }
BigInteger.valueOf BigInteger.toByteArray BigInteger.signum
return ( Integer.parseInt )
Vector.new if ( ) { Exception.new PrintStream.println Exception.new Exception.printStackTrace } if ( ) { Exception.new PrintStream.println Exception.new Exception.printStackTrace System.exit }
Math.tan Math.tan
System.currentTimeMillis System.currentTimeMillis if ( System.currentTimeMillis ) { if ( ) { if ( ) { for ( Properties.entrySet ) { Entry<Object,Object>.getKey Entry<Object,Object>.getValue } } if ( ) { for ( ) { Properties.get } } } }
System.exit Exception.getMessage
if ( String.trim ) { return ( ) } for ( List<String>.get ) { } List<String>.get return ( List<String>.get List<String>.get List<String>.get )
if ( ) { ParameterizedType.getActualTypeArguments if ( ParameterizedType.getRawType ) { IllegalArgumentException.new } }
PrintStream.println
for ( ) { Map<Object,Integer>.get Map<Object,String>.get }
return ( Map<String,Object>.keySet ArrayList<String>.new )
if ( BigDecimal.scale ) { return ( BigDecimal.setScale ) } if ( BigDecimal.scale ) { return ( BigDecimal.setScale ) }
if ( ) { Arrays.fill }
for ( ; List<Object>.size ; ) { List<Object>.get List<Object>.get List<Object>.get List<Object>.get } if ( List<Object>.size ) { return ( ) }
HashMap<String,Object>.new
DualPivotQuicksort.sort
if ( ) { IllegalStateException.new }
return ( return ( ) Callable<String>.new )
Color.decode BorderLayout.new BorderLayout.new BorderLayout.new JLabel.new JLabel.setFont JLabel.new JLabel.setFont JLabel.new JLabel.setFont JPanel.new JPanel.setOpaque JPanel.new JPanel.setOpaque JPanel.new JPanel.setOpaque JPanel.add JPanel.add JPanel.add GridLayout.new JPanel.new BorderLayout.new JPanel.new JPanel.add JPanel.add JPanel.add JPanel.add Container.add JButton.new ActionListener.new JButton.addActionListener JButton.new ActionListener.new JButton.addActionListener GridLayout.new JPanel.new BorderFactory.createTitledBorder JPanel.setBorder JPanel.new BorderFactory.createTitledBorder JPanel.setBorder JPanel.add JPanel.new JPanel.add JPanel.add JPanel.add JPanel.add Container.add
return ( String.format )
if ( ) { IllegalArgumentException.new }
return ( JAXBElement<Object>.new )
Set<Object>.add
return ( Map<String,Object>.get )
for ( ; Enumeration.hasMoreElements ; ) { Enumeration.nextElement }
if ( ) { ArrayList<Object>.new ArrayList<Object>.addAll ArrayList<Object>.toString } if ( ) { ArrayList<Object>.new ArrayList<Object>.clear ArrayList<Object>.addAll ArrayList<Object>.toString }
if ( ) { NoSuchElementException.new } if ( ) { PersistenceParser.iterator } if ( Iterator.hasNext ) { ArrayIndexOutOfBoundsException.new } return ( Iterator.next )
if ( ) { if ( ) { IllegalArgumentException.new } }
return ( BitSet.isEmpty )
Map<String,Object>.remove if ( ) { AtomicLong.addAndGet } Map<String,Object>.put
List<Object>.add
Thread.currentThread Thread.getContextClassLoader
Set<Entry<Object,Object>>.iterator if ( Iterator<Entry<Object,Object>>.hasNext ) { return ( ) } StringBuilder.new StringBuilder.append for ( ; ; ) { Iterator<Entry<Object,Object>>.next Entry<Object,Object>.getKey Entry<Object,Object>.getValue StringBuilder.append StringBuilder.append StringBuilder.append if ( Iterator<Entry<Object,Object>>.hasNext ) { return ( StringBuilder.append StringBuilder.toString ) } StringBuilder.append }
for ( ) { Runnable.run } List<Runnable>.clear
Thread.currentThread Thread.getStackTrace StringBuffer.new for ( ; ; ) { StringBuffer.append StringBuffer.append StringBuffer.append } return ( StringBuffer.toString )
Arrays.asList HashMap<Object,Object>.new for ( ) { Map<Object,Object>.put }
System.currentTimeMillis TimeUnit.toMillis while ( ) { System.currentTimeMillis }
BorderFactory.createEmptyBorder
if ( ) { IllegalArgumentException.new } System.arraycopy
StringBuilder.new if ( ) { InputStreamReader.new BufferedReader.new while ( BufferedReader.read ) { StringBuilder.append } } else { StringBuilder.append } if ( ) { BufferedReader.close } return ( StringBuilder.toString )
MARSHAL.new
return ( Integer.intValue )
if ( String.equals ) { Map<String,Double>.get return ( ) } else { if ( String.equals ) { Map<String,Double>.get return ( ) } else { if ( String.equals ) { Map<String,Double>.get return ( ) } } }
Map<Object,Object>.clear
return ( Locale.getDefault )
BigDecimal.new
return ( Random.nextGaussian )
Map<String,Object>.values LinkedList.new LinkedList.new for ( ) { Collection<Object>.add } return ( Collection<Object>.size ) Runnable.new
Math.min File.getName
if ( ) { IllegalArgumentException.new } IllegalStateException.new
if ( ) { CharSequence.length StringBuilder.new } if ( StringBuilder.length ) { StringBuilder.append } StringBuilder.append
Map<Class<Object>,Object>.get return ( Map<Class<Object>,Object>.get )
if ( ) { RuntimeException.new } if ( ) { if ( ) { System.arraycopy } }
if ( ) { IllegalArgumentException.new } Locale.getDefault String.toUpperCase Map<String,Collection<X509Certificate>>.get if ( ) { Collections.emptyList }
return ( Integer.intValue )
if ( ) { InvalidParameterException.new } Exception.getMessage
return ( Object.equals )
return ( ArrayList<Object>.new )
if ( String.equals ) { }
if ( ) { NoSuchElementException.new }
return ( for ( Class<Object>.getDeclaredFields ) { Field.setAccessible Field.get if ( Class<Object>.isInstance ) { return ( Class<Object>.cast ) } } NoSuchFieldError.new PrivilegedExceptionAction<Object>.new AccessController.doPrivileged ) PrivilegedActionException.getCause RuntimeException.new
if ( Collection<Object>.size ) { return ( Collection<Object>.iterator ) }
if ( ) { Runnable.new }
StringWriter.new while ( Reader.read ) { StringWriter.write } return ( StringWriter.toString ) Reader.close
ArrayList.new List<Image>.add List<Image>.add List<Image>.add List<Image>.add List<Image>.add
List.add List.size List.toArray
if ( ) { for ( ) { String.hashCode } String.hashCode CompositeType.hashCode Integer.valueOf } return ( Integer.intValue )
URI.new String.endsWith
Vector.new List.add
Optional.ofNullable
ConcurrentMap<String,Function<Object,String>>.putIfAbsent
Map<Method,Object>.keySet
if ( ) { AssertionError.new }
if ( ) { Math.min } if ( ) { Math.min } if ( ) { Math.min } if ( ) { if ( ) { Math.min } }
HashMap<URI,List<URI>>.new if ( List<URI>.isEmpty ) { for ( ) { if ( ) { for ( ) { URI.create if ( ) { if ( Map<URI,List<URI>>.containsKey ) { ArrayList<URI>.new Map<URI,List<URI>>.put } Map<URI,List<URI>>.get List<URI>.add } } } } }
ArrayList<Object>.add ArrayList<Object>.size
JSplitPane.getLeftComponent JSplitPane.getRightComponent
if ( ) { HashMap<Object,Long>.new }
if ( Class.isAssignableFrom ) { return ( ) }
Map.remove
if ( ) { ArrayList<String>.new for ( ) { ArrayList<String>.add } return ( ArrayList<String>.toArray ) } return ( ArrayList<String>.new )
String.length String.length if ( ) { if ( ) { String.length } }
return ( CopyOnWriteArraySet<Object>.iterator )
Arrays.asList
if ( ) { RuntimeException.new } Integer.toHexString RuntimeException.new
Long.valueOf SortedMap.remove
if ( ) { if ( FutureTask<Void>.isDone ) { if ( FutureTask<Void>.isDone ) { FutureTask<Void>.get RuntimeException.new RuntimeException.new } FutureTask<Void>.new Executor.execute } RuntimeException.new }
if ( ) { XMLStreamWriter.flush XMLStreamWriter.close } if ( ) { OutputStream.flush OutputStream.close }
HashMap<String,Object>.put
Arrays.fill
return ( String.new )
if ( ) { ActionListener.new }
if ( ) { List<Object>.set }
Integer.toString
DataInputStream.readLong while ( ) { if ( ) { DataInputStream.readLong continue } DataInputStream.readLong }
if ( ) { String.format } Object.getClass Class.getName String.format
Long.parseLong System.currentTimeMillis Long.toString
UnsupportedOperationException.new
HashSet.new Set<String>.add for ( ) { Arrays.stream Stream.filter Collectors.toSet Stream.collect if ( Set<String>.isEmpty ) { } Set<String>.add }
if ( ) { ResourceBundle.getString } else { ResourceBundle.getString }
Runnable.new
Runnable.new
ArrayList<Object>.add for ( ; ArrayList<Object>.size ; ) { ArrayList<Object>.get }
if ( ) { IllegalStateException.new }
if ( ) { if ( List<String>.size List<String>.get Set<String>.contains ) { return ( ) } }
return ( HashMap.new Map<Object,Object>.get Map<Object,Object>.put return ( ) )
if ( ) { Map<String,Object>.put return ( ) } Map<String,Object>.put
if ( ) { return ( Math.pow ) } return ( Math.pow )
Arrays.asList ByteBuffer.allocate ByteBuffer.put String.getBytes ByteBuffer.flip ByteBuffer.limit ByteBuffer.limit ByteBuffer.get Arrays.equals
KeyStore.getInstance KeyStore.load if ( KeyStore.containsAlias ) { IllegalArgumentException.new } KeyStore.getKey return ( Key.getEncoded Key.getAlgorithm SecretKeySpec.new ) RuntimeException.new RuntimeException.new
return ( UIManager.getBorder )
Thread.currentThread if ( ) { Thread.getThreadGroup } if ( ThreadGroup.isDestroyed ) { IllegalThreadStateException.new } Thread.getPriority ThreadGroup.addThread
String.indexOf String.length String.indexOf String.length String.substring Integer.valueOf
return ( Element.getAttributeNS )
if ( ) { if ( ) { return ( Boolean.booleanValue ) } return ( String.equals ) }
if ( ) { IOException.new } if ( ) { StringBuilder.new StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.toString }
while ( ASCII.isSpace ) { while ( ASCII.isSpace ) { } }
System.arraycopy
if ( ) { NullPointerException.new }
Point2D.getX Point2D.getY return ( Math.sqrt )
return ( String.equals )
Arrays.asList Arrays.asList
for ( ; ; ) { ObjectStreamField.getName for ( ; ; ) { if ( ObjectStreamField.getName String.equals ) { ObjectStreamField.isUnshared ObjectStreamField.setUnshared ObjectStreamField.getOffset ObjectStreamField.setOffset break } } }
SQLException.printStackTrace if ( ) { IOException.printStackTrace for ( ) { if ( ) { SQLException.printStackTrace InterruptedException.printStackTrace } } } else { DatabaseMetaData.getSchemas while ( ResultSet.next ) { ResultSet.getString } ResultSet.close } for ( ; ; ) { BlockingQueue<Object>.put InterruptedException.printStackTrace }
for ( ; ; ) { PrintStream.println }
if ( String.startsWith ) { String.substring } else { if ( String.startsWith ) { String.substring } }
return ( ClasspathFontPeer.deriveFont )
Map<String,String>.put Map<String,String>.put Map<String,String>.put Map<String,String>.put Map<String,String>.put Map<String,String>.put
if ( ) { IllegalArgumentException.new }
List<Object>.add
if ( ) { if ( ) { if ( Collection<String>.remove ) { if ( ) { Collection<String>.add return ( ) } } return ( ) } } else { if ( ) { AssertionError.new } }
X509Certificate.getEncoded MessageDigest.getInstance MessageDigest.digest
Arrays.toString Arrays.toString
StringWriter.new return ( StringWriter.toString )
List<Object>.add
if ( Object.equals String.equalsIgnoreCase ) { if ( Object.equals String.equalsIgnoreCase ) { return ( ) } }
Exception.getMessage Exception.printStackTrace Exception.getMessage
URL.new URL.openStream InputStreamReader.new BufferedReader.new while ( BufferedReader.readLine ) { StringBuffer.append } FileNotFoundException.printStackTrace IOException.printStackTrace
for ( ; ; ) { PrintStream.println }
if ( String.startsWith ) { IllegalArgumentException.new } String.split if ( ) { String.split } if ( String.length ) { IllegalArgumentException.new } File.createTempFile File.deleteOnExit if ( File.exists ) { File.getAbsolutePath FileNotFoundException.new } Class.getResourceAsStream if ( ) { FileNotFoundException.new } FileOutputStream.new while ( InputStream.read ) { OutputStream.write } OutputStream.close InputStream.close File.getAbsolutePath System.load
IOException.getMessage
PrintStream.println FileOutputStream.new PrintStream.println IOException.getMessage PrintStream.println
Thread.currentThread Thread.getStackTrace Class.getName for ( ; ; ) { if ( StackTraceElement.getClassName String.equals StackTraceElement.getMethodName String.equals ) { StackTraceElement.getClassName break } }
Class.getName
return ( NavigableSet<Object>.descendingIterator )
return ( List<String>.size List<String>.toArray )
return ( Arrays.asList )
ArrayList.new List<Object>.add
Collections.singletonMap if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new }
NonWritableChannelException.new
Logger.info Vector.setSize List.clear List.size Logger.info
LinkedHashMap<Object,Integer>.clear
return ( Class.getName Class.getName )
System.currentTimeMillis RandomAccessFile.getChannel FileChannel.position RandomAccessFile.setLength while ( ) { FileChannel.transferFrom if ( ) { if ( ) { if ( ) { RuntimeException.new } } } } if ( ) { IOException.new } FileChannel.position System.currentTimeMillis
ArrayList<Object>.size if ( ArrayList<Object>.size ) { if ( ) { ArrayList<Object>.add } }
ArrayList.new for ( ) { if ( ) { IllegalStateException.new } List<Object>.add }
if ( Set.contains ) { ResultSet.getShort String.valueOf ResultSet.getString if ( ) { Short.valueOf Short.toString SQLException.getStackTrace } }
StringBuffer.new
System.setProperty System.setProperty System.setProperty UIManager.setLookAndFeel
Integer.toString
if ( ) { return ( Object.getClass ) }
InputSource.new String.getBytes ByteArrayInputStream.new InputSource.setByteStream StringReader.new InputSource.setCharacterStream
if ( ) { Long.valueOf }
if ( ) { IllegalStateException.new }
System.currentTimeMillis Math.min
Map<Long,Object>.put Map<Long,ResourceBundle>.put
if ( ) { NullPointerException.new }
if ( ) { return ( X509Certificate.getSubjectX500Principal ) }
Collections.unmodifiableList Collections.singletonMap
if ( ) { if ( ) { HashMap.remove return ( ) } } else { if ( ) { if ( ) { HashMap.remove return ( ) } } }
ArrayList.new while ( Iterator<Object>.hasNext ) { Iterator<Object>.next if ( Iterator<Object>.hasNext ) { List<Object>.add } } if ( List<Object>.isEmpty ) { return ( ) }
Array.getLength
StringBuffer.new if ( String.length ) { StringBuffer.append StringBuffer.append StringBuffer.append } return ( StringBuffer.toString )
Double.isNaN Double.isInfinite Locale.getDefault Math.round String.format
IOException.new
UnsupportedOperationException.new
Map<Number,Object>.get
if ( ) { if ( ) { return ( Boolean.booleanValue ) } return ( String.equals ) }
ArrayList.new
if ( ArrayList<Object>.size ) { ArrayList<Object>.get if ( ) { Class.getSimpleName if ( ) { if ( LinkedList<Object>.isEmpty ) { } } } }
PrintStream.println PrintStream.println PrintStream.println Map<String,Set<String>>.getOrDefault Collections.emptySet Map<String,Set<String>>.getOrDefault Collections.emptySet Set<String>.forEach Set<String>.size PrintStream.println File.new Boolean.toString
if ( ) { IllegalArgumentException.new }
Arrays.asList Arrays.asList Arrays.asList Collectors.toList List<Object>.size if ( List<Object>.get String.equals ) { List<Object>.get List<Object>.get } else { List<Object>.get List<Object>.get }
String.split ArrayList<String>.new for ( ) { if ( String.equals ) { } List<String>.add }
Set<Object>.add if ( ) { PriorityBlockingQueue<Object>.add return ( ) } if ( Map<String,Queue<Object>>.containsKey ) { Map<String,Queue<Object>>.get if ( ) { LinkedList<Object>.new } Queue<Object>.add Map<String,Queue<Object>>.put } else { Map<String,Queue<Object>>.put PriorityBlockingQueue<Object>.add }
return ( ArrayList<Object>.new )
return ( Integer.toString )
HashMap<Object,Integer>.new if ( ) { Map<Object,Integer>.put Map<Object,Integer>.put Map<Object,Integer>.put } else { Map<Object,Integer>.put }
Exception.getMessage
Objects.requireNonNull if ( ) { Object.getClass }
Class.forName Class<>.getMethod Method.invoke
for ( ) { List<String>.add }
return ( Class.getName String.equals Class.getName String.equals Class.getName String.equals )
HashSet.new for ( ) { Set<String>.add } return ( Collections.emptySet )
return ( StrictMath.abs )
return ( URL.openStream )
if ( ) { IllegalArgumentException.new }
if ( ) { NullPointerException.new }
return ( Integer.valueOf )
Math.max Math.min
if ( ) { Integer.toHexString String.getBytes OutputStream.write OutputStream.write OutputStream.write }
String.replace WeakReference.get if ( ) { return ( ClassLoader.getResource ) }
return ( String.equals )
PrintStream.println
Pattern.compile
return ( Class.getField ) UnsupportedOperationException.new
if ( ForkJoinPool.findNonEmptyStealQueue WorkQueue.pollAt ) { ForkJoinTask<>.doExec }
File.new
if ( ) { if ( ) { AssertionError.new } }
ArrayList.new ResourceBundle.getString ArrayList<Object>.add ResourceBundle.getString ArrayList<Object>.add ResourceBundle.getString ArrayList<Object>.add ResourceBundle.getString ArrayList<Object>.add ResourceBundle.getString ArrayList<Object>.add ResourceBundle.getString ArrayList<Object>.add ResourceBundle.getString ArrayList<Object>.add ResourceBundle.getString ArrayList<Object>.add ResourceBundle.getString ArrayList<Object>.add ResourceBundle.getString ArrayList<Object>.add ResourceBundle.getString ArrayList<Object>.add
if ( String.toLowerCase String.contains ) { if ( String.toLowerCase String.contains ) { } }
Map<UUID,Object>.clear Map<String,Object>.clear Map<Object,Object>.clear BlockingQueue<Object>.clear
ArrayList<Object>.get
if ( ) { IllegalStateException.new }
StringBuilder.new StringBuilder.append for ( ; ; ) { String.format StringBuilder.append for ( ) { String.format StringBuilder.append } StringBuilder.append } return ( StringBuilder.toString )
HashMap<Object,Long>.new if ( AtomicLong.get ) { AtomicLong.get Map<Object,Long>.put }
return ( Point2D.getX Point2D.getY Double.new )
if ( List<String>.isEmpty ) { }
if ( ) { IllegalStateException.new }
return ( Integer.intValue )
ObjectInputStream.defaultReadObject if ( ) { NullPointerException.new }
if ( ) { NullPointerException.new } Date.new Date.new if ( ) { Date.getTime Date.getTime } if ( ) { RuntimeException.new }
Map<Object,Object<Object,Object>>.get
while ( Iterator<Object>.hasNext ) { Iterator<Object>.next if ( String.equals ) { break } }
List<Object>.addAll
StringBuffer.new if ( ) { StringBuffer.append } if ( ) { StringBuffer.append } if ( Boolean.getBoolean ) { StringBuffer.append } return ( StringBuffer.toString )
Method.getParameterTypes StringBuffer.new StringBuffer.append StringBuffer.append Method.getReturnType return ( StringBuffer.toString )
ConcurrentMap<String,Object>.remove
ArrayList<String>.new if ( List<String>.isEmpty ) { }
if ( ) { if ( ) { if ( String.equals ) { } } }
if ( ) { if ( ) { String.new IOException.getMessage } }
if ( ) { IllegalArgumentException.new }
if ( ) { SQLException.new } Exception.getMessage SQLException.new SQLException.initCause
if ( ) { IllegalArgumentException.new } return ( Math.min Math.max )
return ( if ( Map<String,Object>.get ) { Map<String,Object>.get } if ( Map<String,Object>.get ) { Map<String,Object>.get } if ( ) { for ( Map<String,Object>.keySet ) { if ( ) { RuntimeException.new } Map<String,Object>.get } } return ( ) Callable<Object>.new )
if ( String.equals ) { String.valueOf PrintStream.println }
if ( ) { for ( ; ; ) { for ( ; Float.compare ; ) { } } return ( ) } while ( ) { while ( Float.compare ) { } while ( Float.compare ) { } } Math.min Math.min
AtomicBoolean.set AtomicBoolean.set if ( ) { if ( AtomicBoolean.get AtomicInteger.incrementAndGet ) { AtomicBoolean.get } }
if ( Object.equals ) { return ( ) } if ( Object.getClass Class.isArray ) { return ( ) } Object.getClass Class.getPackage Package.getName if ( String.startsWith String.startsWith Object.getClass Class.getClassLoader ) { return ( Object.toString ) }
String.intern String.intern String.intern Class.getName ArrayList<Object>.new if ( String.contains String.contains ) { }
if ( Thread.currentThread Thread.equals ) { return ( ) } ArrayList<Object>.new Object.new ArrayList<Object>.add Object.notify Runnable.new while ( ArrayList<Object>.isEmpty ) { Object.wait } if ( ArrayList<Object>.get ) { return ( ) } return ( ArrayList<Object>.get )
if ( ) { if ( ) { System.arraycopy } }
for ( ; ArrayList<Object>.size ; ) { ArrayList<Object>.get if ( String.length String.equals ) { String.toUpperCase String.charAt } if ( Character.isLetter ) { if ( ) { String.valueOf ArrayList<Object>.add String.valueOf } } else { if ( ) { ArrayList<Object>.add } } }
Math.max Math.min
if ( List<>.isEmpty ) { IllegalStateException.new }
HashMap<String,Object>.get HashMap<String,Object>.put
for ( ) { for ( ) { Set<Object>.toArray } }
if ( String.trim String.length ) { } if ( String.trim String.length ) { }
Connection.createStatement Statement.executeUpdate Connection.prepareStatement for ( ; ; ) { for ( ; ; ) { String.valueOf PreparedStatement.setString String.valueOf PreparedStatement.setString PreparedStatement.executeUpdate } } Statement.executeUpdate
RuntimeException.new
return ( Field.getModifiers Modifier.isStatic )
for ( ; List<Object>.nonEmpty ; ) { }
Properties.getProperty Properties.getProperty Properties.getProperty
StringBuilder.new while ( Iterator<Object>.hasNext ) { StringBuilder.append Iterator<Object>.next StringBuilder.append StringBuilder.append if ( Iterator<Object>.hasNext ) { StringBuilder.append StringBuilder.append } } return ( StringBuilder.toString )
Semaphore.acquire
Map<Object,Object>.get if ( ) { Map<Object,Object>.put }
if ( ) { if ( String.equals String.equals ) { return ( URL.toExternalForm ) } return ( URL.toExternalForm String.replace ) }
if ( ) { IllegalStateException.new }
Set<String>.add
List<Object>.remove List<Object>.size
ByteBuffer.limit ByteBuffer.position
if ( ) { return ( Math.max Math.min ) }
if ( ) { IllegalArgumentException.new } if ( ) { ArrayIndexOutOfBoundsException.new }
List<Object>.get
if ( ) { HashSet<String>.new ArrayList<String>.new for ( Map<String,String>.keySet ) { if ( String.toLowerCase Collection<String>.add ) { Collection<String>.add } } }
return ( URI.new )
JLabel.new JTextField.new JTextField.setText GroupLayout.new GroupLayout.createParallelGroup GroupLayout.createSequentialGroup SequentialGroup.addContainerGap SequentialGroup.addComponent SequentialGroup.addPreferredGap SequentialGroup.addComponent SequentialGroup.addContainerGap ParallelGroup.addGroup GroupLayout.setHorizontalGroup GroupLayout.createParallelGroup GroupLayout.createSequentialGroup SequentialGroup.addContainerGap GroupLayout.createParallelGroup ParallelGroup.addComponent ParallelGroup.addComponent SequentialGroup.addGroup SequentialGroup.addContainerGap ParallelGroup.addGroup GroupLayout.setVerticalGroup
ORB.get_primitive_tc ORB.create_alias_tc StructMember.new ORB.get_primitive_tc ORB.create_sequence_tc StructMember.new return ( ORB.create_struct_tc )
ArrayList.new for ( ; Iterator.hasNext ; ) { Iterator.next Map.get List.addAll }
if ( ) { File.new if ( File.exists File.mkdirs ) { } }
String.toLowerCase Map<String,Object>.get if ( ) { Map<String,Object>.put }
if ( ) { UnicodeBlock.of UnicodeBlock.toString String.replace }
return ( return ( ) PrivilegedAction<Object>.new AccessController.doPrivileged )
List<Object>.size
Comparator<Integer>.new Arrays.sort
ArrayList.size if ( ArrayList.size ) { return ( ) } for ( ; ; ) { ArrayList.get Integer.intValue ArrayList.get }
List.iterator if ( ) { List.size } while ( Iterator.hasNext ) { Iterator.next }
for ( ) { Queue<String>.add }
if ( ) { FileNotFoundException.new } if ( List<String>.isEmpty ) { return ( ) } List<String>.size if ( ) { List<String>.size }
HashMap<String,String>.put HashMap<String,String>.put HashMap<String,String>.put HashMap<String,String>.put HashMap<String,String>.put
if ( String.equals ) { }
return ( String.new ) AssertionError.new
PrintStream.println for ( ) { Arrays.toString PrintStream.print Arrays.toString PrintStream.println }
return ( Class.hashCode )
if ( ) { Logger.warning return ( ) }
List<Object>.size ArrayList<Object>.size ArrayList<Object>.ensureCapacity ArrayList<Object>.addAll
if ( ) { IllegalArgumentException.new } Integer.new HashMap.get if ( ) { if ( Float.isNaN ) { Math.min Math.min Math.max Math.max } } HashMap.put
DatabaseMetaData.ownUpdatesAreVisible DatabaseMetaData.othersUpdatesAreVisible DatabaseMetaData.updatesAreDetected Statement.executeQuery ResultSet.next ResultSet.rowUpdated ResultSet.updateLong ResultSet.updateRow ResultSet.close Statement.close
if ( Set<Object>.isEmpty ) { return ( ) }
if ( ) { Runnable.run }
if ( ) { List<String>.addAll }
return ( while ( Reader.read ) { Writer.write } return ( ) )
if ( CollationKey.getSourceString String.equals ) { return ( ) } if ( CollationKey.toByteArray Arrays.equals ) { return ( ) }
Class.getMethod Class.getMethod
HashMap.new
if ( ) { String.format } if ( HashMap<String,String>.isEmpty ) { return ( ) } HashMap<String,String>.get if ( String.equals ) { return ( ) }
for ( ; List<JPanel>.size ; ) { List<JPanel>.get } JToggleButton.setEnabled
while ( String.startsWith ) { String.substring } while ( ) { while ( ) { String.indexOf if ( String.charAt ) { } } String.substring if ( String.endsWith ) { } } String.substring if ( String.endsWith ) { }
HashMap.put HashMap.put
String[].clone
List<String>.clear HashMap.new for ( Map<String,URL>.entrySet Set.iterator ; Iterator<Entry<String,URL>>.hasNext ; ) { Iterator<Entry<String,URL>>.next Entry<String,URL>.getKey Entry<String,URL>.getValue Map<String,Properties>.put URL.toExternalForm List<String>.add }
HashMap.keySet Set.toArray HashMap.clear
Thread.new Thread.start
Collections.emptyList
if ( ) { IllegalArgumentException.new }
if ( ) { Integer.valueOf }
for ( ; ; ) { Integer.toString Properties.getProperty } Properties.getProperty
return ( Properties.getProperty Integer.parseInt )
if ( ) { if ( List<>.size ) { return ( ) } List<>.iterator while ( Iterator<>.hasNext ) { Iterator<>.next Iterator<>.next if ( Object.equals ) { return ( ) } } return ( ) }
UUID.randomUUID UUID.toString UUID.randomUUID UUID.toString
if ( ) { if ( ) { ArrayList<Object>.add } } else { ArrayList<Object>.add }
if ( ) { Semaphore.release }
if ( ) { LinkedList<Object>.add return ( ) }
ArrayList<Object>.new List<Object>.add
if ( ) { IllegalStateException.new }
if ( ) { if ( ) { IOException.new } }
List<Object>.add if ( ) { if ( ) { System.arraycopy } }
if ( ) { Collections.emptyList } else { ArrayList<Object>.new Collections.unmodifiableList }
ArrayList.new for ( ) { Class<>.getCanonicalName List<String>.add } Class.getCanonicalName if ( Map<String,Method>.containsKey ) { Class.getMethod Map<String,Method>.put } return ( Map<String,Method>.get )
if ( Map<Integer,Integer>.size Map<Integer,Long>.size Map<Integer,Integer>.size Map<Integer,Integer>.size ) { } if ( Map<Integer,Integer>.keySet Map<Integer,Long>.keySet Set.equals ) { } for ( Map<Integer,Integer>.values ) { } StringBuffer.new StringBuffer.new for ( Map<Integer,Long>.keySet ) { Map<Integer,Long>.get Map<Integer,Integer>.get Map<Integer,Integer>.get if ( ) { StringBuffer.append } StringBuffer.append } StringBuffer.toString if ( StringBuffer.length ) { StringBuffer.toString }
if ( ) { IllegalArgumentException.new } if ( String.length ) { IllegalArgumentException.new }
return ( Map<Object,Object>.containsKey )
return ( ArrayList<Object>.new Collections.unmodifiableList List.iterator )
if ( ) { if ( ) { return ( Boolean.booleanValue ) } return ( String.equals ) }
Logger.log HashMap.new InetSocketAddress.new Map<Object,InetSocketAddress>.put InetSocketAddress.new Map<Object,InetSocketAddress>.put for ( Map<Object,InetSocketAddress>.keySet ) { Map<Object,InetSocketAddress>.get } Map<Object,InetSocketAddress>.keySet Set<Object>.size HashMap.new Map<Object,InetSocketAddress>.put Map<Object,InetSocketAddress>.put for ( Map<Object,InetSocketAddress>.keySet ) { Map<Object,InetSocketAddress>.get Logger.log } for ( Map<Object,InetSocketAddress>.keySet ) { } HashMap.new if ( ) { Map<Object,InetSocketAddress>.put } if ( ) { Map<Object,InetSocketAddress>.put } Map<Object,InetSocketAddress>.size
return ( List<Object>.isEmpty )
ServerSocketChannel.accept
ConcurrentMap<Thread,Semaphore>.values for ( ) { Semaphore.release Collection<Semaphore>.remove }
if ( String.startsWith ) { String.substring return ( ) } else { if ( String.startsWith ) { String.substring return ( ) } }
return ( Double.longBitsToDouble )
if ( ) { System.arraycopy if ( ) { System.arraycopy } PrintStream.println }
System.currentTimeMillis System.currentTimeMillis PrintStream.println
StringBuilder.new for ( ExecutableElement.getModifiers ) { Modifier.toString StringBuilder.append StringBuilder.append } ExecutableElement.getReturnType TypeMirror.toString StringBuilder.append StringBuilder.append ExecutableElement.toString StringBuilder.append ExecutableElement.getThrownTypes if ( List<>.isEmpty ) { StringBuilder.append for ( List<>.iterator ; Iterator<>.hasNext ; ) { Iterator<>.next TypeMirror.toString StringBuilder.append if ( Iterator<>.hasNext ) { StringBuilder.append } } } return ( StringBuilder.toString )
Double.doubleToRawLongBits
ArrayList.new for ( ) { List<Object>.add }
MessageFormat.format StringBuilder.new Integer.toString MessageFormat.format for ( ; ; ) { Thread.sleep InterruptedException.getLocalizedMessage } MessageFormat.format
if ( ) { CharSequence.toString }
PrintStream.println System.exit if ( ) { PrintStream.println System.exit } OutputStreamWriter.new
Map<String,Object>.get
if ( ) { return ( String.substring ) }
HashMap.new if ( ) { if ( ) { for ( ) { ArrayList.new for ( ) { if ( String.equalsIgnoreCase ) { List<Object>.add } } if ( ) { List<Object>.toArray Map<String,Object>.put } } } }
if ( ) { IllegalStateException.new } if ( ) { if ( ) { if ( ) { System.arraycopy } } }
String[].clone
if ( ) { String.split } else { if ( List<URI>.isEmpty ) { } } for ( ) { Map<URI,Object>.get }
if ( ) { IllegalArgumentException.new }
StringWriter.new StringWriter.new StringWriter.new
return ( Collector.of )
RuntimeException.new
return ( String.length String.substring )
Map.put
return ( BigInteger.valueOf )
if ( ) { String.replace }
return ( Collector.of )
Vector.addElement
String.split ArrayList<String>.new for ( ) { if ( String.equals ) { } List<String>.add }
Object.getClass Class.getName
System.getenv System.getProperty
if ( ) { UnsupportedOperationException.new }
if ( Character.isJavaIdentifierPart ) { return ( ) return ( ) }
if ( Vector<Object>.size ) { Vector<Object>.add }
if ( ) { IllegalArgumentException.new } if ( String.length ) { return ( String.substring ) }
return ( List.size List.toArray )
if ( ) { Error.new } if ( List<Object>.get ) { } if ( ) { ArrayList<Object>.new List<Object>.get ArrayList<Object>.add return ( ) } if ( ) { ArrayList<Object>.new List<Object>.get ArrayList<Object>.add ArrayList<Object>.add return ( ) } else { ArrayList<Object>.new List<Object>.get ArrayList<Object>.add ArrayList<Object>.add return ( ) }
if ( JScrollBar.getValue ) { }
Boolean.valueOf
while ( ) { if ( Thread.currentThread Thread.equals ) { return ( ) } }
return ( Runtime.getRuntime Runtime.availableProcessors )
if ( ) { ArrayList<Object>.new } ArrayList<Object>.add
for ( ) { if ( ) { List<Object>.add break } }
if ( ) { System.identityHashCode }
return ( Integer.intValue )
if ( ) { if ( ) { NullPointerException.new } }
StringBuilder.new StringBuilder.append StringBuilder.append StringBuilder.toString
Map<Object,Object>.get Map<Object,Object>.get if ( ) { for ( Set.iterator ; Iterator.hasNext ; ) { Iterator.next Map<Object,Object>.get } return ( ) }
if ( ) { NullPointerException.new }
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } EventListenerList.getListenerList
if ( String.equals ) { if ( ) { IllegalArgumentException.new } } else { if ( ) { IllegalArgumentException.new } }
if ( ) { Class.getSimpleName } Class.getName
System.currentTimeMillis
if ( ) { if ( ) { if ( Set<String>.equals ) { } Set<String>.addAll } } if ( ) { if ( ) { Math.min Math.max } }
String.toString Long.intValue Integer.parseInt
if ( ) { System.currentTimeMillis }
if ( ) { RuntimePermission.new SecurityManager.checkPermission } ManagementFactory.getThreadMXBean ThreadMXBean.getThreadInfo return ( ThreadInfo.getStackTrace )
return ( Integer.intValue )
HashSet.new for ( ) { if ( Set<Object>.contains ) { } }
ProcessBuilder.new ProcessBuilder.redirectErrorStream ProcessBuilder.start Process.getOutputStream OutputStreamWriter.new OutputStreamWriter.write OutputStreamWriter.flush OutputStreamWriter.close if ( ) { OutputStreamWriter.close } if ( ) { Process.waitFor Process.destroy } return ( Process.exitValue )
if ( String.startsWith String.length ) { return ( String.substring ) }
KeyStore.getInstance KeyStore.load CertificateFactory.getInstance ByteArrayInputStream.new CertificateFactory.generateCertificate KeyFactory.getInstance if ( String.isEmpty ) { EncryptedPrivateKeyInfo.new String.toCharArray PBEKeySpec.new EncryptedPrivateKeyInfo.getAlgName SecretKeyFactory.getInstance SecretKeyFactory.generateSecret EncryptedPrivateKeyInfo.getKeySpec } else { PKCS8EncodedKeySpec.new } KeyFactory.generatePrivate String.toCharArray KeyStore.setKeyEntry FileOutputStream.new String.toCharArray KeyStore.store Exception.getMessage PrintStream.println Exception.printStackTrace
DocumentBuilderFactory.newInstance DocumentBuilderFactory.newDocumentBuilder DocumentBuilder.parse Document.getDocumentElement for ( Element.getElementsByTagName ) { Element.getElementsByTagName NodeList.item Element.getTextContent File.getParentFile File.new for ( Element.getElementsByTagName ) { } }
if ( String.equals ) { if ( String.equals ) { return ( ) } } ParseException.new
return ( DateFormat.format )
CopyOnWriteArrayList<Object>.add
for ( ) { String.replace }
return ( Modifier.isFinal )
Thread.sleep for ( ; ; ) { Map.get Map.get Map.get Map.get for ( ; ; ) { if ( Map.containsKey ) { Map.get Map.get Map.get Map.get if ( Map.containsKey ) { Map.get Map.get } } else { Map.containsKey Map.containsKey Map.containsKey } } }
if ( ) { Reader.close }
return ( String.equals )
return ( WeakHashMap.hashCode )
Thread.new Thread.setDaemon Thread.start
Map<String,>.get HashMap<String,Integer>.new for ( ; List<String>.size ; ) { List<String>.get Map<String,Integer>.put } List<List<Object>>.size ArrayList<Map<String,Object>>.new for ( ) { HashMap<String,Object>.new for ( Map<String,Integer>.entrySet ) { Entry<String,Integer>.getKey Entry<String,Integer>.getValue List<Object>.get Map<String,Object>.put } List<Map<String,Object>>.add }
String.split for ( ) { String.split if ( String.equals ) { if ( String.equals ) { if ( String.equals ) { if ( String.equals ) { if ( String.equals ) { if ( String.contains ) { } } } } } } }
Exception.printStackTrace if ( ) { if ( ) { Class.hashCode } else { Class.hashCode } } else { if ( ) { RuntimeException.new } }
ThreadLocal<Map<Object,Set<Object>>>.get if ( Set<Object>.add ) { return ( ) } Set<Object>.remove
if ( ArrayList<Object>.size ArrayList<Object>.get ) { return ( ) } return ( ArrayList<Object>.size ArrayList<Object>.get )
return ( String.equals String.equals String.equals String.equals )
System.arraycopy
if ( List<Object>.size ) { List<Object>.add }
BasicButtonUI.createUI BorderFactory.createEmptyBorder MouseAdapter.new
for ( ) { if ( Entry<String,Object>.getValue ) { return ( Entry<String,Object>.getValue ) } }
PrintWriter.flush
if ( ) { if ( ) { Number.getClass } } if ( ) { Number.longValue }
if ( String.equals ) { IllegalArgumentException.new } if ( ) { IllegalStateException.new } if ( ) { if ( String.equals ) { return ( ) } }
if ( ) { IllegalStateException.new }
if ( ) { if ( ) { if ( ) { IllegalArgumentException.new } } }
return ( System.nanoTime )
if ( ) { IllegalArgumentException.new } IllegalStateException.new
JTable.getModel JTable.getSelectionModel ListSelectionModel.addListSelectionListener DefaultTableModel.addTableModelListener TableRowSorter<TableModel>.new JTable.setRowSorter TableRowSorter<TableModel>.setRowFilter JTextField.getDocument Document.addDocumentListener DefaultTableModel.getRowCount Math.min JTable.getRowHeight if ( ) { JTable.getPreferredSize Dimension.new JTable.setPreferredScrollableViewportSize } JTable.addMouseListener
List<Object>.add
if ( ) { Exception.printStackTrace }
JFileChooser.rescanCurrentDirectory JFileChooser.showOpenDialog if ( ) { JFileChooser.getSelectedFile File.getCanonicalPath JTextField.setText }
Object.toString
Toolkit.getDefaultToolkit Class.getResource Toolkit.createImage ImageIcon.new
return ( Collections.unmodifiableList )
String.valueOf String.valueOf
if ( ByteBuffer.hasRemaining ) { ByteBuffer.position ByteBuffer.limit } ByteBuffer.put
if ( ) { IllegalArgumentException.new }
Class.getResource URL.toExternalForm
String.lastIndexOf String.lastIndexOf String.substring String.lastIndexOf String.lastIndexOf String.substring String.isEmpty String.replace
for ( ) { Switch ( ) { case : String.valueOf break case : String.valueOf break } }
if ( ) { Integer.valueOf } else { Integer.valueOf } if ( ) { if ( Integer.intValue ) { if ( Integer.intValue ) { Integer.doubleValue Integer.doubleValue } } }
if ( ) { IllegalStateException.new }
if ( ) { Map.remove } else { Map.put }
for ( ; ; ) { for ( ; ArrayList<Object>.size ; ) { ArrayList<Object>.get } if ( ) { for ( ; ArrayList<Object>.size ; ) { ArrayList<Object>.get ArrayList<Object>.get } } }
LinkedList<Object>.new for ( Map<String,Object>.values ) { if ( ) { List<Object>.add } } List<Object>.size List<Object>.toArray
Integer.new Integer.new if ( String.equals ) { if ( String.equals ) { if ( String.equals ) { } } }
Switch ( ) { default : IllegalArgumentException.new }
for ( ; ; ) { if ( ) { return ( StringBuffer.append ) } } return ( StringBuffer.append )
String.valueOf String.valueOf
return ( Writer.checkError )
return ( Calendar.get )
return ( Future<String>.get )
if ( ) { Locale.getDefault }
if ( ) { IllegalArgumentException.new }
List<String>.add
return ( SimpleDateFormat.new SimpleDateFormat.format )
String.indexOf return ( String.substring String.substring )
StringBuilder.new StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append return ( StringBuilder.toString )
AtomicReference<DocumentBuilder>.get DocumentBuilderFactory.newDocumentBuilder if ( AtomicReference<DocumentBuilder>.compareAndSet ) { return ( AtomicReference<DocumentBuilder>.get ) }
TreeSet<Object>.new Collections.addAll
return ( Arrays.hashCode )
Class.new Class.new
for ( ; String.length ; ) { if ( String.charAt String.indexOf ) { break } }
HashMap.new Map.put Map.put
ArrayList.new HashSet.new HashSet.new List<Object>.clear for ( ) { if ( ) { if ( HashSet<String>.contains HashSet<String>.contains ) { List<Object>.add } } }
if ( ) { NullPointerException.new }
return ( String.equals )
if ( Map<Integer,Object>.containsKey ) { return ( Map<Integer,Object>.get ) } Map<Integer,Object>.put
List<Runnable>.size List<Runnable>.remove if ( ) { IllegalArgumentException.new }
if ( ) { if ( String.equals ) { return ( ) } }
return ( Collections.singletonMap )
if ( ) { String.toLowerCase } Map<String,String>.get if ( ) { String.trim }
return ( Map<String,Object>.get )
Class.getResourceAsStream PrivilegedExceptionAction.new AccessController.doPrivileged PrivilegedActionException.getException Exception.getMessage
StringBuffer.new LinkedList.new
if ( ) { RuntimeException.new } Map<Object,Object<Object>>.put
List<Object>.get List<Object>.size
if ( List<String>.size ) { } return ( List<String>.get )
StringReader.new ArrayList<String>.new for ( ; List.size ; ) { List.get for ( ; ; ) { List<String>.add } } return ( List<String>.size List<String>.toArray )
for ( ) { if ( ) { PrintStream.println } } if ( ) { PrintStream.println }
if ( ) { if ( String.equalsIgnoreCase ) { } if ( String.equalsIgnoreCase ) { } if ( ) { TimeUnit.toMillis Long.new Long.intValue } if ( ) { TimeUnit.toMillis Long.new Long.intValue } if ( ) { TimeUnit.toMillis Long.new Long.intValue } ArrayList<Object>.new UUID.randomUUID UUID.toString ArrayList<Object>.add }
if ( Map<String,Object>.isEmpty ) { return ( ) } for ( Map<String,Object>.entrySet ) { Entry<String,Object>.getKey Map<String,List<Object>>.get if ( ) { ArrayList.new Map<String,List<Object>>.put } Entry<String,Object>.getValue List<Object>.add }
Math.max
if ( String.startsWith String.startsWith ) { }
StringBuilder.new return ( StringBuilder.toString )
if ( ) { ArrayList<Object>.new }
String.trim StringTokenizer.new if ( StringTokenizer.countTokens ) { IllegalArgumentException.new } StringTokenizer.nextToken Long.parseLong StringTokenizer.nextToken Long.parseLong StringTokenizer.nextToken Long.parseLong StringTokenizer.nextToken Long.parseLong StringTokenizer.nextToken Long.parseLong return ( UUID.new )
if ( ) { String.format }
IOException.toString Logger.log
if ( ) { IllegalArgumentException.new }
Collection<>.size Math.max HashMap.new
if ( ) { ArrayList<String>.new if ( ) { StringTokenizer.new while ( StringTokenizer.hasMoreTokens ) { StringTokenizer.nextToken List<String>.add } } Integer.parseInt }
IOException.new
return ( System.nanoTime )
return ( Double.toString )
if ( ) { NullPointerException.new } if ( ) { IndexOutOfBoundsException.new }
Map<String,Object>.remove
List<Object>.remove
if ( ) { if ( ) { IllegalArgumentException.new } }
Math.random
if ( ) { if ( ) { Vector.new } }
List<Object>.indexOf
if ( List<Object>.isEmpty ) { }
HashMap<Object,List<Object>>.values for ( Collection<List<Object>>.iterator ; Iterator<List<Object>>.hasNext ; ) { Iterator<List<Object>>.next for ( List<Object>.iterator ; Iterator<Object>.hasNext ; ) { Iterator<Object>.next Preferences.put } } Preferences.flush Class.getName
ArrayList<Object>.clear ArrayList<Object>.ensureCapacity for ( ; ; ) { if ( ) { ArrayList<Object>.size ArrayList<Object>.add } }
if ( ) { if ( ) { if ( List<Object>.size ArrayList<Object>.size List<Object>.containsAll ) { ArrayList<Object>.size for ( ; ; ) { ArrayList<Object>.get } for ( ArrayList<Object>.size ; ; ) { ArrayList<Object>.get } } } }
Statement.executeUpdate Statement.executeUpdate Statement.executeUpdate Statement.executeQuery ResultSet.next ResultSet.getInt ResultSet.getInt ResultSet.next ResultSet.getInt ResultSet.getInt ResultSet.close Statement.executeQuery ResultSet.next ResultSet.updateLong ResultSet.updateRow ResultSet.next ResultSet.updateLong ResultSet.updateRow ResultSet.close Statement.executeQuery while ( ResultSet.next ) { ResultSet.getInt ResultSet.getInt } ResultSet.close Statement.executeUpdate Statement.close
Inet6Address.getAddress
ArrayList<Object>.new for ( ) { if ( ) { ArrayList<Object>.add } }
PushbackInputStream.read
IOException.new
BAD_OPERATION.new BAD_OPERATION.initCause
JTextField.setText
Long.new
SimpleTimeZone.new SimpleDateFormat.new SimpleDateFormat.setTimeZone SimpleDateFormat.format String.substring Integer.parseInt if ( ) { String.substring }
QName.new if ( ) { QName.new }
Switch ( ) { case : return ( ResultSet.getTimestamp ) case : return ( ResultSet.getTime ) case : return ( ResultSet.getDate ) }
if ( ) { IllegalArgumentException.new }
Compiler.new return ( Compiler.compile )
GridBagLayout.new GridBagConstraints.new JLabel.new JLabel.new
if ( ) { String.new String.length }
Properties.new Class.getResourceAsStream Properties.load InputStream.close Error.new
UnsupportedOperationException.new
Map<Object,Object>.get if ( ) { Map<Object,Object>.get if ( ) { Map<Object,Object>.put } } if ( ) { if ( ) { if ( ) { Map<Object,Object>.put } } }
Boolean.valueOf
CharSequence.toString
return ( String.equals )
UnsupportedOperationException.new
if ( OpenType<Object>.isValue ) { OpenDataException.new } if ( ) { OpenDataException.new } if ( ) { OpenDataException.new } if ( ) { HashSet<Object>.new for ( ; ; ) { if ( OpenType<Object>.isValue ) { OpenDataException.new } Set<Object>.add } if ( Set<Object>.contains ) { OpenDataException.new } Collections.unmodifiableSet }
Properties.new Properties.put Properties.put Properties.put File.new FileOutputStream.new Properties.store
StringBuilder.new StringBuilder.append return ( StringBuilder.toString )
if ( Properties.getProperty ) { return ( ) } return ( Properties.getProperty Integer.parseInt )
List<String>.add List<String[]>.add List<Object>.add
ArrayList.new String.toCharArray if ( String.equals ) { return ( ) } if ( String.startsWith String.startsWith ) { } for ( ; ; ) { if ( ) { String.substring if ( String.equals ) { } List.add } } String.length String.substring List.add Collections.reverse
if ( ) { String.split String.trim String.trim String.trim String.trim }
if ( Stack.empty ) { return ( Stack.pop Integer.intValue ) }
if ( String.isEmpty ) { return ( Field.get ) }
if ( ) { if ( ) { if ( String.compareTo ) { } } }
ResourceBundle.getString
LinkedBlockingQueue<Object>.put
Properties.new Properties.put ORB.init POAHelper.narrow POA.the_POAManager POAManager.activate Tie.setTarget POA.servant_to_reference Exception.printStackTrace Thread.new System.currentTimeMillis while ( System.currentTimeMillis ) { Thread.sleep } Exception.printStackTrace Runtime.getRuntime if ( ) { RemoteException.printStackTrace } Thread.new Runtime.addShutdownHook
return ( AtomicReference<Object>.get )
return ( if ( ) { if ( ) { if ( ) { ArrayList<Object>.add } } return ( ) } )
FileChannel.lock
HashMap.new for ( Locale.getDefault ) { Map<String,Object>.put }
LinkedList<String>.new Connection.prepareStatement PreparedStatement.setInt while ( ResultSet.next ) { ResultSet.getString String.toLowerCase List<String>.add } if ( ) { PreparedStatement.close } if ( ) { ResultSet.close }
X509CRLSelector.new X509CRLSelector.match
UUID.toString
Field.getType if ( Field.getGenericType Class<>.equals ) { } Field.getGenericType if ( ) { ParameterizedType.getActualTypeArguments } Field.getAnnotation Field.getName String.replace if ( String.startsWith ) { String.substring } String.substring String.toUpperCase String.substring for ( Field.getDeclaringClass Class.getMethods ) { if ( Method.getName String.equals ) { if ( Method.getName String.equals ) { } } }
JPopupMenu.addSeparator
for ( ; ; ) { if ( ) { if ( ) { if ( ) { Double.parseDouble } else { if ( ) { Double.parseDouble } else { if ( ) { String.toLowerCase } } } } } } String.replace String.replace Date.new Exception.getMessage
if ( ) { UnsupportedOperationException.new }
System.getProperty UnsupportedOperationException.new
System.currentTimeMillis DateFormat.format
ByteBuffer.getShort ByteBuffer.getInt ByteBuffer.getInt if ( ) { AssertionError.new } for ( ; ; ) { ByteBuffer.getShort }
return ( WeakReference<Object>.get )
InputStreamReader.new
if ( ) { Exception.new } if ( ) { Exception.new }
if ( ) { LinkedHashMap.new } else { TreeMap.new } List<Object>.forEach
HashMap<Object,Object>.new List<Object>.add List<Object>.add
if ( ) { Thread.getDefaultUncaughtExceptionHandler } Thread.getName if ( ) { UncaughtExceptionHandler.uncaughtException } UncaughtExceptionHandler.new Thread.setDefaultUncaughtExceptionHandler
return ( NavigableMap<Object,String>.subMap TreeSet<Object>.new )
List<String>.size if ( ) { for ( ; ; ) { List<String>.get } }
return ( ScheduledThreadPoolExecutor.new )
return ( HashMap<String,Object>.keySet )
Date.new ArrayList.new List<Object>.add List<Object>.add List<Object>.add
return ( Optional<Object>.map Stream.empty )
HashSet.new for ( ) { Set<Object>.add }
return ( Collections.unmodifiableList )
LinkedList.new LinkedList.new for ( ) { if ( ) { LinkedList<Object>.add } else { LinkedList<Object>.add } } LinkedList<Object>.addAll while ( LinkedList<Object>.isEmpty ) { LinkedList<Object>.peek LinkedList<Object>.size Math.min if ( ) { LinkedList<Object>.pop } } if ( LinkedList<Object>.isEmpty ) { }
if ( Set<Integer>.contains ) { return ( ) } for ( ) { if ( Integer.intValue ) { return ( ) } }
StringBuilder.new for ( ) { StringBuilder.append StringBuilder.append }
return ( JDialog.new JDialog.setDefaultCloseOperation JDialog.getContentPane BorderLayout.new Container.setLayout JDialog.getContentPane Container.add PrintStream.println Exception.printStackTrace JDialog.setSize JDialog.setLocationRelativeTo JDialog.setVisible ActionListener.new )
StringTokenizer.new ArrayList.new while ( StringTokenizer.hasMoreTokens ) { StringTokenizer.nextToken String.indexOf String.substring String.indexOf String.indexOf String.substring Integer.parseInt for ( ; ; ) { ArrayList.add } }
if ( ) { Integer.valueOf }
Arrays.asList
if ( ) { ArrayList<Object>.remove }
String.indexOf String.indexOf String.substring String.replace StringTokenizer.new StringTokenizer.countTokens while ( StringTokenizer.hasMoreTokens ) { StringTokenizer.nextToken String.trim String.new }
String.getBytes ByteArrayInputStream.new UnsupportedEncodingException.printStackTrace
if ( ) { return ( ) Throwable.new }
if ( ) { DecimalFormat.clone }
if ( ) { return ( String.new ) }
if ( ) { ArrayList<File>.add }
System.currentTimeMillis
ArrayList<Object>.new ArrayList<Object>.new
ArrayList.new for ( ; ; ) { if ( ) { List.add } } return ( List.size List.toArray )
TimerImpl.cancel
return ( String.length String.charAt )
HashSet.new for ( ) { for ( ) { HashSet<Object>.add } } for ( ) { for ( ) { HashSet<Object>.add } for ( ) { HashSet<Object>.add } }
List<Object>.remove
String.toLowerCase Map<String,Object>.remove
StringBuilder.new if ( ) { StringBuilder.append } else { StringBuilder.append } StringBuilder.append for ( ; ; ) { StringBuilder.append StringBuilder.append } StringBuilder.append return ( StringBuilder.toString )
Locale.getLanguage Locale.getCountry Locale.getVariant
if ( ) { Set<Object>.addAll }
if ( ) { Integer.parseInt }
Math.min return ( BigDecimal.valueOf BigDecimal.valueOf BigDecimal.multiply BigDecimal.valueOf BigDecimal.divide BigDecimal.intValue )
if ( ) { return ( String.new ) } else { return ( String.new String.new ) }
Class<>.getAnnotation
StringBuilder.new StringBuilder.append for ( ; ; ) { StringBuilder.append } StringBuilder.append StringBuilder.append return ( StringBuilder.toString )
LinkedHashSet<File>.new for ( ) { File.new Set<File>.add }
String.valueOf
if ( String.equals ) { return ( ) } for ( Map<String,String>.keySet ) { Map<String,String>.get }
if ( Collection<Object>.isEmpty ) { return ( ) } Collection<Object>.size ArrayList<Object>.new for ( ) { ArrayList<Object>.new ArrayList<Object>.add ArrayList<Object>.add ArrayList<Object>.new for ( ) { ArrayList<Object>.add } ArrayList<Object>.add ArrayList<Object>.add }
ReentrantLock.lock Condition.signalAll ReentrantLock.unlock
ArrayList<Object>.clear
for ( HashMap<String,Object>.values ) { }
for ( Class.getMethods ) { if ( Method.getDeclaringClass Class.equals Method.getModifiers Modifier.isFinal ) { continue } Method.toGenericString Method.getDeclaringClass }
Boolean.valueOf Boolean.valueOf
Double.doubleToLongBits
Map<Object,Object>.get if ( Map<Object,Object>.get ) { RuntimeException.new } Map<Object,Object>.put
return ( StringBuilder.toString )
Set<Object>.add
if ( String.isEmpty ) { Class.getClassLoader ClassLoader.loadClass Class<Object>.newInstance Exception.getMessage }
Hashtable.new Vector.new
Properties.getProperty
if ( ) { IllegalArgumentException.new } return ( String.matches )
Integer.valueOf Map<String,Object>.put Map<String,Object>.put Map<String,Object>.put Map<String,Object>.put Map<String,Object>.put Map<String,Object>.put
if ( ) { return ( Collections.emptyEnumeration ) } ArrayList<String>.new ArrayList<String>.add return ( Collections.enumeration )
Rectangle.new
if ( Map<String,>.containsKey ) { Map<String,>.get return ( ) } if ( Map<String,>.containsKey ) { Map<String,>.get for ( Map<String,Object>.keySet ) { Map<String,Object>.get Object.toString } } if ( Map<String,>.containsKey ) { }
Map<Long,Object>.get if ( ) { Map<Long,Object>.put }
Properties.new Properties.setProperty Calendar.getInstance Calendar.getTime
LinkedHashSet<Object>.new if ( ) { for ( ) { LinkedHashSet<Object>.add } }
return ( List<Integer>.get )
return ( Integer.intValue )
return ( Observable.toFlowable )
if ( ) { for ( ) { if ( String.equals ) { } } }
if ( ) { PrintStream.println return ( ) } Object.getClass do { for ( Class.getDeclaredFields ) { if ( Field.getModifiers ) { continue } Field.setAccessible Field.getName if ( ) { Object.toString } Field.getType Field.getName PrintStream.println } } while ( Class.getSuperclass ) ;
ArrayList<Object>.new HashSet<String>.new if ( ) { if ( ) { for ( ) { if ( ) { List<Object>.add if ( ) { Set<String>.add } } } } for ( Map<String,Class<Object>>.entrySet ) { Entry<String,Class<Object>>.getKey if ( Set<String>.contains ) { Entry<String,Class<Object>>.getValue List<Object>.add Set<String>.add } } }
OutputStream.flush
if ( String.charAt ) { if ( String.startsWith ) { } } String.length Math.pow String.substring String.substring String.substring Integer.parseInt Integer.parseInt Integer.parseInt
if ( ) { return ( Driver.getMinorVersion ) }
return ( Character.new )
HashSet.new Collection<Object>.addAll for ( ) { Collection<Object>.add } for ( Map<Class<Object>,Object>.values ) { for ( ) { Collection<Object>.add } } Collection<Object>.add
StringBuilder.new for ( ; ; ) { if ( ) { StringBuilder.toString break } else { Character.toString StringBuilder.append Character.toString } }
return ( EnumSet<Object>.contains )
Double.parseDouble Double.parseDouble if ( ) { if ( ) { Math.toRadians Math.cos } } for ( ; ; ) { for ( ; ; ) { if ( ) { if ( ) { Math.atan Math.abs Math.abs } } } } Date.new
if ( Logger.isLoggable ) { Throwable.toString Logger.log }
if ( ) { UnsupportedOperationException.new }
HashSet<Object>.new Collection<Object>.iterator while ( Iterator<Object>.hasNext ) { Iterator<Object>.next if ( ) { Collection<Object>.add } }
return ( ArrayList<Object>.size )
if ( ) { File.getAbsolutePath File.getAbsolutePath String.length String.substring return ( File.new ) }
ArrayList<String>.new File.new if ( File.getAbsolutePath ) { FileReader.new BufferedReader.new do { BufferedReader.readLine if ( ) { List<String>.add } } while ( ) ; }
return ( String.valueOf )
return ( String.valueOf )
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } if ( ) { NullPointerException.new }
XAResource.rollback
ExecutorService.submit if ( ) { LinkedList<Object>.addFirst }
UnsupportedOperationException.new
String.getBytes
if ( Thread.interrupted ) { InterruptedException.new }
File.new if ( File.exists ) { if ( File.isDirectory ) { File.list for ( ; Array.getLength ; ) { File.new File.getCanonicalPath } } if ( File.delete ) { } } Exception.printStackTrace
RuntimeException.new Exception.new
return ( Hashtable.get )
ArrayList<Integer>.new List<Integer>.addAll List<Integer>.addAll
if ( ) { if ( String.isEmpty ) { return ( ) } if ( String.isEmpty ) { return ( ) } if ( Long.longValue Long.longValue ) { } }
Properties.new for ( Properties.entrySet ) { if ( Entry<String,String>.getKey String.startsWith Entry<String,String>.getKey String.startsWith ) { Entry<String,String>.getKey if ( String.startsWith ) { String.substring } if ( Entry<String,String>.getValue Entry<String,String>.getValue String.trim String.equals ) { if ( String.toLowerCase String.contains ) { String.new Map<String,String>.put } else { Map<String,String>.put } } } }
IdUniquenessPolicyValue.value
ArrayList.new List<Object>.add if ( ) { List<Object>.add } if ( ) { if ( ) { List<Object>.add } List<Object>.add }
return ( ArrayList.new Collections.unmodifiableList )
return ( System.nanoTime )
POA.servant_to_id POA.deactivate_object
return ( System.getProperty )
InternalError.new
String.getBytes if ( ) { return ( String.new ) UnsupportedEncodingException.printStackTrace return ( ) }
if ( ) { if ( ) { File.getAbsolutePath } if ( File.isDirectory ) { Collection.add } else { Collection.addAll Collection.remove } } if ( Collection.isEmpty ) { Collection.add } if ( ) { Collection.toString }
return ( Calendar.getTimeInMillis Long.toString )
if ( Class<>.isAnnotation ) { for ( ) { if ( String.equals ) { return ( ) } } return ( ) }
if ( ) { IllegalArgumentException.new }
return ( ArrayList<Object>.new )
if ( ) { Collections.emptyList }
JDialog.getSize JFrame.getSize JFrame.getX JFrame.getY Math.min Math.max Math.min Math.max JDialog.setBounds
ArrayList<Object>.get if ( ) { ArrayList.new } else { ArrayList<Object>.clear } if ( ) { ArrayList<Object>.addAll } for ( ; ; ) { ArrayList<Object>.get ArrayList<Boolean>.get } ArrayList<Object>.clear for ( ; ; ) { ArrayList<Object>.get ArrayList<Boolean>.get }
if ( ) { IllegalArgumentException.new }
if ( ) { NoSuchElementException.new }
if ( ) { IllegalArgumentException.new }
if ( Map<Object,GlyphVector>.containsKey ) { Map<Object,GlyphVector>.get } else { String.toCharArray Font.createGlyphVector Map<Object,GlyphVector>.put }
ArrayList.new if ( ) { String.format } if ( ) { String.format List<String>.add } if ( ) { List<String>.add }
Map<String,Map<String,String>>.computeIfAbsent Map<String,String>.put
if ( BufferedImage.getType ) { RenderedImage.getWidth RenderedImage.getHeight Dimension.new Graphics2D.drawRenderedImage Graphics2D.dispose }
if ( UIManager.getUI ) { return ( JComponent.getInputMap InputMap.getParent ) }
if ( ) { Math.max if ( ) { Math.round Math.round } }
Exception.getMessage
StringReader.new
Map<String,String>.put
List.clear
if ( String.length ) { }
for ( ; ArrayList<Object>.size ; ) { if ( ArrayList<Object>.get ) { return ( ) } }
List<Object>.size
Currency.getInstance Currency.getInstance Currency.getInstance Locale.setDefault Currency.getSymbol Currency.getSymbol Currency.getSymbol Locale.new Locale.setDefault Currency.getSymbol Currency.getSymbol Currency.getSymbol Locale.new Locale.setDefault Currency.getSymbol Currency.getSymbol Currency.getSymbol
HashSet<Object>.new while ( BitSet.nextSetBit ) { BitSet.clear }
while ( ) { if ( ) { IllegalStateException.new } }
File.new File.getAbsolutePath IntStream.forEach if ( ) { File.new Collectors.toList }
StringReader.new
ByteBuffer.getInt
InputStream.available ByteArrayOutputStream.new return ( ByteArrayOutputStream.toByteArray )
HashMap<String,Object>.new for ( Map<String,Map<String,Map>>.entrySet ) { Entry<String,Map<String,Map>>.getKey for ( Entry<String,Map<String,Map>>.getValue Map<String,Map>.entrySet ) { Entry<String,Map>.getKey Entry<String,Map>.getValue Map<String,List<String>>.get Map<String,List<String>>.get for ( ) { if ( Map<String,Object>.containsValue ) { } Map<String,Object>.put } } }
if ( String.length ) { return ( ) } String.length StringBuilder.new if ( String.charAt ) { StringBuilder.append } StringBuilder.append while ( StringBuilder.length ) { if ( StringBuilder.charAt ) { } }
if ( ) { Object.toString }
TreeSet<Object>.new
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } if ( ) { Runnable.run return ( ) }
if ( ) { IOException.new }
Object.getMessage PrintStream.println Object.toString PrintStream.println Exception.toString PrintStream.println
if ( Class<>.getPackage Package.getName String.startsWith ) { return ( Class<>.getPackage Package.getName String.length String.substring ) }
StringBuilder.new
ArrayList.new
if ( ) { if ( String.toLowerCase String.equals ) { if ( String.toLowerCase String.equals ) { if ( String.toLowerCase String.equals ) { } } } } Map<Object,Object>.keySet ArrayList.new if ( ) { Collections.sort } else { if ( ) { Collections.sort Collections.reverse } }
if ( ) { Set<Object>.size }
while ( Iterator<Object>.hasNext ) { Iterator<Object>.next if ( Double.isNaN ) { if ( Double.isInfinite ) { if ( Double.isNaN Double.isInfinite ) { if ( ) { if ( ) { if ( Double.isInfinite Double.isNaN ) { } Math.sqrt } } } } } }
return ( Pattern.compile Pattern.matcher Matcher.find )
Exception.getMessage Exception.getMessage Exception.getMessage
Math.min Math.min ByteBuffer.allocate Properties.new Integer.toString Properties.setProperty Integer.toString Properties.setProperty Integer.toString Properties.setProperty Integer.toString Properties.setProperty Integer.toString Properties.setProperty Integer.toString Properties.setProperty FileOutputStream.new Properties.storeToXML IOException.getMessage
if ( ) { IllegalArgumentException.new }
StringBuilder.new for ( ) { String.indexOf String.substring String.indexOf String.length String.substring Pattern.compile return ( ) return ( ) } if ( ) { for ( ) { if ( String.toLowerCase String.toLowerCase String.contains ) { String.toLowerCase while ( String.length String.toLowerCase String.contains ) { String.toLowerCase String.indexOf String.length String.length String.substring } } } }
return ( List<Object>.get )
for ( ) { Switch ( ) { case : String.length break case : String.length break case : Math.max break } } Math.max
if ( ) { IllegalStateException.new }
if ( ) { IllegalStateException.new }
ArrayList.new Integer.intValue List.iterator while ( Iterator.hasNext ) { Iterator.next List<Object>.add }
if ( ) { PrintStream.println }
Math.min Math.max
if ( ) { if ( List<Object>.isEmpty ) { } } if ( ) { if ( ) { Collections.sort Collections.unmodifiableList } }
Executors.defaultThreadFactory
return ( List<Object>.get )
System.currentTimeMillis System.currentTimeMillis for ( ; ; ) { if ( ) { if ( String.equals ) { if ( System.currentTimeMillis ) { break } } } if ( ) { System.currentTimeMillis if ( ) { Thread.sleep } if ( ) { Math.min } System.currentTimeMillis } }
if ( String.length ) { String.charAt }
Math.round if ( ) { CharSequence.charAt }
if ( ) { String.trim if ( String.length ) { } } if ( ) { String.trim String.toUpperCase if ( String.equals ) { } if ( String.equals ) { } if ( String.equals ) { } if ( String.equals ) { } if ( String.equals ) { } }
StringBuilder.new Class.getSimpleName StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append if ( ) { StringBuilder.append StringBuilder.append } else { StringBuilder.append StringBuilder.append } StringBuilder.append StringBuilder.append return ( StringBuilder.toString )
if ( ) { IllegalArgumentException.new } List<Object>.indexOf List<Object>.indexOf if ( List<Object>.remove ) { if ( ) { List<Object>.add } else { List<Object>.add } } if ( List<Object>.remove ) { if ( List<Object>.size ) { List<Object>.add } else { List<Object>.add } }
if ( ) { return ( Constructor.newInstance ) } return ( Constructor.newInstance )
if ( ) { SecurityException.new } if ( ) { Element.setAttribute } else { Element.setAttribute }
if ( String.length ) { }
return ( SocketFactory.createSocket )
File.new FileReader.new File.toString BufferedReader.new BufferedReader.readLine BufferedReader.close FileReader.close
Vector.iterator while ( Iterator.hasNext ) { Iterator.next ComponentUI.installUI }
if ( ) { IllegalArgumentException.new } Connection.getMetaData if ( ) { Connection.createStatement StringBuilder.new StringBuilder.append StringBuilder.toString Statement.execute Statement.close } else { if ( ) { IllegalArgumentException.new } } if ( ) { IllegalStateException.new } Connection.getMetaData Connection.createStatement Statement.close
return ( Socket.new )
if ( Map<Object,Object>.containsKey ) { Map<Object,Object>.put if ( List<String>.contains ) { } }
return ( List<Object>.get )
for ( ) { if ( ) { NameCallback.setName } else { if ( ) { PasswordCallback.setPassword } else { UnsupportedCallbackException.new } } }
SocketImpl.sendUrgentData
ArrayList<Object>.new for ( ) { if ( ) { ArrayList<Object>.add } }
if ( ) { if ( ) { Object.getClass Class.toString IllegalArgumentException.new } }
return ( Constructor<Object>.isAnnotationPresent )
Map<String,String>.put if ( Map<String,String>.containsKey Map<String,String>.get ) { Map<String,String>.put } if ( String.equals ) { }
Random.new for ( ; ; ) { Random.nextFloat Random.nextFloat Random.nextFloat Random.nextInt Random.nextInt Random.nextInt }
if ( ) { for ( ; ArrayList<Object>.size ; ) { if ( ) { ArrayList<Object>.get } } }
Arrays.toString Logger.fine Method.getName Logger.fine for ( ) { Logger.fine } return ( Method.invoke ) Logger.log if ( ) { RuntimeException.new } Logger.log
HashMap<String,Object>.new return ( Map<String,Object>.values Map<String,Object>.size )
if ( ) { ArrayList<Object>.new }
if ( ) { OutputStream.write }
StringBuffer.new for ( ArrayList.iterator ; Iterator.hasNext ; ) { Iterator.next StringBuffer.append } return ( StringBuffer.toString )
if ( ) { Map<String,String>.get Map<String,String>.get Map<String,String>.get }
for ( ) { if ( String.startsWith ) { continue } if ( String.contains ) { return ( ) } String.split Integer.parseInt if ( ) { Integer.parseInt Integer.parseInt if ( ) { String.format continue } } String.format }
if ( String.equals ) { return ( ) }
ByteBuffer.slice ByteBuffer.position ByteBuffer.position
if ( String.equals ) { return ( ) }
return ( Long.toString )
System.currentTimeMillis
if ( ) { return ( Arrays.equals ) }
HashMap<Integer,Integer>.new HashSet<Integer>.new while ( Iterable<Object>.iterator ) { Iterable<Object>.iterator }
if ( ) { IllegalArgumentException.new } if ( ) { HashSet<Object>.new } Set<Object>.add
if ( String.toLowerCase String.endsWith ) { String.length String.substring }
ArrayList<Object>.new for ( ) { ArrayList<Object>.add }
if ( ) { IllegalArgumentException.new } List.iterator List.size List.listIterator
InputStream.read if ( ) { Checksum.update }
return ( Math.random )
if ( ) { Integer.valueOf }
if ( Properties.getProperty ) { Properties.put } if ( Properties.getProperty ) { Properties.put } for ( Map<String,String>.keySet ) { if ( Properties.getProperty ) { Map<String,String>.get if ( ) { Properties.getProperty if ( ) { Properties.get Properties.put } } } }
return ( MetalToolBarUI.new )
if ( ) { IndexOutOfBoundsException.new }
return ( if ( Stack<Object>.isEmpty ) { return ( Stack<Object>.peek Class<>.isInstance ) } )
if ( ) { if ( ) { NullPointerException.new } }
ByteArrayOutputStream.new ByteArrayOutputStream.flush return ( ByteArrayOutputStream.toByteArray ByteArrayInputStream.new )
ArrayList<Object>.new for ( ; ; ) { ByteArrayOutputStream.new ByteArrayOutputStream.flush ByteArrayOutputStream.toByteArray ByteArrayInputStream.new Collection<Object>.add }
if ( ) { IllegalArgumentException.new }
Map<String,String>.putAll
return ( ArrayList<Object>.new )
if ( ) { IllegalStateException.new }
if ( ) { ArrayList<Object>.new }
JTable.getColumnModel
if ( ) { Throwable.printStackTrace }
if ( ) { return ( Collections.emptyList ) } Callable<Object>.new if ( ) { if ( ) { if ( ) { return ( Collections.singletonList ) } } } return ( Collections.emptyList )
JPanel.new JLabel.new BoxLayout.new JPanel.setLayout JPanel.add for ( ; ; ) { JPanel.add } BorderLayout.new JPanel.new JPanel.add JPanel.add
if ( ) { if ( ) { if ( ) { PrintStream.println PrintStream.println } } else { if ( ) { PrintStream.println PrintStream.println } } }
ByteBuffer.wrap ByteBuffer.get for ( ; ; ) { ByteBuffer.get ByteBuffer.getShort ByteBuffer.get CertificateFactory.getInstance ByteArrayInputStream.new CertificateFactory.generateCertificate HashMap<String,X509Certificate>.put CertificateException.printStackTrace }
if ( ObjectInputStream.readBoolean ) { return ( ) } ObjectInputStream.readBoolean ObjectInputStream.readObject ObjectInputStream.readObject if ( ) { return ( Class<>.getMethod ) } else { return ( Class<>.getConstructor ) } IOException.new
RandomAccessFile.readFully
Date.new Date.new Date.new Date.equals Date.equals
ZipFile.new for ( ZipFile.entries ; Enumeration.hasMoreElements ; ) { Enumeration.nextElement if ( ZipEntry.toString String.replace String.startsWith ZipEntry.toString String.replace String.endsWith ) { break } }
if ( String.equals ) { if ( String.equals ) { if ( String.equals ) { } } }
File.getTotalSpace return ( Math.min )
return ( Map<String,Object>.containsKey )
for ( ) { if ( ) { if ( Set<Long>.contains Set<Long>.contains ) { List<Long>.add } } }
OperationNotSupportedException.new
ArrayList.new for ( ) { HashMap.new if ( ) { Map<String,Object>.remove } Map<String,Object>.remove if ( ) { Map<String,Object>.put } if ( ) { if ( ) { Map<String,Object>.put } if ( ) { Collections.nCopies } } List<Object>.add }
return ( Charset.defaultCharset Charset.name )
if ( ) { MessageDigest.getInstance PrintStream.println } String.getBytes MessageDigest.update PrintStream.println return ( MessageDigest.digest )
for ( ; ; ) { File.getName Long.parseLong if ( ) { File.delete } }
ArrayList<Object>.add
return ( Class.getName )
return ( CheckedSet<Object>.new )
Class.getName
String.getChars
if ( ) { return ( Class.getName ) } else { return ( Class.getName ) }
File.new if ( File.isDirectory ) { File.new } else { File.delete }
List<Object>.get List<Object>.size List<Object>.get List<Object>.get List<Object>.get List<Object>.get List<Object>.size List<Object>.get List<Object>.get List<Object>.get
for ( ) { if ( String.startsWith ) { String.substring } if ( String.contains ) { break } }
if ( ) { if ( ) { return ( Boolean.booleanValue ) } return ( String.equals ) }
if ( ) { Arrays.toString }
if ( Stack.empty ) { return ( Stack.peek ) }
if ( ) { Arrays.copyOf }
Executors.newFixedThreadPool Math.ceil ArrayList<Object>.new for ( ; ; ) { Math.min ArrayList<Object>.add } ExecutorService.invokeAll ExecutorService.shutdown for ( ) { Future<Object>.get }
Random.new Executors.newSingleThreadExecutor
if ( ) { for ( ) { Entry<String,String>.getKey String.length Entry<String,String>.getValue String.length } } if ( ) { for ( ) { Entry<String,String>.getKey String.length Entry<String,String>.getValue String.length } }
System.arraycopy
return ( Math.pow )
IOException.getMessage PrintStream.println
PipedOutputStream.connect
return ( CompletableFuture<Object>.thenApply )
String.valueOf String.valueOf
return ( List<Character>.size )
for ( ; JTree.getRowCount ; ) { JTree.collapseRow }
if ( ) { String.format } if ( ) { PrintStream.println }
return ( if ( List<String>.isEmpty ) { return ( List<String>.get ) } )
TreeMap<Object,Long>.new for ( ) { Connection.prepareStatement PreparedStatement.setString if ( PreparedStatement.executeUpdate ) { } PreparedStatement.getGeneratedKeys if ( ResultSet.next ) { if ( ) { ResultSet.getLong } ResultSet.getLong Map<Object,Long>.put } }
ArrayList<Integer>.new for ( ; ; ) { ArrayList<Integer>.add }
if ( ) { ArrayList<Long>.new } List<Long>.add
HashMap<String,Object>.new HashMap<String,Object>.new
return ( Collections.singleton )
PrintStream.print
if ( ) { Calendar.getTime }
Map<String,Integer>.get Map<String,Integer>.get
WeakReference.new
List<Object>.size for ( ; List<Object>.size ; ) { List<Object>.get List<Object>.size for ( ; List<Object>.size ; ) { List<Object>.get } List<Object>.get } List<Object>.size
for ( ; ; ) { System.arraycopy }
DocumentBuilderFactory.newInstance DocumentBuilderFactory.newDocumentBuilder DocumentBuilder.newDocument
if ( ) { NullPointerException.new }
ClassLoader.getResources while ( Enumeration<URL>.hasMoreElements ) { Enumeration<URL>.nextElement URL.openStream Manifest.new Manifest.getMainAttributes Attributes.getValue } IOException.new
StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append if ( ) { StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append } if ( ) { StringBuilder.toString PrintStream.println } StringBuilder.setLength
File.new StreamResult.new DOMSource.new PrintStream.println Transformer.transform PrintStream.println
if ( ) { PrintStream.println }
if ( Map<Class,Object>.containsKey ) { AtomicInteger.getAndIncrement Map<Class,Object>.put if ( ) { Arrays.copyOf } Class.getName String.format Logger.info }
HashSet.new for ( List.iterator ; Iterator.hasNext ; ) { Iterator.next Set.add }
ReentrantReadWriteLock.readLock Lock.lock if ( ) { IllegalArgumentException.new } Exception.getMessage Lock.unlock
if ( ) { NullPointerException.new }
for ( Object.getClass Class.getMethods ) { if ( Method.isAnnotationPresent ) { } } if ( ) { Object.getClass Class.getName RuntimeException.new } Object.getClass Class.getName String.valueOf if ( List<Object>.contains ) { List<Object>.add }
if ( ) { NullPointerException.new } if ( ) { Collection<>.addAll } else { if ( ) { Collection<>.addAll } else { for ( ) { if ( ) { NullPointerException.new } Collection<>.add } } }
if ( ) { if ( ) { ArrayList.new } else { ArrayList.new Iterable<Object>.iterator while ( Iterator<Object>.hasNext ) { Iterator<Object>.next List<Object>.add } } }
WeakReference<Object>.get
if ( ) { IllegalArgumentException.new }
for ( ; ; ) { for ( ; Vector.size ; ) { Vector.elementAt } }
Pattern.compile Pattern.matcher return ( Matcher.find )
StringBuilder.new return ( StringBuilder.toString )
File.new if ( File.exists ) { return ( ) } File.listFiles ArrayList.new for ( ; ; ) { if ( File.isDirectory ) { File.new if ( File.exists ) { List.add } } }
if ( String.length String.charAt ) { String.substring }
Stream.of
if ( ) { ArrayList<Object>.new }
if ( ) { Class.getName IllegalArgumentException.new }
if ( ) { IllegalStateException.new }
if ( ) { NullPointerException.new }
File.createTempFile FileOutputStream.new OutputStream.close
ActionEvent.getSource ActionEvent.getActionCommand if ( ) { if ( ) { if ( ) { if ( ) { if ( ) { JCheckBoxMenuItem.getState } else { if ( Logger.isLoggable ) { Logger.fine } } } } } }
String.replaceAll String.replaceAll String.replaceAll String.replaceAll String.replaceAll String.replaceAll String.replaceAll
if ( ArrayList<Object>.size ) { return ( ) }
if ( String.equals ) { }
String.format
Element.getChildNodes for ( ; NodeList.getLength ; ) { NodeList.item if ( Node.getNodeType ) { if ( ) { Element.getAttribute Element.getTextContent } } }
if ( List<String>.size ) { List<String>.size } if ( List<String>.size ) { } JOptionPane.showOptionDialog
if ( ) { IllegalArgumentException.new }
if ( String.isEmpty ) { IllegalArgumentException.new }
File.new File.new File.new File.new File.new File.new Optional.empty
DocumentBuilderFactory.newInstance DocumentBuilderFactory.newDocumentBuilder DocumentBuilder.setErrorHandler DocumentBuilder.setEntityResolver InputSource.new DocumentBuilder.parse Document.getDocumentElement
if ( ) { JPanel.new GridBagLayout.new JPanel.setLayout GridBagConstraints.new GridBagConstraints.new Insets.new Insets.new JPanel.add JPanel.add }
if ( ) { IllegalArgumentException.new }
if ( List<Object>.size ) { return ( ) } List<Object>.get Arrays.copyOf
return ( String.format Integer.valueOf )
if ( List<Object>.size ) { List<Object>.get }
if ( ) { IllegalArgumentException.new }
for ( ; ; ) { if ( ) { FileOutputStream.new } FileOutputStream.write return ( ) IOException.toString }
for ( Locale.getISOCountries ) { }
if ( ) { IllegalStateException.new } if ( ) { NullPointerException.new } if ( ) { NullPointerException.new }
if ( String.equalsIgnoreCase ) { if ( String.equalsIgnoreCase ) { if ( String.equalsIgnoreCase ) { } } }
if ( ) { for ( ; ; ) { if ( ) { return ( Integer.toString ) } } return ( ) } else { return ( Integer.toString ) }
BigInteger.new BigInteger.new BigInteger.remainder BigInteger.toByteArray BigInteger.signum
if ( String.isEmpty ) { RuntimeException.new } if ( String.isEmpty ) { RuntimeException.new } if ( String.isEmpty ) { RuntimeException.new }
Integer.valueOf Map<String,Object>.put
if ( ) { NullPointerException.new }
String.toCharArray
if ( ) { PrintWriter.println PrintWriter.println }
if ( ) { File.new File.getCanonicalPath String.substring String.charAt if ( String.charAt ) { return ( ) } IllegalArgumentException.new }
if ( String.indexOf ) { String.substring } if ( String.indexOf ) { String.substring } String.indexOf if ( ) { String.substring }
System.getProperty if ( String.isEmpty ) { }
TreeMap.size TreeMap.values Collection.iterator while ( Iterator.hasNext ) { Iterator.next }
return ( Integer.intValue )
Switch ( ) { default : UnsupportedOperationException.new }
if ( ) { if ( Stack.isEmpty ) { Stack.peek if ( Element.getElementCount ) { Element.getElement if ( Element.isLeaf ) { ElementRef.new Stack.push } } else { Stack.pop if ( Stack.isEmpty ) { Stack.peek } } } }
Rectangle.new Rectangle.new Rectangle.new
if ( ) { Properties.getProperty } if ( ) { System.getProperty }
ArrayList.new Integer.new ArrayList.add ArrayList.addAll
if ( ) { IllegalStateException.new } FileOutputStream.new BufferedOutputStream.new
if ( ) { IllegalArgumentException.new }
List<Object>.add
if ( ) { for ( ; ; ) { CharSequence.charAt } }
EventListenerList.getListenerList for ( ; ; ) { if ( ) { if ( ) { TreeModelEvent.new } TreeModelListener.treeStructureChanged } }
StringReader.new InputSource.new
return ( CharSequence.charAt )
return ( String.charAt String.substring )
if ( List<Object>.size ) { List<Object>.get }
for ( List.iterator ; Iterator.hasNext ; ) { Iterator.next }
if ( ) { String.format } Map<String,Object>.get if ( ) { if ( ) { Arrays.asList } }
return ( Map<Object,Set>.get )
ArrayList<Object>.get ArrayList<Object>.get ArrayList<Runnable>.addAll Runnable.new for ( ; ArrayList<Object>.size ; ) { ArrayList<Object>.get ArrayList<Object>.get ArrayList<Object>.get ArrayList<Object>.get ArrayList<Object>.get ArrayList<Runnable>.addAll Runnable.new ArrayList<Runnable>.add } Runnable.new
if ( ) { if ( ) { return ( Color.getRed Color.getGreen Color.getBlue Color.new ) } }
return ( Map<Object,Throwable>.get )
System.getProperties Properties.remove
if ( ) { IllegalArgumentException.new } HashMap.new for ( ; List<Object>.size ; ) { List<Object>.get Map<Object,Integer>.put } HashMap.new
return ( System.currentTimeMillis )
return ( SecretKeySpec.new )
if ( ) { IndexOutOfBoundsException.new } return ( return ( ) return ( ) return ( ) return ( ) return ( ) return ( ) if ( ) { IllegalStateException.new } if ( ) { IllegalStateException.new } )
ReentrantReadWriteLock.readLock Lock.lock if ( Collection<Object>.size ) { return ( Collection<Object>.iterator ) } Lock.unlock
IllegalArgumentException.new
Vector.new for ( Collection.iterator ; Iterator.hasNext ; ) { Iterator.next Vector.add }
return ( JAXBElement.new )
if ( ) { if ( ) { Object.toString if ( String.equalsIgnoreCase String.equalsIgnoreCase ) { if ( String.equalsIgnoreCase String.equalsIgnoreCase ) { return ( ) } } } }
return ( Map<String,Object>.values ArrayList<Object>.new )
Switch ( ) { case : return ( Integer.numberOfLeadingZeros ) case : return ( Integer.numberOfLeadingZeros ) case : Integer.numberOfLeadingZeros return ( ) default : AssertionError.new }
if ( ) { IOException.new }
if ( ) { if ( ) { Exception.getCause return ( ) } }
File.exists File.isDirectory File.getAbsolutePath System.currentTimeMillis FileOutputStream.new BufferedOutputStream.new ZipOutputStream.new ZipOutputStream.setLevel File.getParent System.currentTimeMillis if ( ) { File.getAbsolutePath File.length String.format }
ArrayList<Object>.new for ( ) { List<Object>.add }
BigInteger.new BigDecimal.new BigDecimal.unscaledValue BigDecimal.scale
for ( ) { if ( ) { if ( ) { List<String>.add } } } if ( List<String>.isEmpty ) { return ( ) }
if ( ) { IndexOutOfBoundsException.new }
ImageWriter.endWriteSequence
ArrayList.get
String.trim String.length StringBuilder.new for ( ; ; ) { String.charAt if ( ) { StringBuilder.append Character.forDigit StringBuilder.append Character.forDigit StringBuilder.append } else { StringBuilder.append } } return ( StringBuilder.toString )
if ( ) { IllegalArgumentException.new }
LinkedHashMap.new LinkedHashMap.new LinkedHashMap.size
if ( ) { return ( List<Object>.stream Collectors.toSet ) }
String.format if ( ) { if ( ) { if ( List<Object>.isEmpty ) { } } if ( ) { if ( List<Object>.isEmpty ) { } } }
Throwable.getMessage
if ( ) { IllegalArgumentException.new } if ( ) { return ( Math.abs String.format ) }
if ( ) { NullPointerException.new } TreeMap<Object,Object>.get if ( ) { IllegalArgumentException.new }
Map<String,Object>.put
for ( List<Object>.iterator ; Iterator<Object>.hasNext ; ) { Iterator<Object>.next if ( ) { Iterator<Object>.remove } }
return ( Collection<>.stream Stream.filter Stream.collect )
LinkedHashMap.new for ( ) { if ( Map<Object,Object>.containsKey ) { } Map<Object,Object>.put }
for ( ) { Class<Object>.cast Collection<Object>.add }
Map<Object,Object>.get if ( ) { if ( ) { Map<Object,Object>.remove } }
DocumentationTask.call PrintStream.println
for ( ; ; ) { Long.new }
if ( ) { Integer.valueOf }
String.format
return ( LinkedList<Object>.new )
DocumentBuilderFactory.newInstance DocumentBuilderFactory.setNamespaceAware DocumentBuilderFactory.newDocumentBuilder Class.getResourceAsStream DocumentBuilder.parse Document.getElementsByTagName NodeList.item if ( Element.hasAttribute ) { Element.setIdAttribute } Document.getElementsByTagNameNS NodeList.item XMLSignatureFactory.getInstance DOMValidateContext.new return ( XMLSignatureFactory.unmarshalXMLSignature XMLSignature.validate )
if ( ) { PrintStream.println }
Callable.call Class<>.getName Exception.getClass AssertionError.addSuppressed
if ( ) { return ( VMThread.getState enum.valueOf ) }
HashSet<String>.new if ( Collection<String>.size ) { if ( Collection<String>.iterator Iterator.next String.equals ) { Collection<String>.iterator Iterator.next } }
BufferedReader.new while ( BufferedReader.readLine ) { String.trim if ( String.equals ) { continue } String.indexOf String.substring String.substring } if ( ) { BufferedReader.close }
StringBuilder.new while ( ) { String.new StringBuilder.append } return ( StringBuilder.toString )
HashMap.new for ( ) { if ( ) { Map<String,Object>.put } } if ( File.getParentFile File.exists ) { File.getParentFile File.mkdirs } FileOutputStream.new ObjectOutputStream.new ObjectOutputStream.writeObject
if ( ) { ArrayList<Object>.new } List<Object>.add
UnsupportedOperationException.new
Boolean.valueOf
for ( ; ; ) { File.new }
if ( Collection<Object>.size Collection<Object>.isEmpty ) { }
ArrayList<Object>.new if ( ) { String.format IllegalArgumentException.new }
return ( Collections.emptyMap )
return ( String.getBytes ByteArrayInputStream.new )
return ( Object.equals Object.toString )
if ( String.equals ) { if ( Set<Object>.isEmpty ) { } }
MARSHAL.new
ArrayList<Integer>.new for ( ; ; ) { if ( ) { Integer.valueOf List<Integer>.add } } Integer.valueOf List<Integer>.add
List<Object>.isEmpty ArrayList<Object>.new List<Object>.remove List<Object>.add Set<Object>.add Logger.fine BlockingQueue<Object>.put
Messager.printMessage
for ( Map<URI,Integer>.keySet ) { Map<URI,Integer>.get if ( ) { Map<URI,Integer>.get Map<URI,Integer>.put } }
UnsupportedOperationException.new
AbstractButton.setSelected
if ( String.isEmpty ) { Arrays.toString }
Callable<Void>.new Callable<Void>.new Callable<Void>.new
ArrayList<String>.add
Boolean.getBoolean if ( Boolean.getBoolean ) { PrintWriter.new }
Process.getClass Class.getDeclaredField return ( Field.getInt ) IllegalStateException.new
if ( ) { IllegalArgumentException.new }
for ( ; ; ) { if ( List<Object>.contains ) { continue } }
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } RuntimeException.new
HashMap<String,Object>.get Properties.getProperty if ( String.indexOf ) { return ( Double.parseDouble ) } String.indexOf String.substring String.substring HashMap<String,String>.put HashMap<String,Object>.put
Vector<>.get Vector<>.get Vector<>.get Vector<>.get for ( Map<,>.values ) { if ( Object.getClass Class.isArray ) { if ( ) { Vector<Object>.new } } if ( Vector<Object>.size ) { } }
if ( ) { Runnable.new }
if ( ) { if ( ) { return ( Boolean.booleanValue ) } return ( String.equals ) }
if ( ) { Class.getConstructor } return ( Constructor<DeflaterOutputStream>.newInstance ) UnsupportedOperationException.new InvocationTargetException.getCause InvocationTargetException.getCause InvocationTargetException.getCause RuntimeException.new RuntimeException.new AssertionError.new
File.new File.new
for ( List<Object>.iterator ; Iterator<Object>.hasNext ; ) { Iterator<Object>.next if ( Iterator<Object>.hasNext ) { } }
JMenu.add
if ( ) { IllegalArgumentException.new } if ( ) { OutOfMemoryError.new }
ByteArrayOutputStream.new ByteArrayOutputStream.flush ByteArrayOutputStream.toByteArray
if ( ) { if ( Map<String,Object>.isEmpty ) { Map<String,Object>.get if ( ) { if ( Locale.getDefault Locale.getDefault ) { } } } }
while ( ) { Switch ( ) { UnsupportedOperationException.new Switch ( ) { default : AssertionError.new } continue } }
for ( ; ; ) { Math.exp } for ( ; ; ) { for ( ; ; ) { Math.abs } }
Stack<Object>.peek if ( ) { IllegalStateException.new } Stack<Object>.push RuntimeException.new
return ( HashMap<String,String>.get )
Objects.requireNonNull Objects.requireNonNull
return ( List<Object>.indexOf )
if ( ) { if ( ) { return ( Boolean.booleanValue ) } return ( String.equals ) }
if ( ) { IllegalStateException.new }
if ( String.equals ) { }
LinkedList.new LinkedList.new for ( ) { if ( ) { LinkedList<Object>.addLast } else { LinkedList<Object>.add } }
if ( List<Object>.size ) { return ( List<Object>.remove ) }
HashSet<Object>.new for ( ) { Collection<Object>.add }
if ( ) { Math.random }
IOException.new
for ( ; ; ) { for ( ; ; ) { if ( Comparator<>.compare ) { } } }
for ( ) { if ( ) { List<Object>.add for ( ) { if ( ) { List<Object>.add } } } }
if ( ) { Runnable.new } if ( ) { Runnable.new } for ( ; ; ) { if ( String.equals ) { continue if ( ) { Runnable.new } } if ( String.equals ) { if ( ) { Runnable.new } } }
Math.sqrt String.replace String.replace String.replace for ( ; ; ) { for ( ; ; ) { if ( ) { do { if ( ) { if ( ) { Math.log } } } while ( ) ; } } } Date.new
if ( ) { List<Object>.remove }
ArrayList<Object>.get if ( ) { InvalidObjectException.new }
if ( String.length ) { } String.charAt if ( ) { String.valueOf } String.substring
ArrayList<Object>.isEmpty ArrayList<Object>.get ArrayList<Object>.remove
return ( JAXBElement<Object>.new )
AbstractElement.dump AbstractElement.dump
ArrayList.new for ( ) { if ( ) { List<Object>.add } if ( ) { List<Object>.add } }
PreparedStatement.setString PreparedStatement.setString PreparedStatement.getParameterMetaData ParameterMetaData.getParameterCount PreparedStatement.executeQuery ResultSet.next ResultSet.close PreparedStatement.close
IdentityHashMap<Object,Object>.put
if ( ) { Map<String,String>.get } Exception.printStackTrace
if ( String.equals ) { if ( String.equals ) { } }
File.new FileInputStream.new BufferedInputStream.new InputStreamReader.new BufferedReader.new StringBuilder.new while ( BufferedReader.readLine ) { StringBuilder.append } InputStream.close StringBuilder.toString Exception.getMessage if ( ) { BufferedReader.close } Exception.printStackTrace
if ( ) { return ( String.valueOf ) }
AtomicLong.set
if ( List<Object>.isEmpty ) { if ( List<Object>.get List<Object>.get ) { return ( List<Object>.get ) } else { if ( List<Object>.get ) { } } }
IndexedPropertyChangeEvent.new
if ( ) { Document.createElementNS Object.toString Document.createTextNode Element.appendChild Element.appendChild }
Callable<BigDecimal>.new BigDecimal.new BigDecimal.stripTrailingZeros
ArrayList<String>.new while ( String.isEmpty ) { for ( ; String.length ; ) { if ( String.charAt Character.isUpperCase ) { String.substring List<String>.add String.substring break } } if ( ) { List<String>.add } }
DriverManager.getDriver Class.forName Class.newInstance DriverManager.getDriver Driver.getPropertyInfo for ( ; ; ) { if ( String.equalsIgnoreCase ) { } }
if ( ) { ArrayList<Object>.new }
if ( ) { IllegalArgumentException.new }
if ( ) { ArrayList<Object>.new } List<Object>.add
if ( ) { if ( ) { IOException.getMessage } }
Switch ( ) { default : IllegalArgumentException.new }
for ( ; ; ) { if ( ) { if ( URL.getProtocol String.equals ) { IllegalArgumentException.new } } }
String[].clone
Vector<Object>.new Vector<Object>.addElement Integer.new
if ( ) { Collection.add if ( ) { JMenu.getItemCount for ( ; ; ) { JMenu.getItem } } else { if ( ) { Container.getComponents } } }
Stream<Entry<Object,Object>>.onClose
if ( ) { PrintStream.println }
if ( Collection<Object>.isEmpty ) { return ( ) } Collection<Object>.iterator
LinkedList<String>.new
if ( ) { IllegalArgumentException.new }
Collection<Object<Object>>.add
BufferedReader.readLine while ( String.equals ) { BufferedReader.readLine }
if ( ) { Callable<Object>.call } else { System.currentTimeMillis Callable<Object>.call System.currentTimeMillis }
List<Object>.get if ( ) { return ( List<Object>.get ) }
ImageIcon.new
RuntimeException.new
if ( ) { HashMap.new for ( Properties.entrySet ) { Entry<Object,Object>.getKey Object.toString Entry<Object,Object>.getValue Map<String,Object>.put } }
String.length String.length StringBuilder.new for ( ; ; ) { String.charAt String.indexOf if ( ) { if ( ) { String.charAt StringBuilder.append } } else { StringBuilder.append } } if ( ) { return ( StringBuilder.toString ) }
IllegalArgumentException.new
Class<Object>.getSimpleName Class<Object>.getSimpleName
for ( TreeMap<Integer,Object>.entrySet Set.iterator ; Iterator<Entry<Integer,Object>>.hasNext ; ) { Iterator<Entry<Integer,Object>>.next Entry<Integer,Object>.getValue if ( ) { Iterator<Entry<Integer,Object>>.remove } }
IllformedLocaleException.new
return ( JAXBElement<String>.new )
List<String>.add List<Object>.add
if ( ) { ArrayList<Object>.new }
ByteArrayOutputStream.new while ( InputStream.read ) { ByteArrayOutputStream.write } ByteArrayOutputStream.toByteArray
Pattern.matcher while ( Matcher.find ) { for ( Matcher.group String.split ) { } Matcher.group String.replace }
Cipher.getInstance Cipher.getInstance Cipher.init Cipher.init MessageDigest.getInstance MessageDigest.reset SecretKey.getEncoded MessageDigest.update MessageDigest.digest String.new
String.indexOf String.substring if ( String.charAt ) { } String.substring String.indexOf String.substring
Integer.toHexString ArrayList.new if ( ) { if ( ) { RuntimeException.new } for ( ) { File.getName } } if ( ) { for ( ) { File.getName } } for ( ) { if ( ) { List<String>.add continue } }
for ( ) { if ( UUID.equals ) { break } } if ( ) { Vector<UUID>.remove }
return ( ByteBuffer.wrap )
EnumMap.new EnumMap.put EnumMap.put EnumMap<Object,Double>.new EnumMap.put EnumMap.put EnumMap.put Double.new EnumMap.put Double.new Integer.new EnumMap.put Integer.new EnumMap.put Float.new EnumMap.put EnumMap.put Double.new EnumMap.put
if ( ) { return ( ConcurrentHashMap<Object,Object>.new ) }
if ( ) { return ( Integer.intValue Object.toString ) } else { RuntimeException.new }
if ( ) { ConcurrentModificationException.new } if ( ) { NoSuchElementException.new }
Date.new
StringBuilder.new return ( StringBuilder.toString )
Map<String,Object>.get
if ( ) { IOException.new } else { if ( ) { IOException.new } } Thread.new Thread.start
String.toCharArray for ( ; ; ) { Character.digit Character.digit }
return ( Map<String,String>.get )
Map<String,Object>.get if ( ) { if ( ) { ConcurrentLinkedQueue<Object>.iterator while ( Iterator<Object>.hasNext ) { Iterator<Object>.next if ( ) { Iterator<Object>.remove } } Map<String,Object>.remove } } else { Map<String,Object>.remove ConcurrentLinkedQueue<Object>.iterator while ( Iterator<Object>.hasNext ) { Iterator<Object>.next if ( ) { Iterator<Object>.remove } } }
Map<String,Object>.get
return ( Map<Integer,Throwable>.get )
Connection.setAutoCommit
return ( FutureTask<Object>.get )
if ( ) { String.format } if ( ) { InputStream.close }
return ( NameParser.parse NameParser.parse Name.toString )
ArrayList<Object>.new
Collection<>.toArray for ( ; ; ) { Number.doubleValue }
BufferedImage.getWidth BufferedImage.getHeight if ( ) { if ( ) { IllegalArgumentException.new } } else { if ( ) { IllegalArgumentException.new } } if ( ) { IllegalArgumentException.new } do { BufferedImage.createGraphics Graphics2D.setRenderingHint BufferedImage.getWidth BufferedImage.getHeight Graphics2D.drawImage Graphics2D.dispose } while ( ) ;
if ( ) { IllegalArgumentException.new } Locale.getDefault String.toUpperCase Map<String,Collection<X509Certificate>>.get if ( ) { Collections.emptyList }
IllegalArgumentException.new
if ( ) { IndexOutOfBoundsException.new } if ( ) { if ( ) { System.arraycopy } }
GregorianCalendar.new Calendar.setTime Duration.addTo return ( Date.getTime )
if ( ) { Integer.toString IllegalArgumentException.new }
return ( if ( String.equals ) { return ( ) } if ( String.length ) { String.substring } return ( String.format ) )
if ( ) { String.format } if ( ) { PrintStream.println }
if ( String.equals ) { if ( String.equals String.equals ) { if ( String.isEmpty ) { } if ( String.isEmpty ) { } } } if ( ) { System.gc } Runnable.new
Random.nextInt if ( ) { StringBuilder.new for ( ; ; ) { String.length Random.nextInt StringBuilder.charAt String.length Random.nextInt StringBuilder.charAt StringBuilder.setCharAt StringBuilder.setCharAt } StringBuilder.toString }
String.indexOf if ( ) { String.length String.substring if ( String.startsWith ) { if ( String.startsWith ) { if ( String.startsWith ) { if ( String.startsWith ) { return ( ) } } } } }
if ( ) { if ( Process.getRootOperator ) { return ( Process.getRootOperator Process.getEncoding ) return ( Process.getEncoding ) } else { return ( Process.getEncoding ) } } else { return ( Process.getEncoding ) }
if ( List<Integer>.size ) { List<Integer>.size ArrayList.new for ( ) { List<Object>.get List<String>.add } return ( ) }
InetAddress.getByName InetAddress.getHostAddress
for ( ; ArrayList<String>.size ; ) { ArrayList<String>.get String.split if ( Integer.toString String.equals ) { ArrayList<String>.get if ( ArrayList<String>.size ) { ArrayList<String>.get String.split Integer.parseInt } while ( ArrayList<String>.size ) { ArrayList<String>.get String.split Integer.parseInt for ( ; ; ) { String.concat } } break } }
return ( Map<String,Long>.get )
return ( Math.abs )
if ( ) { return ( Collections.unmodifiableList ) }
ResourceBundle.getString JLabel.setText JProgressBar.setValue
for ( ; ; ) { Math.round }
return ( Long.intValue )
return ( Class.getSimpleName )
BufferedImage.new BufferedImage.createGraphics Graphics2D.dispose ImageIO.write Exception.printStackTrace
Class.getSimpleName
return ( Socket.getInetAddress InetAddress.toString Socket.getPort )
if ( List<Object>.size ) { List<Object>.get } if ( ) { if ( ) { Math.min } } if ( ) { Math.min } if ( ) { Math.min }
if ( ) { PrintStream.println }
ObjectOutputStream.defaultWriteObject
if ( ) { IllegalStateException.new } if ( ) { return ( IOException.getMessage ) }
StringReader.new
if ( ) { IllegalArgumentException.new } Set<Object>.remove Map<String,Object>.remove
PrintStream.println
StringBuilder.new return ( StringBuilder.toString )
Process.getRootOperator Process.removeLoggingListener
return ( ConcurrentHashMap<String,Object>.get )
if ( Map<String,>.size ) { return ( ) } if ( Map<String,>.containsKey Map<String,>.containsKey ) { for ( Map<String,>.entrySet ) { if ( Entry<String,>.getValue Entry<String,>.getValue String.valueOf ) { if ( ) { Entry<String,>.getKey Entry<String,>.getValue } return ( ) } } return ( ) }
Long.valueOf
return ( StringBuffer.toString )
while ( ) { Math.min Object.wait } while ( ) { Math.min Object.wait }
Integer.toString String.format
XMLStreamWriter.writeStartElement XMLStreamWriter.writeAttribute XMLStreamWriter.writeEndElement
if ( ) { if ( ) { return ( Boolean.booleanValue ) } return ( String.equals ) }
if ( ) { IllegalArgumentException.new } if ( ) { Math.sqrt Math.sqrt } do { Math.cos } while ( Math.log ) ; return ( Math.acos Math.acos )
Math.abs
ArrayList<X509Certificate>.new Collection<X509Certificate>.add
if ( ) { ArrayList<Object>.new }
List<Object>.size for ( ; List<Object>.size ; ) { List<Object>.get }
if ( ) { Vector.new } else { Vector.size Vector.new for ( ; ; ) { Vector.elementAt Vector.addElement } }
return ( List<String>.size )
List<Object>.clear
UnsupportedOperationException.new
ArrayList.new for ( ; ; ) { List<Object>.add }
if ( String.equals ) { Integer.valueOf }
if ( List<Object>.isEmpty ) { return ( List<Object>.get ) }
if ( ) { return ( Set<>.size Set<>.size Set<>.containsAll ) return ( ) return ( ) }
if ( String.indexOf ) { return ( ) }
HostnameVerifier.new while ( ) { HttpsURLConnection.setDefaultHostnameVerifier BindingProvider.getRequestContext Map<String,Object>.put Map<String,Object>.put Thread.sleep Thread.currentThread Thread.interrupt }
return ( Paths.get Collections.singletonList )
return ( Arrays.toString )
ConcurrentMap<Object,SoftReference<Object>>.get if ( SoftReference<Object>.get ) { }
if ( ) { return ( X509Certificate.getSubjectX500Principal ) }
if ( ) { String.replace }
return ( Math.atan2 )
Logger.log
if ( List<Object>.size ) { List<Object>.get }
if ( Objects.equals ) { return ( ) }
if ( ) { if ( ) { return ( Collection<>.size ) } else { if ( ) { return ( Map<,>.size ) } } }
StringBuilder.new for ( ; ; ) { StringBuilder.append StringBuilder.append } return ( StringBuilder.toString )
BigInteger.valueOf BigInteger.valueOf BigInteger.valueOf BigInteger.valueOf BigInteger.valueOf
return ( HashMap<String,String>.get )
if ( ) { if ( ) { Writer.write } Writer.write Writer.write return ( ) }
return ( Optional<Object>.orElseThrow )
Vector.get if ( ) { Switch ( ) { case : BufferedWriter.write BufferedWriter.write BufferedWriter.write BufferedWriter.write BufferedWriter.write break default : BufferedWriter.write break } } BufferedWriter.write
return ( List<Object>.iterator List<Object>.iterator )
LinkedList<Object>.new for ( ; Iterator<Object>.hasNext ; ) { Iterator<Object>.next List<Object>.add if ( ) { if ( Iterator<Object>.hasNext ) { if ( ) { PrintStream.println } } break } }
Collection<Object>.add
HashSet.new if ( Set<Object>.size Set<Object>.size ) { }
return ( Number.doubleValue Math.asin )
if ( ) { if ( ) { return ( SimpleDateFormat.format ) } return ( ) } else { if ( ) { return ( Object.toString ) } }
BufferedOutputStream.new
AttributeContext.removeAttributes
if ( ) { RuntimeException.new } HashMap<String,Object>.new if ( ) { Map<String,Object>.put } if ( ) { Map<String,Object>.put } Map<String,Object>.put if ( ) { Map<String,Object>.put }
if ( String.equals ) { return ( ) }
Map.put Map.put Map.put Map.put Map.put
if ( ) { if ( ) { if ( ) { HashSet<String>.new for ( ) { Set<String>.add } } if ( ) { HashSet<String>.new for ( ) { Set<String>.add } } if ( ) { HashSet<String>.new for ( ) { Set<String>.add } } } }
return ( String.format String.getBytes )
while ( Enumeration<>.hasMoreElements ) { Enumeration<>.nextElement Properties.setProperty } Properties.size
File.list for ( ) { File.getAbsolutePath if ( Logger.isLoggable ) { Logger.info } Map<String,Integer>.keySet Set<String>.addAll } File.getAbsolutePath
List<Object>.add
BigInteger.new BigInteger.pow BigInteger.toByteArray BigInteger.signum
for ( LinkedHashMap<String,Object>.values ) { LinkedHashMap<String,Object>.get } return ( String.startsWith String.startsWith )
String.format
if ( ) { IllegalArgumentException.new } ConcurrentMap<String,DataSource>.get ConcurrentMap<String,DataSource>.putIfAbsent List<File>.add
if ( ) { IllegalArgumentException.new } Handler.getLevel Level.intValue
HashMap.new for ( ) { Map<String,BigDecimal>.put }
JTabbedPane.new Font.new JTabbedPane.setFont JButton.new JButton.addActionListener JLabel.new JLabel.new JLabel.setToolTipText JLabel.new JLabel.setToolTipText JToggleButton.new JToggleButton.addActionListener Font.new Exception.printStackTrace if ( ) { PrintStream.println } BorderLayout.new
Map.get if ( ) { HashSet.new Map.put } if ( Set.contains ) { Map.get Set.add Map.put if ( ) { Map.get Set.remove } }
return ( Integer.intValue )
if ( PropertyChangeEvent.getPropertyName String.equals ) { PropertyChangeEvent.getNewValue } if ( PropertyChangeEvent.getPropertyName String.equals ) { }
if ( Map<String,Object>.containsKey ) { return ( ) } Map<String,Object>.get
ArrayList.new if ( ) { List<Object>.addAll } else { if ( ) { ByteArrayOutputStream.new Properties.store ByteArrayOutputStream.toByteArray List<Object>.addAll } } Collections.sort
HashMap.new
return ( String.toLowerCase HashMap<String,String>.get )
Switch ( ) { case : BigDecimal.new ResultSet.updateBigDecimal break case : ResultSet.updateString break default : Exception.new Exception.printStackTrace }
DOMTestDocumentBuilderFactory.newInstance
return ( Integer.intValue )
List<Object>.forEach
if ( Set.size ) { } TreeSet.new TreeSet.addAll TreeSet.iterator TreeSet.size for ( ; ; ) { Iterator.next Set.contains if ( ) { Set.size } }
if ( ) { IllegalArgumentException.new } if ( ) { SSLSocket.startHandshake SSLSocket.getSession if ( ) { SSLException.new } if ( HttpsURLConnection.getDefaultHostnameVerifier HostnameVerifier.verify ) { SSLPeerUnverifiedException.new } }
ArrayList.new List<Object>.add
if ( ) { if ( ) { Runnable.run } }
ArrayList.new while ( Iterator.hasNext ) { Iterator.next if ( ) { if ( ) { for ( ; ; ) { ArrayList.add } } for ( ; ; ) { ArrayList.add } } } if ( ) { for ( ; ; ) { ArrayList.add } }
AtomicBoolean.set Object.notifyAll
ArrayList<Object>.new List<Object>.add while ( ) { List<Object>.add }
if ( ) { RuntimeException.new }
if ( String.isEmpty ) { IllegalArgumentException.new } return ( Map<String,Object>.get )
FileOutputStream.new PrintWriter.new for ( ; ; ) { PrintWriter.println } PrintWriter.close IOException.toString
Properties.new for ( ) { String.trim String.trim Properties.setProperty }
if ( String.equals ) { return ( ) } if ( String.equals String.equals String.equals String.equals ) { return ( ) }
for ( ; ; ) { if ( String.length ) { return ( ) } }
Class.getResourceAsStream
return ( String.compareTo )
if ( ) { if ( ) { NullPointerException.new } }
if ( ) { if ( ) { for ( ; ; ) { Math.max } } } else { if ( ) { List<Object>.size List<Object>.get } }
ObjectStreamField.isPrimitive ObjectStreamField.isPrimitive return ( ObjectStreamField.getName ObjectStreamField.getName String.compareTo )
DataInputStream.readByte Switch ( ) { case : DataInputStream.readByte DataInputStream.readFloat DataInputStream.readFloat DataInputStream.readFloat DataInputStream.readFloat DataInputStream.readInt break case : DataInputStream.readInt DataInputStream.readInt DataInputStream.readInt DataInputStream.readInt break case : DataInputStream.readFloat DataInputStream.readFloat DataInputStream.readInt DataInputStream.readInt DataInputStream.readInt DataInputStream.readInt break }
if ( ) { AffineTransform.new AffineTransform.scale AffineTransform.createTransformedShape }
KeyStore.getCertificate if ( ) { String.toCharArray KeyStore.getKey }
return ( Map.get )
return ( JAXBElement<Object>.new )
if ( ) { System.arraycopy }
Node.getNodeName
for ( ; ; ) { String.format }
if ( Map<Object,Collection<Object>>.containsKey ) { return ( Collections.emptyList ) } return ( Map<Object,Collection<Object>>.get )
StringWriter.new return ( StringWriter.toString )
return ( Map<Object,Object>.hashCode )
return ( ConcurrentMap<Class<Object>,Object>.get )
String.replace String.charAt Switch ( ) { case : return ( String.length String.substring ) }
TimeUnit.toSeconds
if ( ) { NullPointerException.new }
if ( ) { if ( ) { JLabel.setText } else { JLabel.setText } }
EventListenerList.add
if ( ) { InputStream.close IOException.getMessage }
if ( ) { if ( ) { if ( ) { if ( ) { if ( ) { return ( Throwable.getClass ) } } } } }
List<Double>.add
ByteArrayOutputStream.new ByteArrayOutputStream.flush ByteArrayOutputStream.toByteArray
Integer.valueOf if ( ) { Map<String,Object>.put return ( ) } Math.floor String.valueOf System.currentTimeMillis Exception.getMessage Map<String,Object>.put
PrintStream.println PrintStream.println File.new File.listFiles if ( ) { PrintStream.println PrintStream.println File.new File.listFiles if ( ) { System.exit } Integer.parseInt } else { Integer.parseInt } PrintStream.println
return ( BitSet.get )
return ( Map<Object,Object>.isEmpty )
if ( ) { NullPointerException.new }
return ( String.getBytes ) return ( String.getBytes )
return ( Arrays.asList Collections.unmodifiableList )
return ( Map<Object,String>.keySet )
if ( ) { JPanel.new GridBagLayout.new JPanel.setLayout JPanel.new GridBagLayout.new JPanel.setLayout BorderFactory.createTitledBorder JPanel.setBorder JPanel.add JPanel.new GridBagLayout.new JPanel.setLayout BorderFactory.createTitledBorder JPanel.setBorder JPanel.add JPanel.add JPanel.add JPanel.new GridBagLayout.new JPanel.setLayout BorderFactory.createTitledBorder JPanel.setBorder JPanel.add JPanel.add JPanel.add JPanel.new GridBagLayout.new JPanel.setLayout BorderFactory.createTitledBorder JPanel.setBorder JPanel.add JLabel.new JLabel.setLabelFor JPanel.add JPanel.add JPanel.add JPanel.add JPanel.add JPanel.add JPanel.add }
return ( File.new File.exists )
ArrayList<Object>.new if ( ) { if ( ) { for ( ) { if ( ) { List<Object>.add return ( ) } } } }
if ( BigDecimal.scale ) { return ( BigDecimal.setScale ) }
if ( ) { IllegalArgumentException.new }
if ( Map<String,String>.containsKey ) { Map<String,String>.get } if ( String.contains ) { IllegalArgumentException.new }
ArrayList<Object>.new List<Object>.add for ( ; ; ) { String.getBytes break Thread.sleep } System.currentTimeMillis while ( ) { Thread.sleep System.currentTimeMillis } List<Object>.get
WeakReference<Object>.new
Math.round return ( Math.max )
ArrayList<Object>.new for ( ) { if ( ) { Collection<Object>.add } }
List<Object>.add
if ( ) { NullPointerException.new }
if ( ) { Properties.new }
Date.new Date.new
if ( Map<Object,Integer>.containsKey ) { Map<Object,Integer>.put } else { Map<Object,Integer>.get Map<Object,Integer>.put } if ( Map<Object,Integer>.get ) { Map<Object,Integer>.clear return ( ) }
Map<String,Object>.get
LinkedList<Object>.new HashMap<Object,List<Object>>.put HashMap<Object,List<Object>>.get LinkedList<Object>.new HashMap<Object,List<Object>>.put HashMap<Object,List<Object>>.get LinkedList<Object>.new HashMap<Object,List<Object>>.put HashMap<Object,List<Object>>.get LinkedList<Object>.new HashMap<Object,List<Object>>.put HashMap<Object,List<Object>>.get LinkedList<Object>.new HashMap<Object,List<Object>>.put HashMap<Object,List<Object>>.get LinkedList<Object>.new HashMap<Object,List<Object>>.put HashMap<Object,List<Object>>.get
URL.new URL.getHost URL.getPort URL.getFile if ( String.isEmpty ) { } return ( URL.getProtocol URL.new )
return ( Preferences.userNodeForPackage )
if ( Map<String,Object>.containsKey ) { Map<String,Object>.remove }
if ( ) { ScheduledExecutorService.shutdown } if ( ) { ScheduledExecutorService.awaitTermination if ( ScheduledExecutorService.isTerminated ) { ScheduledExecutorService.shutdownNow } } AtomicLong.get
if ( List<PropertyChangeListener>.contains ) { List<PropertyChangeListener>.remove }
return ( LinkedHashMap<String,Object>.size )
ReadableByteChannel.read
System.getSecurityManager if ( ) { SecurityManager.checkWrite SecurityManager.checkWrite } return ( FileSystem.rename )
for ( LinkedHashMap<String,Object>.values ) { }
UnsupportedOperationException.new
if ( ) { Class.getName }
for ( ) { String.getBytes OutputStream.write OutputStream.flush } if ( ) { if ( File.length ) { } if ( ) { PrintStream.println } } else { PrintStream.println }
Graphics2D.setRenderingHint Graphics2D.setColor Graphics2D.drawLine Graphics2D.setColor Graphics2D.drawLine Graphics2D.drawLine Graphics2D.setColor Graphics2D.drawLine Graphics2D.drawLine Graphics2D.setColor Graphics2D.drawLine Graphics2D.drawLine Graphics2D.setColor Graphics2D.drawLine Graphics2D.setColor Graphics2D.drawLine Graphics2D.setColor Graphics2D.fillRect Graphics2D.drawLine
System.getProperty String.toLowerCase return ( String.equals String.equals )
if ( ) { IllegalStateException.new }
return ( Map<Object,Object>.get )
for ( ; ; ) { Arrays.fill Math.floor Math.abs Math.pow Math.pow }
return ( Vector<Object>.size )
if ( Logger.isLoggable ) { Logger.log }
MouseEvent.getPoint StringBuffer.new if ( ) { if ( String.trim String.length ) { StringBuffer.append StringBuffer.append StringBuffer.append } } StringBuffer.toString
ArrayDeque<Object>.new
if ( ) { HashMap.get HashMap.get if ( ) { HashSet.new HashMap.put } if ( ) { HashSet.new HashMap.put } Set.add Set.add }
if ( ) { IllegalStateException.new }
ScheduledThreadPoolExecutor.new Runnable.new ScheduledThreadPoolExecutor.scheduleAtFixedRate
while ( Iterator<Object>.hasNext ) { Iterator<Object>.next }
ArrayList.new for ( ) { List<Object>.add for ( ) { List<Object>.add } }
if ( ) { Integer.new }
ArrayList<Object>.new for ( ) { if ( CharSequence.toString String.toLowerCase CharSequence.toString String.toLowerCase ) { ArrayList<Object>.add } }
Vector.iterator if ( Iterator.hasNext ) { Iterator.next ComponentUI.contains } while ( Iterator.hasNext ) { Iterator.next ComponentUI.contains }
if ( ) { Number.intValue }
SimpleDateFormat.new for ( ) { SimpleDateFormat.format SimpleDateFormat.format }
ServerSocket.new return ( ServerSocket.getLocalPort ) if ( ) { ServerSocket.close }
return ( Map<String,Object>.size )
return ( CopyOnWriteArrayList<Object>.retainAll )
AssertionError.new
if ( String.equals ) { return ( ) } if ( String.equals ) { return ( ) } if ( String.equals ) { return ( ) } if ( String.equals ) { return ( ) } if ( String.equals ) { return ( ) } Exception.new
if ( ) { Map.get } if ( ) { Map.get }
UUID.randomUUID UUID.randomUUID
if ( ) { IllegalStateException.new } return ( List<Object>.size )
IllegalArgumentException.new
Pattern.compile Pattern.matcher while ( Matcher.find ) { if ( Matcher.start ) { break } Matcher.end }
return ( Map<String,Object>.values )
if ( String.equals ) { if ( String.equals ) { if ( String.equals ) { if ( String.equals ) { if ( String.equals ) { if ( String.equals ) { if ( String.equals ) { if ( String.equals ) { } } } } } } } }
Long.highestOneBit
if ( ) { String.split } for ( ) { Security.getProvider if ( ) { if ( Provider.getService ) { break } } }
String.split
if ( Double.isNaN ) { return ( ) }
ArrayList.new
BufferedReader.close
if ( ) { Math.abs }
if ( ) { IllegalStateException.new }
HashMap<String,HashMap<String,Object>>.new HashMap<String,Integer>.new HashMap<String,String>.new
NotificationBroadcasterSupport.sendNotification
String.split if ( ) { String.trim } for ( ; ; ) { Double.parseDouble }
if ( CancellationException.new ) { return ( ) }
return ( Integer.intValue )
if ( ) { Error.new }
ArrayList<Object>.new for ( ; ; ) { for ( ; ; ) { List<Object>.add } } if ( List<Object>.size ) { IllegalArgumentException.new } List<Object>.clear for ( ; ; ) { List<Object>.get List<Object>.add }
if ( Double.isNaN ) { return ( ) } if ( Double.isNaN ) { return ( ) } if ( Double.isNaN ) { return ( ) }
if ( String.endsWith ) { String.length String.substring }
List<String>.size
Runnable.new
Math.abs
URI.toString String.format Exception.getLocalizedMessage if ( ) { URI.toString }
Map<Object,String>.get Map<Object,String>.remove Map<String,Object>.remove
XMLStreamWriter.getPrefix if ( ) { while ( XMLStreamWriter.getNamespaceContext NamespaceContext.getNamespaceURI ) { } XMLStreamWriter.writeNamespace XMLStreamWriter.setPrefix }
return ( JTextField.getText String.trim )
HashMap<String,Entry>.new HashMap<String,Entry>.new if ( ) { SecretKeyEntry.new Map<String,Entry>.put } if ( ) { SecretKeyEntry.new Map<String,Entry>.put }
Logger.log Logger.log Logger.log
String.indexOf String.indexOf String.substring String.substring SimpleDateFormat.new ParsePosition.new SimpleDateFormat.parse
Pattern.matcher while ( Matcher.find ) { Matcher.start Matcher.end }
Class.getClassLoader
if ( ) { return ( NumberFormat.format ) }
HashMap<String,String>.new
do { do { Segment.splitIntersections } while ( ) ; } while ( ) ;
List<Object>.stream
return ( Collections.unmodifiableList )
return ( String.equals String.equals )
if ( ) { for ( ; Math.min ; ) { } }
return ( Map<String,Object>.get )
if ( ) { PrintStream.println }
SynchronousQueue<Runnable>.new ThreadPoolExecutor.new SynchronousQueue<Runnable>.new ThreadPoolExecutor.new Class.forName Class.getDeclaredField Field.setAccessible Field.set Field.setAccessible if ( ) { PrintStream.println Exception.printStackTrace }
if ( JTabbedPane.getTabLayoutPolicy ) { JTabbedPane.getTabPlacement } JTabbedPane.setSelectedIndex
Exception.printStackTrace
System.currentTimeMillis if ( ) { System.currentTimeMillis }
URL.getFile
if ( ) { ComboPopup.getList JComboBox.getRenderer if ( ) { JComboBox.setRenderer } JComboBox.getEditor if ( ) { JComboBox.setEditor } JComboBox.setLayout JComboBox.setFocusable JComboBox.putClientProperty }
for ( ) { File.getPath }
return ( System.getProperty )
Callable<Boolean>.new
Class.forName
for ( Hashtable<String,Object>.values ) { } Hashtable<String,Object>.clear
return ( JAXBElement<Object>.new )
ArrayList.new Socket.getOutputStream OutputStreamWriter.new BufferedWriter.new ArrayList<Object>.size for ( ; ; ) { ArrayList<Object>.get System.identityHashCode Integer.toHexString BufferedWriter.write BufferedWriter.write BufferedWriter.append BufferedWriter.write } BufferedWriter.write BufferedWriter.flush if ( ) { BufferedWriter.close }
String.matches String.indexOf String.substring String.indexOf String.lastIndexOf String.substring String.lastIndexOf String.length String.substring String.length String.length Integer.parseInt String.length String.length for ( ; ; ) { String.substring Integer.parseInt } for ( ; ; ) { String.substring Integer.parseInt }
if ( ) { IllegalArgumentException.new }
if ( ) { List<Object>.add return ( ) }
Charset.forName String.getBytes
if ( ) { IllegalStateException.new }
Math.log10 Math.log10 return ( DecimalFormat.new Math.pow DecimalFormat.format )
Boolean.parseBoolean
ChangeEvent.new for ( ) { ChangeListener.stateChanged }
ByteBuffer.flip if ( ByteBuffer.remaining ) { ByteBuffer.capacity ByteBuffer.allocate }
if ( ) { RuntimeException.new } if ( ) { RuntimeException.new } if ( ) { Math.log } for ( ; ; ) { Math.log } for ( ; ; ) { if ( ) { Math.log } else { if ( ) { Math.log } } }
return ( Integer.intValue )
ArrayList.new File.new for ( ; ; ) { File.new if ( File.exists File.isDirectory ) { continue } Map<String,Object>.get if ( File.lastModified File.length ) { if ( ) { Adler32.new } File.lastModified File.length Map<String,Object>.put } if ( ) { Map<String,Object>.put } List<Map<String,Object>>.add }
return ( ThreadLocal<DateFormat>.get DateFormat.format )
HashMap<String,Object>.new ArrayList<Object>.new
ArrayList.new System.currentTimeMillis Random.new for ( ; ; ) { if ( Random.nextBoolean ) { ArrayList.add } }
if ( ) { if ( ) { Writer.write } Writer.write return ( ) }
Lock.lock Lock.unlock
HashMap.get if ( ) { RuntimeException.new }
return ( ConcurrentHashMap<Object,AtomicLong>.new )
return ( HashSet<Object>.new HashSet<Object>.size )
return ( String.new )
List.size List.get
Comparator.comparing Collections.sort
Number.intValue
if ( String.equals ) { if ( String.equals ) { } }
if ( ) { Integer.valueOf }
if ( String.startsWith ) { String.substring } else { if ( String.startsWith ) { String.substring } }
RuntimeException.new
if ( Double.isNaN ) { return ( ) } if ( ) { for ( ; ; ) { for ( ; ; ) { Math.pow Math.pow } Math.pow } }
for ( Map<String,Object>.keySet ) { Map<String,Object>.get for ( ) { if ( Map<String,Object>.containsKey ) { } if ( Map<String,Object>.get ) { Map<String,Object>.get } } if ( ) { if ( Map<String,Object>.containsKey ) { } if ( Map<String,Object>.get ) { } } } if ( Set<String>.isEmpty ) { Set<String>.size Map<String,Object>.size }
if ( ) { TransformerException.new ErrorListener.warning } else { PrintStream.println }
if ( List<Object>.isEmpty ) { } List<Object>.size
if ( ) { Closeable.close }
Map<String,Object>.get if ( ) { IllegalArgumentException.new } Map<Object,List<Object>>.get if ( ) { ArrayList.new Map<Object,List<Object>>.put } List<Object>.add
System.arraycopy
Class<>.getName ClassLoader.loadClass
if ( ) { for ( List<Object>.size ; ; ) { List<Object>.get String.valueOf if ( List<String>.contains ) { } } }
return ( Date.new )
return ( Integer.intValue )
if ( Set<Object>.contains ) { return ( ) } Set<Object>.add for ( ; ; ) { if ( ) { if ( Set<Object>.contains ) { Set<Object>.add HashSet<Object>.new Set<Object>.remove } } }
return ( String.toUpperCase String.equals String.toUpperCase String.indexOf )
if ( ) { RuntimeException.new return ( ) }
if ( ) { Math.max }
if ( ) { while ( ) { if ( Object.equals ) { } } }
if ( ) { RuntimeException.new } for ( ; ; ) { ArrayList<Map<Integer,Object>>.get ArrayList<Map<Integer,Object>>.get for ( Map<Integer,Object>.entrySet ) { Entry<Integer,Object>.getKey Entry<Integer,Object>.getValue Map<Integer,Object>.get if ( ) { Map<Integer,Object>.put } } }
if ( ) { Integer.valueOf }
if ( ) { IllegalArgumentException.new }
if ( ) { IllegalArgumentException.new } ByteArrayInputStream.new
return ( Locale.getDefault )
if ( ArrayList.isEmpty ) { for ( ; ArrayList.size ; ) { ArrayList.get } }
String.getBytes String.new
String.equals
Throwable.printStackTrace
return ( Set<Class<Object>>.contains )
if ( ) { NullPointerException.new } String.charAt if ( ) { if ( String.equalsIgnoreCase String.equalsIgnoreCase ) { } } Writer.write Writer.write
RuntimeException.new
for ( ) { StringBuffer.new StringBuffer.reverse StringBuffer.toString }
if ( ) { System.getProperty if ( ) { IllegalStateException.new } Class.forName Class<>.newInstance RuntimeException.new } Class.getName IllegalStateException.new
List<Object>.clear
Math.max
if ( ) { PrintStream.println }
ByteArrayOutputStream.new return ( ByteArrayOutputStream.toByteArray )
if ( ) { IllegalArgumentException.new }
Logger.log ReadWriteLock.readLock Lock.lock Map<Class<Object>,List<Object>>.get for ( ) { Logger.log } ReadWriteLock.readLock Lock.unlock
ArrayList<Object>.size ArrayList<Object>.new for ( ) { ArrayList<Object>.add }
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new }
if ( Map<String,String>.isEmpty ) { IllegalArgumentException.new }
if ( ) { NullPointerException.new }
while ( List<String>.size ) { List<String>.get if ( String.startsWith ) { return ( ) } List<String>.add }
return ( Pattern.split )
if ( ) { ReentrantLock.isHeldByCurrentThread } ReentrantLock.lock Condition.signalAll
RuntimeException.new
Class.getName
return ( ArrayList<Object>.new )
String.format String.format
return ( List<Object>.size Math.min List<Object>.subList )
AssertionError.new
Math.min
return ( String.toCharArray return ( ) )
String.getBytes
LinkedList<String>.new Arrays.asList LinkedList<String>.addAll
if ( ) { IllegalStateException.new } System.nanoTime
return ( ByteBuffer.get )
AtomicBoolean.set ExecutorService.shutdown if ( ExecutorService.awaitTermination ) { }
String.format
StringBuilder.new System.identityHashCode Integer.toHexString StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append return ( StringBuilder.toString )
SimpleTimeZone.new SimpleTimeZone.setStartRule SimpleTimeZone.setEndRule SimpleTimeZone.setStartYear GregorianCalendar.new GregorianCalendar.getTime SimpleTimeZone.inDaylightTime GregorianCalendar.new GregorianCalendar.getTime SimpleTimeZone.inDaylightTime GregorianCalendar.new GregorianCalendar.getTime SimpleTimeZone.inDaylightTime
if ( ) { ArrayList<Object>.new }
Set<Object>.remove if ( ) { Map<String,Queue<Object>>.remove if ( ) { if ( ) { Queue<Object>.size } PriorityBlockingQueue<Object>.addAll } }
if ( ) { NullPointerException.new }
if ( ) { if ( ) { JTextField.setText } } JButton.setText JButton.setText JLabel.setText JLabel.setText
Class.getName String.lastIndexOf String.substring
if ( ) { IllegalArgumentException.new }
ObjectInputStream.defaultReadObject ObjectInputStream.readObject MalformedObjectNameException.toString InvalidObjectException.new
if ( ) { ArrayList<Serializable>.new }
if ( ) { return ( String.replace ) }
StringBuilder.new for ( ; ; ) { String.length Random.nextInt String.charAt StringBuilder.append } return ( StringBuilder.toString )
if ( File.exists File.isFile ) { return ( ) } for ( ) { KeyStore.getInstance if ( ) { CertificateException.new } continue FileInputStream.new KeyStore.load if ( ) { File.getAbsolutePath CertificateException.new } continue return ( ) }
Connection.prepareStatement for ( ; ; ) { PreparedStatement.setFloat PreparedStatement.setInt PreparedStatement.executeUpdate } PreparedStatement.close
Hashtable<Object,Object>.get if ( ) { Hashtable<Object,Object>.put return ( ) }
Integer.valueOf Integer.valueOf Integer.valueOf PrintWriter.println PrintWriter.println PrintWriter.println PrintWriter.println PrintWriter.println PrintWriter.println
ArrayList<Object>.new for ( ) { if ( ) { List<Object>.add } } return ( Collections.unmodifiableList )
LinkedList.new ArrayList.new while ( Iterator<Object>.hasNext ) { Iterator<Object>.next for ( ) { List<Object>.add } }
if ( Rectangle2D.getWidth ) { return ( ) } if ( Rectangle2D.getWidth ) { return ( ) } StringBuilder.new for ( ; String.length ; ) { String.charAt StringBuilder.append if ( Rectangle2D.getWidth Rectangle2D.getWidth ) { StringBuilder.length StringBuilder.deleteCharAt StringBuilder.append break } } if ( StringBuilder.length String.length ) { StringBuilder.toString }
if ( ) { IllegalArgumentException.new } return ( Integer.valueOf Hashtable<Integer,Field>.get )
if ( String.length ) { ArrayList.new for ( String.split ) { if ( ) { if ( ) { List<Object>.add } } } if ( List<Object>.size ) { } }
StringWriter.new PrintWriter.new Throwable.printStackTrace return ( StringWriter.toString )
UnsupportedOperationException.new
StringBuffer.new StringBuffer.append Class<>.getName StringBuffer.append StringBuffer.append Map<String,>.keySet Set.iterator while ( Iterator.hasNext ) { Iterator.next Map<String,>.get StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append } StringBuffer.append return ( StringBuffer.toString )
return ( Integer.parseInt )
if ( ) { Collections.emptyList }
if ( ) { Thread.interrupt } ExecutorService.shutdownNow
if ( ) { NullPointerException.new } List<Object>.addAll
PrintStream.println if ( ) { List<Integer>.size List<Integer>.get } Math.max Math.min
for ( ) { if ( String.equals ) { return ( ) } }
StringBuffer.new StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append return ( StringBuffer.toString )
Boolean.booleanValue Boolean.booleanValue
if ( StrictMath.pow ) { }
if ( ) { IllegalArgumentException.new } if ( ) { NoSuchElementException.new } if ( ) { IllegalArgumentException.new }
if ( ) { TypeMismatch.new }
Double.doubleToLongBits OutputStream.write OutputStream.write OutputStream.write OutputStream.write OutputStream.write OutputStream.write OutputStream.write OutputStream.write
Integer.parseInt
if ( ) { IllegalArgumentException.new }
StringBuffer.new for ( ; ; ) { if ( ) { return ( StringBuffer.toString String.trim ) } StringBuffer.append }
ArrayList<Object>.size for ( ; ; ) { ArrayList<Object>.get }
return ( System.currentTimeMillis )
for ( ; Enumeration<Object>.hasMoreElements ; ) { Enumeration<Object>.nextElement }
HashMap<Object,Object>.new HashSet<Object>.new
return ( Executors.callable )
Hashtable.clear
return ( Map<String,Object>.get )
if ( ) { DocumentHandler.characters }
return ( NamedNodeMap.item )
Math.min System.arraycopy System.arraycopy
if ( ) { NullPointerException.new } IllegalArgumentException.new
Set<Attribute>.size
IOException.new IOException.initCause
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } System.nanoTime return ( ThreadPoolExecutor.getQueue BlockingQueue.size ) Callable<Integer>.new return ( ThreadPoolExecutor.getActiveCount ) Callable<Integer>.new return ( ThreadPoolExecutor.getQueue BlockingQueue.size ThreadPoolExecutor.getActiveCount ) Callable<Integer>.new return ( ThreadPoolExecutor.getPoolSize ) Callable<Integer>.new
Long.parseLong
FileReader.new BufferedReader.new if ( ) { BufferedReader.readLine } else { if ( ) { BufferedReader.readLine BufferedReader.readLine } else { BufferedReader.readLine } } BufferedReader.close String.new String.split for ( ; ; ) { Double.parseDouble }
for ( ; ; ) { File.new ImageIO.read continue Math.round Math.round BufferedImage.getWidth BufferedImage.getHeight BufferedImage.getWidth BufferedImage.getRGB BufferedImage.getWidth BufferedImage.getHeight BufferedImage.getWidth BufferedImage.getHeight BufferedImage.getWidth BufferedImage.setRGB }
Math.pow
if ( ) { if ( ) { NullPointerException.new } }
Map<Integer,Process>.remove
Map<Object,Object>.containsKey Map<Object,Object>.remove
if ( ) { if ( ) { if ( ) { Exception.printStackTrace SAXException.new } } }
if ( ) { StringBuilder.new StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append while ( ) { StringBuilder.insert StringBuilder.append StringBuilder.append StringBuilder.append } StringBuilder.toString }
String[].clone
Callable<Void>.new Callable<Void>.new Callable<Void>.new Callable<Void>.new
Arrays.asList
HashSet.new while ( ) { Set<Object>.add }
if ( Arrays.equals ) { return ( ) }
Arrays.copyOf
return ( Map.get )
if ( ) { List<Object>.size } for ( ; List<Object>.size ; ) { List<Object>.get List<Object>.get if ( ) { List<Object>.get List<Object>.get for ( ; List<Object>.size ; ) { List<Object>.get if ( String.equals ) { } List<Object>.get for ( ; List<Object>.size ; ) { List<Object>.get } } } }
if ( ) { ArrayList<Object>.new } if ( ) { ArrayList<Object>.add }
for ( Map<String,Object>.values ) { }
HashMap<String,String>.new Map<String,String>.putAll Collections.unmodifiableMap
String.valueOf
StringBuilder.new for ( ) { if ( ) { StringBuilder.append } StringBuilder.append StringBuilder.append StringBuilder.append } return ( StringBuilder.toString )
if ( ConcurrentMap<String,Object>.get ConcurrentMap<String,Object>.remove ) { Logger.finer }
Writer.close if ( ) { IOException.new }
return ( ConcurrentMap<Integer,Object>.size )
Object.getClass if ( ) { ThreadLocal<Object>.set }
Arrays.asList ArrayList.new Math.abs for ( ; List<Object>.size ; ) { List<Object>.get Math.abs }
return ( Class.newInstance )
if ( ) { ArrayList<Object>.set }
String.toUpperCase Map<String,Object>.get Switch ( ) { case : InputStream.close break case : if ( ) { DataOutputStream.new } break } ObjectOutputStream.new ObjectOutputStream.writeObject ObjectOutputStream.flush IOException.new
return ( Collections.unmodifiableCollection )
return ( Math.sqrt )
if ( ) { return ( Optional.empty ) } if ( Object.getClass Class<Object>.isAssignableFrom ) { Class<Object>.cast return ( Optional.of ) } return ( Optional.empty )
if ( ) { NullPointerException.new }
return ( if ( ) { ConcurrentHashMap<String,Object>.get } return ( ) )
RuntimeException.new
List<Object<Object<Object,Object>,Object<Object<Object,Boolean>,SortedSet<Object>>>>.size if ( ) { List<Object<Object<Object,Object>,Object<Object<Object,Boolean>,SortedSet<Object>>>>.get } else { TreeSet.new }
ProcessingEnvironment.getElementUtils Elements.getTypeElement if ( ) { ProcessingEnvironment.getElementUtils Elements.getTypeElement return ( ) }
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new }
HashMap<String,Long>.new for ( Map<String,Map<String,Long>>.values ) { Map<String,Long>.putAll } HashMap<String,Long>.new for ( Map<String,List<String>>.entrySet ) { Entry<String,List<String>>.getKey Entry<String,List<String>>.getValue List<String>.size for ( Entry<String,List<String>>.getValue ) { if ( Map<String,Long>.get ) { Map<String,Long>.get } else { if ( Map<String,Long>.get ) { Map<String,Long>.get } } } Entry<String,List<String>>.getKey Map<String,Long>.put }
StringBuilder.new for ( ; String.length ; ) { String.codePointAt if ( ) { StringBuilder.append } } return ( StringBuilder.toString )
if ( ) { for ( ; Iterator.hasNext ; ) { Iterator.next } } if ( ) { for ( ; Iterator.hasNext ; ) { Iterator.next } }
if ( ) { if ( ) { if ( ) { if ( ) { CompletableFuture<Void>.complete } } } }
Map<String,Object>.get
if ( List.isEmpty ) { return ( ) } Integer.valueOf
Rectangle.new
Integer.new HashMap.get
if ( Map<Object,Boolean>.get ) { return ( ) }
return ( String.equals )
return ( Long.toHexString )
return ( HashMap<Object,Object>.new )
if ( ) { NullPointerException.new } if ( ) { return ( Collections.emptyList ) }
StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append for ( ) { StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append } StringBuilder.append
if ( ) { String.replaceAll String.length for ( ; ; ) { String.substring Integer.parseInt } }
return ( List.nil )
System.exit
if ( ) { HashSet<Object>.new Set<Object>.add return ( ) }
for ( List<Object>.size ; ; ) { List<Object>.get if ( String.equals ) { if ( ) { Future<>.cancel if ( AtomicBoolean.getAndSet ) { } } else { if ( ) { List<Object>.remove } } } }
for ( ; ; ) { Math.min }
if ( ) { IllegalArgumentException.new }
if ( ) { if ( String.equals ) { } } if ( ) { if ( ) { Long.parseLong } } String.equalsIgnoreCase
HttpsURLConnection.getDefaultSSLSocketFactory ServerSocket.new ServerSocket.getLocalPort SSLSocketFactory.createSocket ServerSocket.accept Socket.close ServerSocket.close
if ( ) { WildcardType.getLowerBounds if ( ) { WildcardType.getUpperBounds return ( ) } }
Map<Object,Object>.get Map<Object,Object>.put
Map<Object,Object>.entrySet while ( Iterator<Entry<Object,Object>>.hasNext ) { Iterator<Entry<Object,Object>>.next if ( Entry<Object,Object>.getValue ) { Entry<Object,Object>.getKey Iterator<Entry<Object,Object>>.remove } }
ByteBuffer.allocate ByteBuffer.array
Vector.remove
Vector.addElement
if ( Collection<Object>.size ) { IllegalArgumentException.new } ByteArrayOutputStream.new ByteArrayOutputStream.flush
if ( String.intern ) { return ( ) } if ( String.intern ) { return ( ) }
if ( String.charAt ) { } String.indexOf String.indexOf if ( ) { IllegalArgumentException.new } String.substring Integer.parseInt String.substring Integer.parseInt String.substring Integer.parseInt if ( ) { IllegalArgumentException.new }
PolicyListHelper.read
File.new if ( File.isFile ) { return ( Optional.empty ) } FileInputStream.new Properties.new Properties.load Properties.getProperty Properties.getProperty Properties.getProperty return ( Optional.of )
if ( ) { NullPointerException.new }
List<Object>.iterator while ( Iterator<Object>.hasNext ) { Iterator<Object>.next }
return ( URLEncoder.encode )
ArrayList<Object>.add
File.delete
StringTokenizer.new while ( StringTokenizer.hasMoreTokens ) { StringTokenizer.nextToken if ( String.length ) { Hashtable<String,Object>.get if ( ) { Hashtable<String,Object>.put } } }
ArrayList<Object>.new while ( ) { ArrayList<Object>.add } while ( ) { ArrayList<Object>.add }
InterruptedException.printStackTrace
for ( ) { List<Object>.add }
Map<String,Object>.get
ConcurrentMap<Integer,Object>.put
List<Object>.get
while ( ) { if ( List<Object>.size ) { List<Object>.add } else { List<Object>.add } } if ( String.length ) { if ( List<Object>.size ) { List<Object>.get String.length } else { String.length List<Object>.add } }
if ( ) { PrintStream.println }
CharSequence.length for ( ; ; ) { if ( CharSequence.charAt ) { break } } for ( ; ; ) { if ( CharSequence.charAt ) { break } } return ( CharSequence.subSequence CharSequence.toString )
return ( BigInteger.valueOf )
if ( ) { ReadOnlyBufferException.new } if ( ) { IllegalArgumentException.new } if ( FloatBuffer.remaining ) { BufferOverflowException.new } FloatBuffer.remaining FloatBuffer.get
String.valueOf Properties.get if ( ) { File.new if ( File.exists ) { File.new if ( File.exists ) { IOException.new } } File.getCanonicalPath IOException.new IOException.initCause IOException.new IOException.initCause Properties.get } if ( ) { IOException.new } return ( JMXServiceURL.new )
if ( ) { Integer.valueOf }
for ( List.size ; ; ) { List.get }
return ( Map<String,Object>.get )
if ( ) { Integer.valueOf }
List<String>.add
ReadWriteLock.writeLock Lock.lockInterruptibly for ( ) { Set<String>.addAll } if ( ) { List<Object>.add } for ( ) { for ( ) { if ( Set<String>.contains ) { List<Object>.add } } } for ( ) { for ( ) { List<Object>.add if ( ) { List<Object>.add } } } ReadWriteLock.writeLock Lock.unlock
ThreadLocal<ByteBuffer>.get if ( ByteBuffer.capacity ) { ByteBuffer.allocateDirect ByteOrder.nativeOrder ByteBuffer.order ThreadLocal<ByteBuffer>.set } ByteBuffer.rewind ByteBuffer.put ByteBuffer.put Lock.lock Lock.unlock BigInteger.new BigInteger.intValue
if ( ) { ArrayList.add return ( ) } ArrayList.add
HashMap<String,String>.new ArrayList<Object>.new List<Object>.add
if ( ) { ResultSet.close }
if ( ) { ArrayList<Object>.size for ( ; ; ) { ArrayList<Object>.get } }
if ( ) { if ( DefaultMutableTreeNode.getUserObject Object.toString Object.toString String.equals ) { return ( ) } } else { if ( DefaultMutableTreeNode.getUserObject Object.equals ) { return ( ) } } for ( ; DefaultMutableTreeNode.getChildCount ; ) { DefaultMutableTreeNode.getChildAt }
if ( ) { HashMap<String,Object>.new } Map<String,Object>.put
URL.new PrivilegedExceptionAction<Object>.new AccessController.doPrivileged PrivilegedActionException.getException
Date.new
if ( ) { Vector.elements while ( Enumeration.hasMoreElements ) { Enumeration.nextElement } }
Properties.setProperty
do { Node.getNextSibling } while ( Node.getNodeType ) ;
Properties.getProperty if ( ) { Properties.getProperty }
ArrayList.new
return ( MetalSplitPaneUI.new )
List.nil List.nil List.nil List.of List.of List.nil
if ( ) { IllegalArgumentException.new }
if ( ) { if ( String.equals ) { if ( String.equals ) { return ( ) } } }
RuntimeException.new
if ( ) { if ( ) { ArrayList.new List.add } } for ( List.iterator ; Iterator.hasNext ; ) { Iterator.next if ( String.length ) { Class.forName Class.newInstance } } PrintStream.println PrintStream.println
if ( ) { return ( Short.intValue ) } if ( ) { return ( Integer.intValue ) } if ( ) { return ( Long.intValue ) }
return ( if ( ) { Runnable.new SwingUtilities.invokeLater } )
if ( ) { IllegalArgumentException.new }
Class.getSimpleName String.format URI.create
if ( ) { IllegalArgumentException.new }
StringBuilder.new for ( Map<String,Object>.entrySet ) { Entry<String,Object>.getKey StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append Entry<String,Object>.getValue if ( ) { StringBuilder.append for ( ) { Object.toString StringBuilder.append StringBuilder.append } } else { StringBuilder.append StringBuilder.append StringBuilder.append } } return ( StringBuilder.toString )
Charset.forName String.getBytes
if ( ) { RuntimeException.new }
if ( ) { IllegalArgumentException.new } TimeUnit.convert
List<Object>.add
ForwardRequestHelper.read
Double.doubleToLongBits
if ( ) { IndexOutOfBoundsException.new }
BitSet.new for ( ; ; ) { if ( BitSet.get ) { if ( ) { if ( BitSet.get BitSet.get ) { if ( ) { BitSet.set } } } } BitSet.set }
if ( ) { Boolean.toString List<Object>.add List<Object>.add Arrays.toString List<Object>.add }
return ( String.new )
if ( String.isEmpty ) { return ( ) }
if ( List<Object>.isEmpty ) { return ( List<Object>.get ) }
return ( Math.ceil )
ArrayList<String>.new HashMap<String,ArrayList<Object>>.new File.new if ( File.exists ) { } for ( File.listFiles ) { if ( File.getName String.endsWith ) { } } if ( ArrayList<String>.size ) { }
for ( ) { if ( ) { String.contains } if ( ) { String.contains } if ( ) { String.contains } if ( ) { String.contains } }
HashMap<Object,Object>.new Map<Object,Object>.put Map<Object,Object>.put if ( ) { Map<Object,Object>.put } Map<Object,Object>.put if ( ) { Map<Object,Object>.put Map<Object,Object>.put Map<Object,Object>.put Map<Object,Object>.put Map<Object,Object>.put Map<Object,Object>.put Map<Object,Object>.put if ( ) { HashMap<Object,Object>.new Map<Object,Object>.put Map<Object,Object>.put } }
UnsupportedOperationException.new
Pattern.matcher if ( Matcher.find ) { String.format GeneralSecurityException.new } Matcher.group String.replace KeyFactory.getInstance return ( KeyFactory.generatePrivate )
if ( ) { IllegalStateException.new }
return ( String.format )
while ( ArrayBlockingQueue<Object>.isEmpty ) { }
do { if ( File.canWrite ) { return ( ) } Thread.sleep } while ( ) ; if ( ) { IOException.new } IOException.new
if ( SortedMap<String,Object>.containsKey ) { } SortedMap<String,Object>.put
if ( ) { return ( Integer.doubleValue ) } if ( ) { return ( Double.doubleValue ) } else { return ( Long.doubleValue ) }
if ( ) { ConcurrentModificationException.new }
Double.new
if ( ) { IllegalArgumentException.new } List<Object>.add
Math.abs if ( Double.isNaN ) { ArithmeticException.new } do { Math.abs } while ( ) ; if ( ) { ArithmeticException.new }
if ( ) { ByteArrayOutputStream.write } else { ByteArrayOutputStream.write } ByteArrayOutputStream.write ByteArrayOutputStream.toByteArray
if ( ) { if ( ) { NullPointerException.new } }
if ( HashMap<String,Object>.containsKey ) { HashMap<String,Object>.remove } HashMap<String,Object>.put
HashMap<String,String>.new Map<String,String>.put
List.nil for ( ) { List<Object>.prepend } return ( List<Object>.reverse )
return ( Class.getName )
Integer.toString
Runnable.new
return ( HashMap<String,Object>.keySet )
StringBuffer.new for ( ) { StringBuffer.append StringBuffer.append } return ( StringBuffer.toString )
if ( ) { Math.max }
if ( ) { IllegalStateException.new }
String[].clone
if ( ) { return ( BigInteger.valueOf ) } BigInteger.valueOf BigInteger.shiftLeft return ( BigInteger.negate )
return ( Iterator<Object>.next )
ExecutorService.execute
return ( List<Object>.stream )
for ( Map<String,String>.keySet ) { }
if ( ) { if ( ) { if ( ) { while ( Enumeration<Object>.hasMoreElements ) { Enumeration<Object>.nextElement } } } }
PriorityQueue<Integer>.new for ( ) { PriorityQueue<Integer>.add } PriorityQueue<Integer>.remove for ( ) { PriorityQueue<Integer>.poll } PriorityQueue<Integer>.poll
ByteBuffer.put ByteBuffer.putShort ByteBuffer.put ByteBuffer.putLong
OutputStreamWriter.new PrintWriter.new IOException.printStackTrace
HashMap<UUID,Object>.new
if ( ) { NullPointerException.new }
for ( ; ; ) { ByteArrayOutputStream.new ByteArrayOutputStream.flush ByteArrayOutputStream.toByteArray ByteArrayInputStream.new if ( String.contains String.contains ) { } }
RuntimeException.new
ArrayList<Object>.new
System.getProperty Integer.getInteger LocateRegistry.getRegistry
HashMap.new HashMap.new HashMap.new Arrays.asList Map.put Arrays.asList Map.put
if ( ) { Integer.valueOf }
if ( ) { Integer.valueOf }
Arrays.fill if ( ) { IOException.new } if ( ) { if ( ) { IOException.new } }
JTable.getColumnModel for ( ; JTable.getColumnCount ; ) { TableColumnModel.getColumn TableColumn.getHeaderRenderer TableColumnModel.getColumn TableColumn.getHeaderValue if ( ) { JTable.getTableHeader JTableHeader.getDefaultRenderer } TableCellRenderer.getTableCellRendererComponent Component.getPreferredSize Math.max for ( ; JTable.getRowCount ; ) { JTable.getCellRenderer JTable.getValueAt TableCellRenderer.getTableCellRendererComponent Component.getPreferredSize Math.max } TableColumnModel.getColumn TableColumn.setPreferredWidth }
if ( ) { if ( ) { if ( ) { if ( ) { URL.new } } } }
ArrayList<Object>.new if ( String.trim String.isEmpty ) { } Collection<Object>.add Collection<Object>.add
if ( ) { NullPointerException.new }
Boolean.valueOf
System.getProperty StringBuffer.new for ( ; ; ) { for ( ; ; ) { StringBuffer.append StringBuffer.append } if ( ) { StringBuffer.append } StringBuffer.append StringBuffer.append } StringBuffer.toString
if ( String.length ) { return ( ) } StringBuilder.new for ( ; String.length ; ) { String.substring Integer.parseInt StringBuilder.append } return ( StringBuilder.toString )
HashMap.get if ( ) { HashMap.get return ( ) }
while ( ) { String.charAt String.charAt }
Vector<String>.indexOf if ( Vector<String>.size Vector<String>.size ) { Vector<String>.get Long.valueOf }
if ( String.equals ) { return ( ) }
PrintWriter.print PrintWriter.print PrintWriter.print PrintWriter.print System.identityHashCode Integer.toHexString PrintWriter.print PrintWriter.print if ( ) { PrintWriter.println } else { PrintWriter.println } if ( ) { PrintWriter.flush PrintWriter.println PrintWriter.println }
HashSet<String>.addAll
StringBuilder.new StringBuilder.append for ( ; ; ) { AtomicLongArray.get StringBuilder.append if ( ) { return ( StringBuilder.append StringBuilder.toString ) } StringBuilder.append StringBuilder.append }
String.split if ( ) { IllegalArgumentException.new }
if ( ) { Integer.valueOf }
return ( Class<>.isAnnotationPresent Class<>.getAnnotation )
if ( Collection<Integer>.size ) { InvalidParameterException.new }
LinkedList<Object>.new LinkedList<Object>.new for ( ; ; ) { List<Object>.add List<Object>.add }
if ( ) { return ( Collections.unmodifiableList ) }
DecimalFormat.new Vector.new for ( Collection.iterator ; Iterator.hasNext ; ) { Iterator.next if ( ) { DecimalFormat.format Vector.add } else { Vector.add } }
if ( ) { return ( Class.forName ) }
System.currentTimeMillis for ( ; ; ) { Math.random Math.random Math.random Math.random Math.random Math.random Math.random Math.random Double.new Graphics2D.draw } System.currentTimeMillis
if ( ) { if ( ) { IllegalArgumentException.new } return ( ) } IllegalArgumentException.new
HashSet<String>.new for ( ) { Set<String>.add } return ( Set<String>.toArray )
NoSuchElementException.new
ServerSocket.close IOException.printStackTrace
if ( ) { IllegalArgumentException.new }
if ( ) { Integer.valueOf }
while ( Iterator<Object>.hasNext ) { Iterator<Object>.next }
JarFile.new if ( JarFile.getManifest ) { JarFile.getManifest Manifest.getMainAttributes Attributes.getValue Attributes.getValue Attributes.getValue } else { File.getName String.lastIndexOf String.substring String.substring File.getAbsolutePath PrintStream.println } File.getAbsolutePath PrintStream.println
if ( ) { ArrayList<Object>.new }
JButton.setVisible JLabel.setText Thread.new Thread.start
if ( ) { IllegalStateException.new } if ( ) { IllegalStateException.new }
if ( ) { StringBuilder.new StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.toString } if ( ) { Inet6Address.getByAddress AssertionError.new }
if ( ) { IllegalStateException.new } if ( ) { System.getenv } if ( ) { String.trim } if ( String.isEmpty ) { IllegalStateException.new } for ( ) { if ( String.equals ) { break } } if ( ) { IllegalStateException.new }
if ( ) { if ( Set<String>.isEmpty ) { Set<String>.iterator while ( Iterator<String>.hasNext ) { Iterator<String>.next for ( ) { if ( ) { while ( Iterator<Object>.hasNext ) { Iterator<Object>.next } } } } } }
if ( String.length ) { return ( ) }
List<String>.size List<String>.toArray if ( ) { Hashtable<String,String>.new Hashtable<String,String>.put Hashtable<String,String>.put Hashtable<String,String>.put Hashtable<String,String>.put Hashtable<String,String>.put InitialDirContext.new }
Math.min Math.round
StringBuilder.new if ( ) { StringBuilder.append } else { StringBuilder.append } for ( ; ; ) { if ( String.endsWith ) { Object.toString StringBuilder.append StringBuilder.append } else { StringBuilder.append Object.toString StringBuilder.append StringBuilder.append } } StringBuilder.length StringBuilder.length StringBuilder.replace if ( ) { StringBuilder.append } return ( StringBuilder.toString )
UnsupportedOperationException.new
HashMap.new
Document.getDoctype DocumentType.getNotations NamedNodeMap.getNamedItem Notation.getNodeName
for ( ; ; ) { if ( ) { Container.invalidateTree } else { if ( ) { Component.invalidate } } }
JComboBox<String>.getModel JComboBox<String>.setModel JComboBox<String>.insertItemAt JComboBox<String>.setSelectedIndex
for ( ; ; ClassLoader.getParent ) { }
return ( Integer.intValue )
StringBuilder.new StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append return ( KeyManagerFactory.new ) InvocationTargetException.getCause StringBuilder.toString NoSuchAlgorithmException.new NoSuchAlgorithmException.initCause
UnsupportedOperationException.new
String.valueOf
System.arraycopy
List<Object>.iterator while ( Iterator<Object>.hasNext ) { Iterator<Object>.next }
OutputStreamWriter.new Writer.write
ArrayList.new for ( ) { List<String>.add }
return ( String.compareTo )
if ( Collection<Object>.contains ) { }
ArrayList<Object>.new for ( ) { List<Object>.add }
if ( Method.isAccessible ) { Method.setAccessible }
HashMap<String,Object>.new while ( JarInputStream.getNextJarEntry ) { if ( JarEntry.isDirectory ) { JarEntry.getSize do { if ( ) { System.arraycopy } while ( JarInputStream.read ) { } } while ( JarInputStream.available ) ; if ( ) { System.arraycopy } JarEntry.getName HashMap<String,Object>.put } }
if ( ) { if ( Hashtable<String,Integer>.containsKey ) { Hashtable<String,Integer>.get if ( HashSet<Integer>.contains ) { if ( ArrayList<String>.contains ) { if ( ArrayList<String>.contains ) { ArrayList<String>.indexOf ArrayList<String>.remove } else { if ( ArrayList<String>.size ) { ArrayList<String>.remove } } ArrayList<String>.add } } } }
VMThread.new VMThread.start
return ( Boolean.booleanValue )
return ( Integer.intValue )
return ( Integer.intValue )
if ( ) { ZipException.new } if ( ) { ZipException.new } if ( ) { ZipException.new } ZipEntry.setMethod if ( ) { ZipEntry.setCrc ZipEntry.setSize ZipEntry.setCompressedSize } if ( ) { ZipEntry.setExtra }
RuntimeException.new
return ( Integer.intValue )
Integer.valueOf
StringBuilder.new if ( String.startsWith ) { StringBuilder.append while ( String.startsWith ) { StringBuilder.append String.substring } if ( String.startsWith ) { String.length String.substring } } else { StringBuilder.append } String.replace StringBuilder.append return ( StringBuilder.toString )
return ( StringBuffer.new StringBuffer.toString )
if ( ) { String.toUpperCase }
for ( ) { Math.abs }
for ( ; ; ) { AtomicInteger.get if ( BlockingQueue<Runnable>.isEmpty ) { return ( ) } if ( AtomicInteger.compareAndSet ) { ReentrantLock.lock Condition.signalAll ReentrantLock.unlock return ( ) } }
Graphics2D.setPaint
BigInteger.new
return ( ThreadLocal<Integer>.get Integer.intValue )
AtomicBoolean.new
return ( MessageDigest.isEqual MessageDigest.isEqual )
TreeMap.clone if ( String.equals ) { if ( ) { IllegalArgumentException.new } }
if ( ) { IllegalArgumentException.new }
if ( ) { for ( ; ; ) { if ( Map<Integer,Double>.containsKey ) { Map<Integer,Double>.get } } if ( ) { IllegalArgumentException.new } } Map<Integer,Double>.putAll Set<Integer>.addAll
File.getAbsolutePath
StringBuilder.new StringBuilder.new HashSet.new Collection<Object>.stream if ( StringBuilder.length ) { StringBuilder.toString Set<String>.add } else { if ( StringBuilder.length StringBuilder.length StringBuilder.length ) { StringBuilder.toString String.toUpperCase Set<String>.add } }
System.getProperty if ( String.equals ) { if ( String.equals ) { PrintStream.println return ( ) } }
return ( Point2D.getY Point2D.getX Double.new )
if ( ) { EOFException.new }
ImageCapabilities.new ImageCapabilities.new BufferCapabilities.new
KeyEvent.getComponent KeyEvent.getID KeyEvent.getWhen KeyEvent.getModifiers KeyEvent.getKeyCode KeyEvent.getKeyChar MenuKeyEvent.new if ( MenuKeyEvent.isConsumed ) { KeyEvent.consume }
return ( Integer.intValue )
if ( ) { Integer.valueOf }
if ( ) { if ( ) { URL.new } }
IllegalStateException.new
String.indexOf if ( ) { String.length String.indexOf if ( ) { return ( String.length String.substring ) } }
if ( ) { if ( ) { if ( String.length String.lastIndexOf String.length ) { String.length String.substring } } } Hashtable.get if ( ) { if ( ) { if ( String.equals ) { return ( ) } } } if ( String.equals ) { return ( ) }
HashSet<CRL>.new
while ( ) { if ( ) { String.length String.substring break } String.substring String.length String.substring if ( ) { String.substring } else { String.length String.substring break } String.length String.substring }
return ( Vector.elements )
if ( ) { IllegalArgumentException.new }
if ( ) { IllegalArgumentException.new }
Set<Object>.iterator while ( Iterator<Object>.hasNext ) { if ( Iterator<Object>.next ) { return ( ) } } NoSuchElementException.new
if ( ) { IllegalStateException.new } if ( ) { IllegalStateException.new } RuntimeException.new
File.listFiles for ( ; ; ) { if ( File.isDirectory ) { continue } if ( File.getName String.endsWith ) { File.getAbsolutePath String.length String.substring } }
EnumSet.of if ( EnumSet<Object>.contains ) { }
return ( String.length String.charAt )
ArrayList<Object>.new ArrayList<Object>.new ArrayList<Object>.new for ( ) { if ( ) { ArrayList<Object>.add } else { ArrayList<Object>.add } } for ( ) { for ( ) { if ( ) { List<Object>.remove } } }
if ( ) { Class.newInstance }
Map<String,Timer>.remove if ( ) { Timer.cancel }
ArrayList<Object>.new if ( ) { List<Object>.addAll } for ( ) { List<Object>.addAll } Collections.shuffle return ( List<Object>.size Math.min List<Object>.subList )
if ( ) { String.replace String.replace String.replace }
Thread.sleep
if ( ) { IllegalStateException.new }
if ( ) { IllegalArgumentException.new } Security.getProvider if ( ) { NoSuchProviderException.new } if ( ) { NullPointerException.new }
EmulatedFields.put
if ( ) { Socket.getInputStream } return ( InputStream.skip )
return ( JAXBElement<Object>.new )
if ( Set<Object>.contains ) { Map<Object,Set<Object>>.put }
if ( ) { return ( Collections.unmodifiableList ) }
for ( ) { for ( ) { FileInputStream.new } }
if ( List<Object>.isEmpty ) { return ( ) } List<Object>.get
for ( ; ; ) { Float.byteValue }
PrintStream.println PrintStream.println
UnsupportedOperationException.new
AtomicReference<Object>.set
LinkedHashMap.clone for ( ; ; ) { LinkedHashMap.get LinkedHashMap.get } LinkedHashMap.new LinkedHashMap.put LinkedHashMap.keySet LinkedHashMap.values Collection.iterator Iterator.next Set.iterator Iterator.next LinkedHashMap.clone AbstractMap.put AbstractMap.values Collection.iterator Iterator.next AbstractMap.clear AbstractMap.put AbstractMap.keySet Set.iterator Iterator.next
if ( File.exists ) { if ( File.isDirectory ) { IOException.new } if ( File.canRead ) { IOException.new } } else { FileNotFoundException.new } return ( FileInputStream.new )
StringBuilder.new StringReader.new BufferedReader.new while ( BufferedReader.readLine ) { if ( String.startsWith ) { StringBuilder.append StringBuilder.append } } return ( StringBuilder.toString )
if ( ) { IllegalArgumentException.new }
if ( String.isEmpty ) { IllegalArgumentException.new }
Button.getActionCommand System.currentTimeMillis ActionEvent.new
if ( ) { String.valueOf }
if ( ) { IllegalArgumentException.new } Arrays.asList
HashMap<Object,Integer>.clear
Vector<Object>.size for ( ; ; ) { if ( Vector<Object>.elementAt ) { return ( ) } }
for ( ) { for ( ) { Vector.add } } if ( ) { if ( ) { Integer.toString } } IllegalArgumentException.new
return ( Map<Integer,Object>.get )
return ( String.replaceAll String.trim )
if ( ) { IllegalArgumentException.new }
return ( String.codePointCount )
return ( List<List<Object>>.get )
HashSet.new for ( ; ; ) { HashSet.add } for ( HashSet.iterator ; Iterator.hasNext ; ) { Integer.new Iterator.next } List.size List.size List.size
Attributes.getLength if ( ) { for ( ; ; ) { Attributes.getURI Attributes.getLocalName Attributes.getQName Attributes.getType Attributes.getValue } }
String.split String.split String.trim
return ( Arrays.asList )
UnsupportedOperationException.new
Collection<Object>.size
Math.tan
while ( Iterator.hasNext ) { Iterator.next if ( ) { Math.max Math.max } } Math.max
Arrays.asList ArrayList<Object>.new Arrays.asList List<Object>.addAll
for ( ; ; ) { if ( BitSet.get ) { continue } }
ReentrantReadWriteLock.readLock ReadLock.lock ReentrantReadWriteLock.readLock ReadLock.unlock
HttpURLConnection.getInputStream InputStream.read while ( ) { InputStream.read } InputStream.close if ( ) { InputStream.close }
return ( System.identityHashCode Integer.toHexString )
Map<Long,Set<String>>.get if ( ) { Map<Long,Set<String>>.put } if ( ) { Map<String,Object>.get if ( ) { Map<String,Object>.put } Map<String,Object>.get for ( ; ; ) { Set<String>.add } } Set<String>.add
SSLSocket.getSession return ( SSLSession.getPeerCertificates ) if ( Logger.isLoggable ) { SSLPeerUnverifiedException.toString Logger.log } Throwable.toString Logger.log
Arrays.asList List<Object>.addAll
HashMap.put
for ( ; String.length ; ) { String.charAt if ( ) { if ( ) { if ( ) { StringBuffer.append } else { StringBuffer.append } } } } if ( ) { String.length ArrayIndexOutOfBoundsException.new }
ArrayList<Runnable>.remove
Thread.currentThread Thread.getContextClassLoader ClassLoader.loadClass
if ( ) { String.valueOf return ( ) }
if ( List<Integer>.contains ) { IllegalArgumentException.new }
List.iterator while ( Iterator.hasNext ) { Iterator.next Map.keySet if ( Set.contains ) { continue } } ArrayList.new List.add if ( ) { List.add } else { List.add }
Boolean.valueOf
Error.new
ArrayBlockingQueue<Object>.new
return ( Integer.intValue )
Templates.newTransformer
if ( String.equals ) { } if ( String.equals ) { }
String.format
return ( Collection<Object>.size )
List.indexOf if ( ) { IllegalArgumentException.new }
if ( Properties.containsKey ) { Properties.get }
ScheduledExecutorService.shutdownNow
String.length String.lastIndexOf return ( String.substring String.length String.substring )
if ( ) { NullPointerException.new }
if ( ) { System.arraycopy } ByteBuffer.wrap ByteBuffer.putLong
return ( Collectors.toList Collections.emptyList )
return ( Method.getName String.equals Method.getParameterTypes )
if ( String.trim String.isEmpty ) { IllegalArgumentException.new }
Collections.sort
String.charAt Character.isLetterOrDigit String.indexOf for ( ; ; ) { String.charAt if ( Character.isLetterOrDigit String.indexOf ) { break } }
if ( ) { return ( PriorityBlockingQueue<Object>.new ) } PriorityBlockingQueue<Object>.new
ByteArrayOutputStream.new ByteArrayOutputStream.toByteArray String.new String.trim
return ( String.trim )
for ( ; ; ) { for ( ; ; ) { if ( ) { IllegalArgumentException.new } if ( Object.equals ) { IllegalArgumentException.new } } }
if ( ) { Vector<Object>.new } Vector<Object>.addElement
if ( ) { if ( ) { return ( Boolean.booleanValue ) } return ( String.equals ) }
Collections.emptyList
Graphics2D.getBackground Graphics2D.setPaint Graphics2D.getPaint Graphics2D.getColor Graphics2D.getBackground
Class<>.getAnnotation
if ( ) { Thread.join } Map<Object,ByteBuffer>.clear
if ( ) { NullPointerException.new } return ( Transferer<Object>.transfer )
for ( ; ; ) { if ( String.equalsIgnoreCase ) { return ( ) } }
if ( ) { if ( ) { NullPointerException.new } List<Object>.add }
ArrayList<Object>.new List<Object>.add for ( ) { if ( String.isEmpty ) { List<Object>.add } } CharSequence.length for ( ; List<Object>.isEmpty ; ) { CharSequence.charAt }
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new }
String.trim String.split for ( ; ; ) { Integer.parseInt }
if ( ) { RuntimeException.new }
for ( ; ; ) { if ( ) { Math.floor Math.floor } }
Map.put
FileWriter.new BufferedWriter.new BufferedWriter.write BufferedWriter.flush BufferedWriter.close IOException.printStackTrace
Math.max
ByteBuffer.put
PrintStream.println PrintStream.println if ( ) { System.currentTimeMillis } PreparedStatement.setInt PreparedStatement.executeQuery while ( ResultSet.next ) { ResultSet.getClob Clob.length ResultSet.getLong if ( ) { PrintStream.println } else { Clob.getCharacterStream } } Connection.commit if ( ) { System.currentTimeMillis PrintStream.println } PrintStream.println
if ( ) { IllegalArgumentException.new }
if ( String.length ) { String.substring StringBuilder.new StringBuilder.append StringBuilder.toString }
if ( String.length ) { return ( ) } String.charAt
Integer.parseInt String.toCharArray
if ( ) { Integer.valueOf }
for ( ; ; ) { String.valueOf } String.valueOf
if ( ) { if ( ) { NoSuchElementException.new } else { NoSuchElementException.new } }
if ( ) { String.new Integer.parseInt String.new Integer.parseInt String.new Integer.parseInt String.new String.new Integer.parseInt String.new Integer.parseInt String.new Integer.parseInt if ( ) { String.new } } System.arraycopy Vector.new for ( ; ; ) { System.arraycopy String.new Integer.parseInt String.new Integer.parseInt System.arraycopy String.new Vector.add }
if ( ) { if ( Collection<Object>.size ) { for ( Map<Object,Object>.entrySet ) { Entry<Object,Object>.getKey if ( ) { Entry<Object,Object>.getValue Collection<Object>.iterator return ( String.equals ) } } } }
List<Object>.toArray
return ( Integer.intValue )
if ( String.isEmpty ) { return ( ) } if ( String.startsWith ) { String.substring } if ( String.charAt Character.isDigit ) { return ( ) }
return ( Field.get )
if ( ) { Integer.valueOf }
List<Object>.size if ( ) { return ( List<Object>.iterator ) } for ( ) { Math.max } for ( ; ; ) { List<Object>.get if ( ) { return ( List<Object>.get ) } }
Class.getMethod Method.invoke NoSuchMethodException.printStackTrace IllegalArgumentException.printStackTrace IllegalAccessException.printStackTrace if ( InvocationTargetException.getTargetException ) { }
ReentrantReadWriteLock.readLock Lock.lock if ( ) { IllegalArgumentException.new } Lock.unlock
File.new if ( File.exists ) { File.mkdirs } File.new if ( ) { if ( File.exists ) { File.createNewFile FileWriter.new } return ( ) }
Map<Object,Integer>.get List<Object>.size while ( ) { List<Object>.get if ( List<Object>.isEmpty ) { List<Object>.size continue } if ( ) { if ( ) { List<Object>.get if ( List<Object>.isEmpty ) { continue } } break } } if ( ) { Map<Object,Integer>.put }
ArrayList<Object>.new while ( Iterator<Object>.hasNext ) { Iterator<Object>.next ArrayList<Object>.addAll }
for ( ConcurrentMap<Object,Object<Object>>.entrySet ) { if ( Entry<Object,Object<Object>>.getKey Entry<Object,Object<Object>>.getValue ConcurrentMap<Object,Object<Object>>.remove ) { Entry<Object,Object<Object>>.getValue } }
WeakReference<Object>.get if ( String.length ) { IllegalArgumentException.new }
if ( ) { for ( ) { if ( String.endsWith ) { } } }
Collections.singletonList
if ( System.getProperty ) { if ( System.getProperty ) { if ( System.getProperty String.equals ) { } } }
ArrayList.new for ( ) { List<Object>.add }
if ( String.startsWith ) { return ( String.indexOf String.substring ) } else { if ( String.startsWith ) { if ( ) { String.indexOf String.substring String.indexOf String.length String.substring return ( ) } } }
return ( String.hashCode )
if ( ) { IllegalArgumentException.new }
return ( Node.getTextContent )
return ( Math.abs )
if ( String.equals ) { return ( ) }
if ( ) { IllegalArgumentException.new }
InetAddress.getByName Exception.toString
OutputStreamWriter.new Writer.write
Map<Object,SortedSet<Integer>>.get if ( ) { TreeSet<Integer>.new Map<Object,SortedSet<Integer>>.put } if ( SortedSet<Integer>.isEmpty ) { SortedSet<Integer>.last } Map<Object,SortedSet<Integer>>.get
return ( System.currentTimeMillis )
for ( ; ; ) { if ( Set<Integer>.contains Set<Integer>.contains ) { } }
Document.createElement Node.getChildNodes for ( ; NodeList.getLength ; ) { NodeList.item if ( Node.getNodeType ) { if ( Node.getNodeName String.equals ) { Document.createElement Document.createTextNode Element.appendChild Element.appendChild } else { if ( Node.getNodeName String.equals ) { Document.createElement Document.createTextNode Element.appendChild Element.appendChild } } } }
if ( ) { LinkedHashSet<Object>.new Set<Object>.addAll }
for ( LinkedHashMap<String,Object>.values ) { }
Set<Object>.add Collections.singleton
IllegalArgumentException.new
BigInteger.new BigDecimal.new BigDecimal.precision
return ( Arrays.asList )
for ( ; ; ) { if ( String.equals ) { File.new } } FileWriter.new PrintWriter.new Formatter.center Date.new Date.toString Formatter.center PrintWriter.println Comparator.new Arrays.sort PrintWriter.flush PrintWriter.close StringWriter.new PrintWriter.new IOException.printStackTrace StringWriter.toString
if ( ) { Long.valueOf IllegalArgumentException.new }
ArrayList<Object>.new ArrayList<Object>.add ArrayList<Object>.add if ( ) { ArrayList<Object>.add } ArrayList<Object>.add if ( ) { ArrayList<Object>.add }
Long.toHexString Logger.info
Switch ( ) { default : IllegalArgumentException.new }
UnsupportedOperationException.new
Vector.elements while ( Enumeration.hasMoreElements ) { Enumeration.nextElement }
if ( String.indexOf ) { String.replaceAll } String.length Math.max ArrayList<String>.new for ( String.length ; ; ) { String.charAt String.substring String.trim ArrayList<String>.add } if ( ) { IllegalArgumentException.new } if ( ) { ArrayList<String>.add ArrayList<String>.add ArrayList<String>.add } else { if ( ArrayList<String>.size ) { String.length String.substring ArrayList<String>.add } }
if ( ) { NullPointerException.new }
return ( Class.cast )
Switch ( ) { default : return ( Integer.toString ) }
return ( Map<String,Object>.get Integer.intValue )
Lock.lock Set<Object>.iterator while ( Iterator<Object>.hasNext ) { Iterator<Object>.next } Lock.unlock
StringTokenizer.new StringTokenizer.countTokens for ( ; ; ) { StringTokenizer.nextToken if ( ) { SAXException.new } }
FileOutputStream.new FileOutputStream.getChannel ByteBuffer.allocate ByteBuffer.array while ( ) { ByteBuffer.clear InputStream.read ByteBuffer.flip ByteBuffer.limit while ( ByteBuffer.hasRemaining ) { FileChannel.write } } if ( ) { FileChannel.close } InputStream.close
ArrayList<Object>.new for ( ) { if ( ) { Collection<Object>.add } } for ( ) { Collection<Object>.add } for ( ) { Collection<Object>.add }
if ( ) { Arrays.asList } if ( ) { Arrays.asList } for ( ) { if ( ) { ArrayList.new List<String>.set } }
return ( Integer.intValue )
for ( ) { AccessibleObject.getAnnotation StringBuilder.new StringBuilder.append for ( ) { StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append } StringBuilder.append StringBuilder.toString }
if ( ) { IllegalArgumentException.new }
if ( ) { return ( Exception.getMessage ) }
if ( ) { IllegalArgumentException.new } System.arraycopy
InputStream.read_long InputStream.read_char_array
Math.min
return ( String.valueOf )
if ( ) { NullPointerException.new }
JTextField.setText
ArrayList<Object>.new ArrayList<Object>.add
return ( HashMap<Object,Object>.values )
Exception.getMessage IllegalStateException.new
StringBuilder.new StringBuilder.append StringBuilder.toString StringBuilder.new StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.toString for ( ; ; ) { PreparedStatement.setInt PreparedStatement.setInt PreparedStatement.setInt PreparedStatement.execute }
if ( Map<String,Object>.containsKey ) { } SimpleDateFormat.parse Calendar.getInstance Calendar.setTime if ( String.equals ) { String.valueOf } else { if ( String.equals ) { String.valueOf } } return ( Calendar.getTime )
List<Object>.add
if ( String.length ) { return ( ) } if ( ) { if ( String.length ) { return ( ) } }
return ( ArrayList<Object>.toArray )
return ( Random.nextInt )
if ( String.equals ) { return ( ) } Currency.getInstance Currency.getSymbol
DOMTestFramework.assertEqualsIgnoreCase
Class<>.getMethods ArrayList.new for ( ) { if ( Method.isAnnotationPresent ) { Method.getParameterTypes Method.getAnnotation if ( Method.getReturnType Class.equals Method.getReturnType Class.equals Class.isAssignableFrom HashMap<String,Method>.keySet Set.contains ) { Method.getName RuntimeException.new } else { HashMap<String,Method>.put List<String>.add } } }
NavigableSet.headSet SortedSet.contains SortedSet.contains SortedSet.contains SortedSet.contains SortedSet.contains SortedSet.iterator Iterator.next Iterator.next Iterator.next Iterator.hasNext SortedSet.clear SortedSet.isEmpty NavigableSet.size NavigableSet.first
if ( ) { List<Object>.size Math.min List<Object>.subList }
return ( PreferencesFactory.userRoot Preferences.node )
Set<Object>.add
return ( Class<Object>.cast )
Method.invoke
AtomicLong.getAndIncrement ConcurrentHashMap<Long,Object>.put
return ( String.new )
ArrayList<Object>.get for ( ; ; ) { ArrayList<Object>.get }
LinkedList.new LinkedList.iterator while ( Iterator.hasNext ) { Iterator.next HashMap<String,Object>.new LinkedList.new LinkedList.iterator while ( Iterator.hasNext ) { Iterator.next if ( ) { if ( Map<String,Object>.containsKey Map<String,Object>.get Set.contains ) { Map<String,Object>.get } else { Map<String,Object>.put } } } }
if ( ) { PrintStream.println return ( ) } if ( ) { PrintStream.println return ( ) } if ( ) { PrintStream.println return ( ) } System.setProperty System.setProperty System.setProperty if ( ) { Integer.parseInt } PrintStream.println PrintStream.println Exception.printStackTrace Executors.newSingleThreadExecutor Desktop.getDesktop URI.new Desktop.browse IOException.printStackTrace URISyntaxException.printStackTrace Runnable.new ExecutorService.submit InterruptedException.printStackTrace
Date.new
if ( ) { Integer.valueOf }
return ( Map<String,Object>.get )
if ( ) { Class.forName } DriverManager.getConnection Connection.close SQLException.getMessage SQLException.printStackTrace
if ( Set<String>.isEmpty ) { return ( ) } XMLStreamWriter.writeStartElement XMLStreamWriter.writeEndElement
PrintStream.println String.length Thread.sleep PrintStream.println
Deflater.new Deflater.setInput ByteArrayOutputStream.new Deflater.finish while ( Deflater.finished ) { Deflater.deflate ByteArrayOutputStream.write } ByteArrayOutputStream.close ByteArrayOutputStream.toByteArray Deflater.end
System.arraycopy System.arraycopy
ArrayList<Object>.new for ( ) { List<Object>.add } for ( ; ; ) { for ( ; ; ) { List<Object>.add } }
return ( SocketImpl.getOption )
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new }
for ( ; ; ) { if ( String.equals String.startsWith String.startsWith String.startsWith String.startsWith ) { for ( ; ; ) { if ( String.equals String.startsWith String.startsWith String.startsWith String.startsWith ) { } } } }
String.toLowerCase
return ( Class<>.getName )
for ( ) { Class.getDeclaredMethod Method.invoke } NoSuchMethodException.printStackTrace InvocationTargetException.printStackTrace IllegalAccessException.printStackTrace
return ( List<String>.size ArrayList.new for ( ) { String.replace String.replace if ( Map<String,List<String>>.containsKey ) { Map<String,List<String>>.get List<String>.addAll Map<String,List<String>>.remove } else { List<String>.add } } return ( ) )
StringBuffer.new for ( ; ; ) { String.format StringBuffer.append } String.format StringBuffer.append return ( StringBuffer.toString )
Exception.new Exception.new Exception.new Exception.new Exception.new Exception.new
return ( Collections.unmodifiableList )
StringBuilder.new StringBuilder.append StringBuilder.append for ( ) { StringBuilder.append } StringBuilder.toString
System.identityHashCode ReentrantLock.lock while ( ) { if ( ExceptionNode.get ) { break } } ReentrantLock.unlock
Math.toRadians Math.toRadians Math.toRadians
for ( ) { UUID.randomUUID PrintStream.println Switch ( ) { case : UUID.toString PrintStream.println break case : UUID.toString PrintStream.println break } PrintStream.println }
if ( ) { IllegalArgumentException.new }
if ( ) { ArrayList<URI>.new URI.new List<URI>.add for ( ) { URI.new List<URI>.add } }
FileSystems.getDefault FileSystem.getPath Files.createFile
if ( ) { Integer.valueOf }
List<Object>.add
Map<String,Object>.putAll
if ( AtomicBoolean.get ) { return ( ) } while ( PriorityQueue<Object>.isEmpty PriorityQueue<Object>.peek ) { PriorityQueue<Object>.poll HashMap<Object,Object>.get if ( ) { HashMap<Object,Object>.put } if ( ) { PriorityQueue<Object>.add } else { HashMap<Object,Object>.remove } } for ( HashMap<Object,Object>.entrySet ) { Entry<Object,Object>.getKey Entry<Object,Object>.getValue } HashMap<Object,Object>.clear
System.currentTimeMillis StringWriter.new PrintWriter.new StringWriter.toString
ArrayList.new do { if ( ) { ArrayList.add } } while ( ) ;
Float.valueOf
if ( ) { IllegalArgumentException.new } IllegalStateException.new
return ( Point.new )
return ( BitSet.get )
if ( ) { while ( Enumeration.hasMoreElements ) { Enumeration.nextElement } }
String[].clone
Random.new Random.nextInt
System.arraycopy Mac.update Mac.update Mac.update Mac.doFinal if ( ) { Arrays.fill } GeneralSecurityException.printStackTrace SSLProtocolException.new
return ( Collection<X509Certificate>.size )
return ( AtomicInteger.get )
if ( ) { IOException.new }
ArrayList.new for ( ; ; ) { List.add }
if ( ArrayList<Object>.size ) { return ( ArrayList<Object>.get ) } for ( ; ArrayList<Object>.size ; ) { ArrayList<Object>.get }
return ( Integer.intValue )
ObjectOutput.writeObject
if ( ) { JarEntry.setAttributes } else { if ( ) { JarEntry.getName String.toUpperCase String.startsWith if ( ) { ByteArrayOutputStream.new } else { JarEntry.getName JarVerifier.initEntry } } }
System.currentTimeMillis while ( System.currentTimeMillis ) { }
if ( ) { NullPointerException.new }
if ( ) { if ( ) { Math.abs } else { if ( ) { Math.abs } } }
ArrayList<Object>.new PreparedStatement.setInt PreparedStatement.executeQuery while ( ResultSet.next ) { ArrayList<Object>.add } ResultSet.close PreparedStatement.close if ( ) { PreparedStatement.close } ArrayList<Object>.size ArrayList<Object>.toArray
PrintStream.println
return ( Class.isPrimitive )
TransformerException.new if ( ) { List.size for ( ; ; ) { List.get } } TransformerException.new if ( ) { TransformerException.new } TransformerException.new
for ( ; ; ) { Byte.parseByte }
while ( ) { Switch ( ) { case : if ( String.length ) { } break } }
ArrayList<String>.new NetworkInterface.getNetworkInterfaces while ( Enumeration<NetworkInterface>.hasMoreElements ) { Enumeration<NetworkInterface>.nextElement NetworkInterface.getHardwareAddress if ( NetworkInterface.isUp NetworkInterface.isVirtual ) { NetworkInterface.getDisplayName String.toLowerCase if ( String.contains String.contains ) { for ( ; ; ) { String.format } if ( String.trim String.length ) { List<String>.add } } } } return ( List<String>.toString String.replace String.replace String.replace )
List<>.size ArrayList<Object>.new for ( ) { if ( Class<Object>.isInstance ) { String.format } Class<Object>.cast List<Object>.add }
Switch ( ) { default : String.format UnsupportedOperationException.new }
String.indexOf String.substring String.indexOf String.length String.substring for ( ) { if ( ) { File.new ImageIO.write } }
Exception.getMessage return ( Collections.emptyList )
if ( ) { ArrayList<Object>.new for ( ) { List<Object>.add } }
ConcurrentHashMap<String,Object>.put
if ( String.equals ) { }
ArrayList<Object>.new List<Object>.addAll ArrayList<Object>.new
FileOutputStream.new PrintStream.println IOException.getMessage PrintStream.println
BitSet.new BitSet.new
if ( ) { List<Object>.getClass IllegalArgumentException.new }
if ( ) { UnsupportedOperationException.new }
if ( ) { NullPointerException.new }
UnsupportedOperationException.new
Class<>.getGenericSuperclass if ( ) { RuntimeException.new } return ( ParameterizedType.getActualTypeArguments )
String.toLowerCase Map<String,String>.put
Collection<>.size
if ( Throwable.getMessage Throwable.getMessage String.contains ) { return ( ) } if ( Throwable.getCause ) { Throwable.getMessage return ( ) } StringWriter.new PrintWriter.new Throwable.printStackTrace StringWriter.toString Throwable.getClass Throwable.getMessage
if ( String.equals ) { SQLException.new }
return ( Math.min )
String.new
System.getProperty File.new System.getProperty String.toLowerCase if ( String.startsWith String.endsWith ) { return ( File.new ) } else { return ( File.new ) }
if ( ) { if ( ) { if ( ) { IllegalStateException.new } } }
HashMap<String,Object>.new Set<TypeMirror>.addAll Set<TypeMirror>.addAll for ( ) { Types.asElement TypeElement.getQualifiedName Name.toString TypeElement.getSimpleName Name.toString if ( Set<String>.contains ) { if ( String.equals String.equals ) { String.isEmpty String.length String.substring } } Map<String,Object>.put }
JFrame.setFocusable
if ( ) { if ( String.length ) { } return ( ) }
if ( Object.getClass Class.isArray ) { Object.getClass } Array.getLength ArrayList<Object>.new for ( ; ; ) { Array.get }
if ( ) { StringBuilder.new for ( ; ; ) { StringBuilder.append } StringBuilder.toString }
if ( ) { return ( BufferedImage.getColorModel ColorModel.hasAlpha ) } PixelGrabber.new PixelGrabber.grabPixels PixelGrabber.getColorModel return ( ColorModel.hasAlpha )
InetAddress.getLocalHost InetAddress.getHostName StringBuilder.new StringBuilder.append Date.new SimpleDateFormat.format StringBuilder.append StringBuilder.append System.nanoTime Math.abs Long.toString StringBuilder.append StringBuilder.toString
return ( DocumentBuilderFactory.newDocumentBuilder DocumentBuilder.parse ) Error.new
String[].clone
return ( Set<Object>.add )
if ( ) { Error.new }
BufferedInputStream.new DataInputStream.new DataInputStream.readUTF String.toUpperCase if ( String.indexOf ) { return ( ) } DataInputStream.close
if ( List<Object>.size ) { return ( List<Object>.get ) }
PrintStream.printf PrintStream.printf PrintStream.printf PrintStream.printf
return ( Boolean.booleanValue )
DocumentBuilderFactory.newInstance DocumentBuilderFactory.newDocumentBuilder DocumentBuilder.parse SAXException.getMessage IOException.new ParserConfigurationException.getMessage IOException.new Document.getDocumentElement if ( Element.getTagName String.equals ) { IOException.new } Element.getChildNodes for ( ; NodeList.getLength ; ) { NodeList.item if ( ) { Element.getTagName if ( String.equals ) { IOException.new } Element.getAttribute Element.getAttribute Element.getAttribute List<Object>.add } }
return ( String.hashCode TimeZone.hashCode Locale.hashCode )
Arrays.fill return ( String.valueOf )
if ( ) { IndexOutOfBoundsException.new }
if ( Object.getClass ) { return ( ) }
ArrayList<Object>.new for ( ) { List<Object>.add }
if ( ) { Set<Object>.remove } else { if ( Set<Object>.contains ) { Set<Object>.add } else { Set<Object>.remove } }
System.getProperty System.setProperty System.setProperty Hashtable<String,String>.new Hashtable<String,String>.new Hashtable<String,String>.new Hashtable<String,String>.new
ArrayList.new if ( ) { Map<String,Object>.forEach } if ( ) { List<Object>.add }
IOException.getMessage IOException.printStackTrace Exception.getMessage
ArrayList<Object>.new for ( ) { ArrayList<Object>.add }
Map<String,Object>.size for ( Map<String,Object>.keySet ) { Map<String,Object>.get }
if ( ) { if ( Logger.isLoggable ) { Logger.log } } if ( Logger.isLoggable ) { Logger.log }
HashSet<Object>.new
Class<>.getName String.replace Class<>.getClassLoader if ( ) { ClassLoader.getSystemResourceAsStream } else { ClassLoader.getResourceAsStream } if ( ) { ClassNotFoundException.new }
Integer.parseInt Integer.parseInt
HashMap<String,Object>.get if ( ) { IllegalArgumentException.new } HashMap<String,Object>.get if ( ) { IllegalArgumentException.new }
for ( ; ; ) { System.currentTimeMillis }
return ( Object.equals )
if ( ) { if ( ) { Set.size } }
if ( ) { IllegalArgumentException.new } String.toString
if ( String.endsWith ) { } if ( String.equals String.equals ) { }
ArrayList<Object>.new for ( ) { if ( ) { Collection<Object>.add } }
String.toLowerCase DatatypeConverter.printHexBinary
while ( Enumeration.hasMoreElements ) { Enumeration.nextElement }
if ( ) { return ( Collections.unmodifiableList ) }
ArrayList<Object>.new for ( ) { if ( String.startsWith ) { List<Object>.add } else { List<Object>.add } }
if ( ) { if ( ) { if ( ) { String.concat } } if ( ) { Collections.sort } }
if ( ) { IllegalArgumentException.new } ArrayList<Class<Object>>.new for ( ) { Object.getClass List<Class<Object>>.add }
HashMap<String,Object>.new for ( ; ; ) { if ( ) { if ( ) { Map<String,Object>.put } } }
if ( Double.isNaN ) { return ( ) } if ( ) { Math.sqrt Math.log }
FileSystemView.getFileSystemView FileSystemView.getDefaultDirectory JComboBox.new DefaultComboBoxModel.new JComboBox<Object>.setModel DefaultListCellRenderer.new JComboBox<Object>.setRenderer BorderLayout.new GridBagLayout.new JPanel.new ChangeListener.stateChanged
String.getBytes RuntimeException.new
String[].clone
return ( Map<String,Object>.get )
if ( ) { if ( ) { IOException.new } }
if ( ) { for ( ; ; ) { Map<Object,Object>.get } }
if ( List<Object>.remove ) { IllegalArgumentException.new } List<Object>.size List<Object>.toArray
Class.notifyAll
if ( ) { return ( List<Object>.size ) }
return ( Set<Object>.contains )
if ( ) { if ( ) { IllegalArgumentException.new } return ( ) } if ( StringBuilder.length ) { StringBuilder.append } StringBuilder.append StringBuilder.append StringBuilder.append if ( ) { Collections.addAll }
return ( Class<>.newInstance )
if ( ) { if ( ) { if ( Object.equals ) { return ( ) } for ( ; ; ) { if ( Object.equals ) { return ( ) } } } }
System.currentTimeMillis if ( ) { File.new File.new } System.currentTimeMillis
ArrayList<Object>.add
Map<String,Object>.get
Date.new
QName.getLocalPart
StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append
if ( String.startsWith ) { IllegalArgumentException.new } String.split if ( ) { String.split } if ( String.length ) { IllegalArgumentException.new } File.createTempFile File.deleteOnExit if ( File.exists ) { File.getAbsolutePath FileNotFoundException.new } Class.getResourceAsStream FileOutputStream.new if ( ) { FileNotFoundException.new } while ( InputStream.read ) { OutputStream.write } File.getAbsolutePath System.load
if ( ) { for ( Map<Object,Object>.values ) { } }
return ( Math.abs )
String.format
return ( List<Object>.get )
return ( MessageDigest.getInstance ) RuntimeException.new
return ( LinkedHashSet<Object>.new )
if ( Map<Object,Set<Object>>.containsKey ) { Map<Object,Set<Object>>.get } else { HashSet.new Map<Object,Set<Object>>.put } Set<Object>.addAll return ( Set<Object>.size )
if ( ) { if ( ) { URI.getHost } URI.toString }
if ( ) { if ( ) { IllegalStateException.new } }
LinkedList<Object>.new LinkedList<Object>.new HashMap<String,Object>.new LinkedList<Object>.new LinkedList<Object>.new HashSet<Object>.new
if ( ) { IllegalArgumentException.new } ArrayList.new
if ( ) { NullPointerException.new } TimeUnit.toNanos ReentrantLock.lockInterruptibly for ( ; ; ) { if ( AtomicInteger.get ) { AtomicInteger.getAndIncrement if ( ) { Condition.signal } break } Condition.awaitNanos Condition.signal } ReentrantLock.unlock
return ( Integer.intValue )
return ( String.format )
if ( String.isEmpty ) { return ( ) } String.lastIndexOf return ( String.substring )
ArrayList.new for ( ; ; ) { if ( FilenameFilter.accept ) { List<String>.add } } return ( List<String>.size List<String>.toArray )
Boolean.valueOf
Thread.currentThread Thread.getContextClassLoader
Integer.toString
if ( String.indexOf String.indexOf ) { return ( ) }
if ( ) { MutableComboBoxModel.removeElement } else { RuntimeException.new }
EventListenerList.getListenerList
ArrayList.new ArrayList.new for ( ) { if ( ) { List<Object>.add } else { List<Object>.add } if ( ) { List<Object>.add } else { List<Object>.add } } Set<String>.addAll
for ( ) { Exception.getMessage Logger.info }
if ( List<>.size ) { List<>.size } if ( List<>.size ) { List<>.size } List<>.size for ( ; ; ) { List<>.get } List<>.size List<>.size
for ( ; ; ) { if ( String.equals ) { return ( ) } } if ( ) { Vector.addElement }
if ( ) { NullPointerException.new }
for ( ) { Map<String,Map<Object,Object>>.get }
Object.notifyAll
return ( Integer.intValue )
return ( Integer.intValue )
IOException.new
Logger.fine Map<String,Object>.put
return ( ArrayList<Object>.size Collection<Object>.size ArrayList<Object>.containsAll )
Switch ( ) { default : IllegalStateException.new }
HashSet<Object>.new for ( ) { if ( List<Object>.isEmpty ) { for ( ) { if ( ) { Set<Object>.add } } } }
StringBuilder.new if ( ) { for ( ) { StringBuilder.append } } StringBuilder.append return ( StringBuilder.toString )
return ( Integer.intValue )
Logger.log
if ( ) { for ( ; ; ) { List<Object>.add } return ( ) }
TreeSet<String>.new SortedSet<String>.add
if ( ) { Exception.getMessage }
ByteArrayOutputStream.new DataOutputStream.new return ( ByteArrayOutputStream.toByteArray )
if ( ) { Method.getParameterAnnotations if ( ) { Method.noAnnotations } } return ( Annotation[][].clone )
Graphics2D.getTransform Graphics2D.setColor Graphics2D.fillRect Graphics2D.setColor AffineTransform.getTranslateInstance Graphics2D.setTransform for ( ; ; ) { if ( List<BufferedImage>.size ) { List<BufferedImage>.get } if ( ) { BufferedImage.getWidth BufferedImage.getHeight Graphics2D.drawImage } else { Graphics2D.fillOval } } Graphics2D.setTransform
String.format IllegalArgumentException.new
return ( Math.min Math.min Math.max )
if ( ) { Writer.flush IOException.printStackTrace Writer.close IOException.printStackTrace }
List<>.size for ( ; ; ) { List<>.get if ( Object.equals ) { return ( ) } } if ( ) { for ( ; ; ) { List<>.get if ( Object.equals ) { return ( ) } } }
Arrays.checkOffsetAndCount
StringBuilder.new InputStreamReader.new BufferedReader.new while ( BufferedReader.readLine ) { StringBuilder.append } return ( StringBuilder.toString ) IOException.printStackTrace
return ( Object.getClass Class.isArray )
while ( List<Object>.size ) { } for ( ; List<Object>.size ; ) { List<Object>.get }
for ( List<Object>.iterator ; Iterator<Object>.hasNext ; ) { Iterator<Object>.next ArrayList<Object>.add }
if ( ) { Thread.currentThread Thread.getName }
if ( ) { Set.remove Set.remove List.remove } Collections.sort
if ( CharSequence.length ) { return ( Locale.getDefault ) } if ( ) { Math.max if ( ) { CharSequence.length Math.min } } CharSequence.subSequence CharSequence.toString Bidi.new return ( Bidi.baseIsLeftToRight )
FileSystem.create OutputStreamWriter.new BufferedWriter.new BufferedWriter.write while ( Iterator<String>.hasNext ) { Iterator<String>.next BufferedWriter.write } BufferedWriter.flush BufferedWriter.close
StringBuffer.new StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.toString
ArrayList.new while ( ) { ArrayList<Object<Object>>.add }
Cursor.getPredefinedCursor JList<Object>.getSelectedValue JList<Object>.getSelectedValue UIManager.getLookAndFeel MetalLookAndFeel.getCurrentTheme SwingUtilities.updateComponentTreeUI Cursor.getPredefinedCursor
Math.log if ( Double.isNaN ) { RuntimeException.new }
if ( ) { OutputStream.write OutputStream.write } else { OutputStream.write OutputStream.write }
StringBuffer.new for ( ; List<>.size ; ) { if ( ) { StringBuffer.append } List<>.get Object.toString StringBuffer.append } return ( StringBuffer.toString )
if ( ) { OutputStream.write return ( ) }
return ( Integer.intValue )
System.currentTimeMillis Long.toString File.new
CertificateException.new
if ( ) { return ( Math.floor ) } return ( Math.ceil )
if ( ) { IllegalStateException.new }
if ( ) { Class.toString }
TreeSet<String>.new HashSet<String>.new Set<String>.remove Set<String>.add
return ( Vector.remove )
for ( ) { if ( Map<String,>.containsKey ) { return ( ) } } for ( ) { Map<String,>.get }
for ( List<Object>.size ; ; ) { if ( List<Object>.get Math.abs ) { List<Object>.get Math.abs } }
return ( String.concat Hashtable<String,Object>.remove )
String.length String.length String.charAt for ( ; ; ) { String.charAt if ( ) { if ( ) { if ( ) { String.charAt } continue } } }
return ( return ( ) return ( Collections.singleton ) return ( Collections.singleton ) return ( ) )
if ( ) { IllegalArgumentException.new } CopyOnWriteArrayList<Object>.new
for ( List.size ; ; ) { List.get if ( String.equals String.equalsIgnoreCase ) { return ( ) } }
IOException.toString
if ( ) { String.valueOf SQLException.new } return ( String.new )
UnsupportedOperationException.new
if ( Set<Object>.contains ) { Set<Object>.add Set<Object>.add }
Map<Class<Object>,Object>.get if ( ) { IllegalArgumentException.new }
if ( ) { NullPointerException.new }
AtomicLong.incrementAndGet
Node.getAttributes Node.getFirstChild
if ( ) { IllegalStateException.new }
ArrayList<Object>.add
if ( ) { if ( ) { CharSequence.length } Exception.getMessage Exception.getMessage return ( ) } else { if ( ) { Runnable.new } }
return ( List<Object>.size )
HashMap<Long,Object>.get
ArrayList.new URL.new String.getBytes String.new for ( ; ; ) { List<String>.add }
if ( ) { NullPointerException.new } if ( AtomicInteger.get ) { return ( ) } ReentrantLock.lock if ( AtomicInteger.get ) { AtomicInteger.getAndIncrement if ( ) { Condition.signal } } ReentrantLock.unlock
Objects.requireNonNull
List<Object>.remove
return ( Map<String,Object>.size )
return ( BigDecimal.compareTo )
Hashtable.remove Hashtable.remove
Map<Class<Object>,Object>.get
return ( String.equalsIgnoreCase )
while ( Iterator<Object>.hasNext ) { Iterator<Object>.next }
Math.max
List<Object>.add Map<Object,List<Object>>.get if ( ) { ArrayList.new Map<Object,List<Object>>.put } List<Object>.add
if ( ) { NullPointerException.new }
Arrays.asList
if ( String.equals ) { Class.forName } if ( Class.isAssignableFrom ) { Class<>.newInstance } Exception.printStackTrace PrintStream.println
DataOutputStream.new
return ( AtomicReference<Object>.get )
for ( ) { if ( ArrayList<String>.indexOf ) { if ( ) { ArrayList<Object>.remove ArrayList<String>.remove } } }
for ( ) { if ( Entry<Object,Object>.getValue Entry<Object,Object>.getValue ) { continue } Entry<Object,Object>.getKey Entry<Object,Object>.getValue }
HashMap.entrySet HashMap.new HashMap.entrySet
Integer.new
HashMap<Integer,Collection<Object>>.remove
while ( ) { if ( ) { RuntimeException.new } if ( ) { RuntimeException.new } if ( ) { RuntimeException.new } } if ( ) { RuntimeException.new }
Switch ( ) { case : Thread.currentThread Thread.getName break }
AtomicBoolean.set
ByteArrayInputStream.new ObjectInputStream.new ObjectInputStream.readObject Exception.new Exception.new
if ( ) { RuntimeException.new } if ( ) { RuntimeException.new }
if ( Element.getKind ElementKind.isClass ) { }
if ( ) { EOFException.new }
Arrays.asList
if ( ) { NullPointerException.new } if ( ) { if ( ) { if ( ) { HashMap.new } Map<String,Object>.put } } else { if ( ) { Map<String,Object>.remove if ( Map<String,Object>.isEmpty ) { } } }
String[].clone
return ( BasicMenuUI.new )
if ( ) { IllegalStateException.new }
if ( ) { Integer.valueOf }
FileInputStream.new if ( ) { FileInputStream.close IOException.printStackTrace }
for ( ; ; ) { for ( ; ; ) { for ( ; ; ) { if ( Object.equals ) { } } } }
Collections.singleton
StringBuilder.new for ( ; String.length ; ) { if ( String.charAt Character.isDigit ) { String.charAt StringBuilder.append } } return ( StringBuilder.toString )
return ( Double.doubleToRawLongBits )
ContentHandler.characters
if ( ) { IllegalComponentStateException.new }
return ( Integer.intValue )
File.new File.delete
do { InputStream.read } while ( ) ;
if ( String.startsWith ) { if ( String.startsWith ) { return ( ) } }
if ( Optional<Long>.isPresent ) { Optional<Long>.get }
Map<String,Object>.get if ( ) { Map<String,Object>.put }
if ( ) { Math.random Timestamp.new if ( ) { Timestamp.toString } return ( ) }
String.new
if ( String.equals ) { }
PrintWriter.printf PrintWriter.flush
return ( Class<>.getSimpleName String.startsWith )
if ( ) { return ( HashMap.new ) } return ( String.toCharArray )
if ( List<String>.isEmpty ) { return ( ) } if ( ) { Error.text return ( ) } if ( List<String>.size ) { return ( ) } if ( ) { PrintStream.println return ( ) }
if ( ) { IllegalStateException.new }
String.length if ( ) { IllegalArgumentException.new } for ( ; ; ) { String.charAt }
if ( AtomicInteger.get ) { } Math.max System.currentTimeMillis
if ( ) { return ( String.new ) }
if ( ) { Integer.new } return ( Integer.intValue )
Callable<Boolean>.new
HashSet<Object>.new for ( ; ; ) { if ( ) { Set<Object>.add } }
StringBuilder.append
for ( ; ; ) { Thread.interrupted while ( ) { Object.wait } break if ( ) { Thread.currentThread Thread.interrupt } }
Object.toString Double.parseDouble Object.toString Double.parseDouble
String.trim
HashMap<URI,Set<Object>>.new for ( Map<Object,List<Object>>.keySet ) { Map<Object,List<Object>>.get if ( List<Object>.isEmpty ) { continue } List<Object>.get if ( Map<URI,Set<Object>>.get ) { HashSet<Object>.new Map<URI,Set<Object>>.put } Map<URI,Set<Object>>.get }
if ( ) { return ( Math.max ) }
ArrayList.new if ( ) { if ( String.matches ) { return ( ) } } if ( List<Object>.isEmpty List<Object>.get ) { if ( List<Object>.size ) { } }
String.lastIndexOf if ( ) { String.substring return ( HashMap<String,String>.get ) }
if ( Certificate.getType String.equals ) { X509Certificate.getKeyUsage if ( ) { InvalidKeyException.new } } Certificate.getPublicKey Signature.initVerify
Exception.getMessage Exception.getMessage
if ( ) { IllegalArgumentException.new } if ( ConcurrentMap.remove ) { }
return ( Arrays.hashCode )
File.new if ( File.exists ) { return ( ) } String.replace File.new if ( File.exists ) { return ( String.replace ) }
if ( Map.containsKey ) { Map.get if ( String.equalsIgnoreCase String.equalsIgnoreCase String.equalsIgnoreCase ) { } } Exception.toString Logger.severe
if ( ) { Math.max }
if ( ) { SocketException.new } SocketImpl.getOption if ( ) { return ( Integer.intValue ) }
if ( ) { List<Object>.remove }
AtomicReference<Integer>.compareAndSet AtomicReference<Integer>.compareAndSet AtomicReference<Integer>.get AtomicReference<Integer>.get String.format String.format AtomicReference<Integer>.get if ( AtomicReference<String>.get ) { AtomicReference<String>.get } if ( AtomicReference<Iterable<String>>.get ) { AtomicReference<Iterable<String>>.get }
ArrayList<Object>.new ArrayList<Object>.new ArrayList<Object>.new ArrayList<Object>.new for ( ) { if ( ) { List<Object>.add } else { if ( ) { List<Object>.add } else { if ( ) { List<Object>.add } else { if ( ) { List<Object>.add } } } } }
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new }
String.valueOf Class.getName for ( ; ; ) { Integer.new } for ( ; ; ) { Integer.new Integer.new } for ( ; ; ) { Integer.new } for ( ; ; ) { Integer.new }
ArrayList<Object>.new
if ( Float.isNaN ) { return ( ) }
return ( String.length )
LinkedList<Object>.new LinkedList.new BorderLayout.new
return ( AtomicLongFieldUpdater<Object>.compareAndSet )
PrintStream.println
if ( ) { RuntimeException.new } if ( ) { if ( ) { RuntimeException.new } }
if ( ) { ArrayList<Object>.size for ( ; ; ) { ArrayList<Object>.get } }
FileInputStream.new BufferedInputStream.new
return ( Integer.parseInt ) Exception.getMessage
if ( ) { NullPointerException.new } if ( String.trim String.length ) { return ( ) } return ( List<String>.add )
for ( ; ; ) { ByteArrayOutputStream.new ByteArrayOutputStream.flush ByteArrayOutputStream.toByteArray ByteArrayInputStream.new if ( String.contains String.contains ) { } }
HashMap<String,String>.new for ( ; ; ) { Map<String,String>.put } String.hashCode String.valueOf Map<String,String>.put
Point2D.getY return ( Point2D.getX Point.new )
if ( ) { NoSuchElementException.new } if ( ) { Class.getComponentType Array.newInstance System.arraycopy }
if ( ) { RuntimeException.new }
return ( Thread.currentThread Thread.getStackTrace )
ArrayList.new while ( ) { ArrayList.add } ArrayList.add
ByteBuffer.position ByteBuffer.position ByteBuffer.get
AtomicReference<Object>.get
Object.getClass for ( ; ; ) { Class<>.getField Field.get }
JButton.setText
AtomicLong.addAndGet
return ( Date.compareTo )
JMenuBar.new HashMap<String,Object>.new
ArrayList<String>.new for ( ) { if ( String.endsWith ) { List<String>.add } } IOException.getMessage List<String>.add List<String>.add List<String>.size List<String>.toArray
File.new File.mkdirs File.new File.mkdirs File.new File.mkdirs File.new File.mkdirs File.new File.mkdirs
if ( Map<Object,List<Object>>.containsKey ) { CopyOnWriteArrayList<Object>.new Map<Object,List<Object>>.put } Map<Object,List<Object>>.get
if ( ) { NullPointerException.new } List<Object>.add
String[].clone
String.split for ( ; ; ) { String.replaceAll }
if ( Collection<String>.size ) { IllegalArgumentException.new } if ( ) { StringBuilder.new for ( ) { StringBuilder.append } }
String.toUpperCase Map<String,Queue<Map<String,Object>>>.get if ( ) { Map<String,Queue<Map<String,Object>>>.put Queue<Map<String,Object>>.size } else { if ( Queue<Map<String,Object>>.size ) { Queue<Map<String,Object>>.addAll Queue<Map<String,Object>>.size } } Queue<Map<String,Object>>.poll
String.split String.split if ( ) { if ( ) { return ( String.valueOf ) } } else { if ( ) { return ( String.valueOf ) } }
UnsupportedOperationException.new
return ( List<Long>.size )
return ( Integer.intValue )
while ( ByteBuffer.hasRemaining ) { ByteBuffer.remaining Math.min ByteBuffer.get for ( ; ; ) { CharBuffer.put } }
Object.toString Writer.write
for ( ThreadLocal<Object>.get ) { }
CertificateFactory.getInstance for ( ; ; ) { URL.new URL.openStream CertificateFactory.generateCRLs URL.toExternalForm Collection<>.size }
Switch ( ) { case : IllegalStateException.new case : ArrayList<String[]>.get return ( ) case : ArrayList<String[]>.get return ( ) default : Integer.toHexString UnsupportedOperationException.new }
return ( Integer.intValue )
return ( Function<Long,Long>.apply )
return ( Map<String,String>.get )
Long.parseLong
while ( Iterator<URI>.hasNext ) { Iterator<URI>.next return ( ) }
File.new if ( File.exists File.isDirectory ) { return ( ) } return ( File.delete )
Map<String,String>.put Map<String,String>.putAll
if ( ) { IllegalArgumentException.new } LinkedHashMap.new for ( ; ; ) { Map.put }
String.toLowerCase if ( String.isEmpty String.isEmpty ) { return ( ) }
StringBuffer.setLength return ( StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.toString )
if ( ) { List<String>.remove }
HashSet<String>.new for ( ; ; ) { HashSet<String>.add } for ( ; ; ) { Arrays.asList if ( ) { Exception.new } String.toUpperCase if ( HashSet<String>.contains ) { Exception.new } HashSet<String>.add ConcurrentMap<String,Object>.put }
QName.getNamespaceURI if ( ) { XMLStreamWriter.getPrefix if ( ) { XMLStreamWriter.writeNamespace XMLStreamWriter.setPrefix } if ( String.trim String.length ) { XMLStreamWriter.writeCharacters } else { XMLStreamWriter.writeCharacters } } else { XMLStreamWriter.writeCharacters }
DecimalFormat.new
Semaphore.acquire for ( List<Object>.size ; ; ) { List<Object>.get } ArrayList<Object>.new while ( ) { List<Object>.add } Semaphore.release
return ( List<Object>.size )
return ( WebServiceException.getCause )
if ( ) { NullPointerException.new } SAXNotRecognizedException.new
return ( Math.pow Math.pow Math.sqrt )
for ( ; ; ) { Scanner.next ArrayList<String>.add }
if ( ) { Thread.sleep }
return ( Integer.intValue )
if ( ) { Map<Integer,Object>.get return ( ) }
if ( ) { IllegalArgumentException.new } Locale.getDefault String.toUpperCase Map<String,Collection<X509Certificate>>.get if ( ) { Collections.emptyList }
StringBuilder.new StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append Arrays.toString StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append return ( StringBuilder.toString )
return ( Arrays.stream DoubleStream.map DoubleStream.toArray )
Object.getClass
return ( Number.doubleValue Double.valueOf Double.doubleValue )
if ( ) { IllegalArgumentException.new } for ( ) { if ( X509Certificate.getIssuerX500Principal X509Certificate.getSerialNumber ) { return ( ) } }
System.currentTimeMillis
for ( Map<String,Object>.values ) { } Map<String,Object>.clear Map<Object,String>.clear
Map<Object,Long>.get Map<Long,LinkedList<Object>>.get if ( ) { LinkedList<Object>.new Map<Long,LinkedList<Object>>.put } LinkedList<Object>.add
KeyStore.getInstance AuthProvider.setCallbackHandler KeyStore.load Provider.getName
if ( ) { Switch ( ) { case : Math.round Math.round break case : Math.round Math.min Math.max Math.round Math.min Math.max break } }
Map<String,Object>.values
for ( Map<Object,Object>.keySet ) { }
if ( ) { if ( String.equals ) { if ( Object.equals ) { return ( ) } } }
Class.getDeclaredField Field.setAccessible Field.get Exception.printStackTrace
StringBuffer.new StringBuffer.indexOf if ( ) { if ( String.length ) { StringBuffer.append } } else { StringBuffer.append } URLEncoder.encode StringBuffer.append return ( StringBuffer.toString )
return ( StrictMath.exp StrictMath.exp )
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new }
if ( ) { List<Object>.add }
if ( String.equals ) { Runnable.new } else { Runnable.new }
Map<String,Map<Integer,String>>.get Map<Integer,String>.get
if ( ) { Integer.intValue }
if ( String.length ) { IllegalArgumentException.new } StringBuilder.new for ( String.length ; ; ) { StringBuilder.append } return ( StringBuilder.append StringBuilder.toString )
return ( Double.parseDouble )
AssertionError.new
if ( ) { if ( ) { Writer.write } Writer.write Writer.write return ( ) }
String.toLowerCase for ( ; String.length ; ) { String.charAt Map<Character,Object>.get if ( ) { String.charAt Map<Character,Object>.put } } Set<String>.add
KeyStore.getCertificate if ( ) { String.toCharArray KeyStore.getKey }
for ( ; ArrayList<Object>.size ; ) { if ( ArrayList<Object>.get ArrayList<Object>.get ArrayList<Object>.get ) { return ( ) } }
if ( ) { IllegalArgumentException.new }
StringWriter.new String.valueOf if ( Logger.isLoggable ) { StringWriter.toString Logger.fine } return ( StringWriter.toString )
FileInputStream.new RuntimeException.new
ObjectInputStream.defaultReadObject if ( ) { NullPointerException.new }
if ( ) { for ( ; String.length ; ) { String.charAt } }
if ( ) { Integer.toHexString }
ArrayList<Object>.new for ( ; ; ) { for ( ; ; ) { Random.nextGaussian } Math.sqrt List<Object>.add } ArrayList<Object>.new for ( ; ; ) { List<Object>.add }
String.replace URL.new URL.getQuery URL.getRef
Math.min Math.min
List<Object>.get
StringBuilder.new System.currentTimeMillis while ( System.currentTimeMillis ) { StringBuilder.reverse Thread.sleep }
return ( List<String>.isEmpty )
if ( ) { IllegalArgumentException.new }
while ( Enumeration.hasMoreElements ) { Enumeration.nextElement }
if ( ) { StringBuffer.new for ( Map<String,String>.entrySet ) { Entry<String,String>.getKey StringBuffer.append StringBuffer.append Entry<String,String>.getValue StringBuffer.append StringBuffer.append } } StringBuffer.toString
List.size for ( ; ; ) { List.get }
if ( ) { StringBuilder.append } else { if ( ) { StringBuilder.append } for ( ; ; ) { StringBuilder.append } } StringBuilder.append StringBuilder.append StringBuilder.append
ArrayList<String>.new if ( ) { for ( ; ; ) { if ( String.equals ) { List<String>.add } } }
if ( RuntimeException.getClass Class<>.isAssignableFrom ) { if ( ) { IllegalStateException.new } }
File.getParentFile RandomAccessFile.new RandomAccessFile.getChannel FileChannel.lock RandomAccessFile.getFD FileOutputStream.new GZIPOutputStream.new ObjectOutputStream.new ObjectOutputStream.writeInt ObjectOutputStream.writeObject File.getName if ( ) { ObjectOutputStream.close } if ( ) { FileLock.release } if ( ) { RandomAccessFile.close }
Executors.newFixedThreadPool Runtime.getRuntime Runtime.exec String.format IOException.new Process.getInputStream Process.getErrorStream ExecutorService.submit ExecutorService.submit while ( ) { Process.waitFor return ( ) } if ( ) { Thread.currentThread Thread.interrupt }
HashMap<String,Object>.new for ( ) { Entry<String,String>.getKey Entry<String,String>.getValue if ( ) { Entry<String,String>.getKey Map<String,Object>.put } } while ( Iterator<Entry<Object,Object>>.hasNext ) { Iterator<Entry<Object,Object>>.next Entry<Object,Object>.getKey Entry<Object,Object>.getValue Entry<Object,Object>.getValue Map<String,Object>.get Entry<Object,Object>.getValue Map<String,Object>.get if ( ) { Entry<Object,Object>.getKey Map<Object,Object>.put } Iterator<Entry<Object,Object>>.remove Entry<Object,Object>.getKey }
URL.new URL.openConnection URLConnection.setConnectTimeout URLConnection.setReadTimeout URLConnection.getInputStream CertificateFactory.getInstance CertificateFactory.generateCertificates
if ( ) { IllegalArgumentException.new }
System.currentTimeMillis System.currentTimeMillis do { if ( System.currentTimeMillis ) { System.currentTimeMillis } } while ( System.currentTimeMillis ) ;
Map<String,Boolean>.remove
Color.getAlpha Integer.toHexString Color.getBlue Integer.toHexString Color.getGreen Integer.toHexString Color.getRed Integer.toHexString return ( String.length String.length String.length String.length )
Runnable.new Thread.new Thread.start
if ( ) { if ( ) { IllegalArgumentException.new } } OutputStream.flush return ( String.format )
return ( ConcurrentHashMap<Object,AtomicLong>.containsKey )
if ( ) { ArrayList.clone } ArrayList.remove
if ( ) { if ( ) { return ( Boolean.booleanValue ) } return ( String.equals ) }
ArrayList.add
UUID.randomUUID UUID.toString UUID.randomUUID UUID.toString EnumSet.of
ArrayList.new if ( ) { for ( ) { List<Object>.add } }
if ( ) { IllegalArgumentException.new } StringBuilder.new for ( ) { if ( StringBuilder.length ) { StringBuilder.append } StringBuilder.append StringBuilder.append } StringBuilder.toString
Float.valueOf
Map<String,Object>.put JDesktopPane.add
List<Object>.indexOf for ( ; ArrayList<ArrayList<Object>>.size ; ) { ArrayList<ArrayList<Object>>.get for ( ; ArrayList<Object>.size ; ) { ArrayList<Object>.get } }
if ( ) { IllegalStateException.new } Class.forName Class.getConstructor Constructor.newInstance RuntimeException.new
return ( String.startsWith )
return ( Collections.unmodifiableCollection )
FileInputStream.new FileOutputStream.new FileInputStream.getChannel FileOutputStream.getChannel FileChannel.size FileChannel.transferTo FileInputStream.close FileOutputStream.close FileChannel.close FileChannel.close
return ( JTextField.getCaret Caret.getDot )
String.lastIndexOf String.substring if ( String.length ) { return ( ) } for ( ; ; ) { Map<String,String>.get }
return ( Math.max Math.max Math.max Math.max Math.max Math.max )
if ( ) { HashMap.new for ( ; ; ) { if ( ) { HashMap.put } } if ( ) { if ( ) { Arrays.toString } } }
Collection<Object>.add Collection<Object>.add Collection<Object>.add Collection<Object>.add Collection<Object>.add Collection<Object>.add
Properties.new for ( ; ; ) { if ( String.equals ) { } if ( String.equals ) { } }
List<Boolean>.set
AssertionError.new
if ( ) { IllegalArgumentException.new }
Vector<ImageObserver>.new ImageProducer.startProduction
return ( JAXBElement<Object>.new )
return ( JAXBElement.new )
if ( Set<String>.size ) { return ( ) } if ( Set<String>.size ) { return ( ) } if ( Optional<Object>.isPresent ) { Optional<Object>.get if ( Set<String>.size ) { return ( ) } if ( Set<String>.size ) { return ( ) } } return ( Arrays.asList HashSet.new )
for ( ; ; ) { String.charAt }
File.new File.getParentFile if ( File.exists ) { File.getAbsolutePath if ( File.mkdirs ) { File.getAbsolutePath return ( ) } }
return ( JTree.getForeground )
if ( String.equals String.equals ) { }
while ( ByteBuffer.hasRemaining ) { ByteBuffer.remaining Math.min ByteBuffer.get for ( ; ; ) { CharBuffer.put } }
Class<>.getName Map<String,Object>.get if ( ) { Map<String,Object>.put } if ( ) { return ( MessageFormat.format ) }
QName.getNamespaceURI if ( ) { XMLStreamWriter.getPrefix if ( ) { XMLStreamWriter.writeNamespace XMLStreamWriter.setPrefix } if ( String.trim String.length ) { XMLStreamWriter.writeCharacters } else { XMLStreamWriter.writeCharacters } } else { XMLStreamWriter.writeCharacters }
Logger.setLevel
return ( Collections.emptySet )
if ( ) { System.arraycopy } if ( ) { System.arraycopy } Reader.read if ( ) { Reader.read }
Math.abs
if ( ) { ArrayList<Object>.new }
IllegalArgumentException.new
StringBuffer.new for ( ) { StringBuffer.append StringBuffer.append } return ( StringBuffer.toString )
if ( ) { HttpURLConnection.getInputStream } else { HttpURLConnection.getErrorStream if ( ) { HttpURLConnection.getInputStream if ( ) { ByteArrayInputStream.new } } } if ( String.equals ) { return ( GZIPInputStream.new ) }
Map<Class<Object>,Object>.get
Integer.toHexString
StringBuffer.new StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append return ( StringBuffer.toString )
return ( File.new )
if ( ) { IllegalArgumentException.new }
Map<StatementEventListener,StatementEventListener>.put
return ( ArrayList.new )
while ( ) { Switch ( ) { default : IllegalStateException.new } }
if ( ) { List<String[]>.iterator while ( Iterator<String[]>.hasNext ) { Iterator<String[]>.next Double.valueOf } LinkedList<Double>.new for ( ) { List<Double>.add } }
if ( String.isEmpty ) { return ( ) } String.lastIndexOf if ( String.lastIndexOf ) { if ( String.charAt ) { String.lastIndexOf } } if ( String.charAt ) { } return ( String.substring )
return ( Integer.intValue )
for ( ; ; ) { Thread.sleep }
return ( String.lastIndexOf String.substring )
if ( ) { if ( String.equals ) { return ( ) } }
return ( return ( ) Callable<Long>.new )
Map<Long,Set<String>>.clear for ( Map<Long,Set<String>>.entrySet ) { HashSet.new for ( Entry<Long,Set<String>>.getValue ) { Set<String>.add } Entry<Long,Set<String>>.getKey Map<Long,Set<String>>.put }
if ( ) { IndexOutOfBoundsException.new } CowIterator<Object>.new
String.replace File.new if ( File.isFile ) { } File.getName
MouseEvent.getPoint for ( ; MenuBar.getMenuCount ; ) { MenuBar.getMenu Menu.getPeer if ( ) { MouseEvent.translatePoint break } }
RandomAccessFile.new PrintStream.println
if ( ) { if ( ) { return ( Boolean.booleanValue ) } return ( String.equals ) }
for ( ; ; ) { for ( ; ; ) { if ( ) { Node<Object,Object>.helpDelete break } Comparable<>.compareTo if ( Object.equals ) { return ( ) } if ( Node<Object,Object>.casValue ) { break } if ( Node<Object,Object>.appendMarker Node<Object,Object>.casNext ) { } return ( ) } }
for ( ; ; ) { Arrays.fill }
ArrayList<Object>.size ArrayList<Object>.get
if ( ) { IllegalArgumentException.new }
if ( ) { Entry<Object,Object>.getKey Document.createAttribute Entry<Object,Object>.getValue Attr.setValue return ( ) }
return ( Map<Object,Object>.get )
ConcurrentNavigableMap.remove ConcurrentNavigableMap.size ConcurrentNavigableMap.containsKey
return ( Class.getClassLoader Proxy.newProxyInstance )
Objects.requireNonNull return ( String.toLowerCase Map<String,Object>.get )
return ( DHPublicKey.getY BigInteger.equals )
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new }
return ( Integer.intValue )
if ( String.equals ) { }
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new }
if ( ) { IllegalArgumentException.new } if ( AtomicBoolean.get ) { IllegalStateException.new } AtomicLong.incrementAndGet Map<Integer,Object>.get if ( ) { IllegalArgumentException.new } AtomicLong.get AtomicLong.get AtomicLong.get Set<Integer>.isEmpty if ( ) { AtomicBoolean.set } if ( ) { ExecutionException.new }
List<Object>.remove
for ( ; ; ) { List.add }
Runnable.run
ImageWriter.getDefaultWriteParam PrintStream.println if ( ) { ImageWriteParam.setCompressionMode ImageWriteParam.setCompressionType }
if ( ) { PrintStream.println }
if ( ) { IllegalArgumentException.new } if ( List<Object>.isEmpty ) { return ( HashSet.new ) } else { ArrayList.new List<Object>.clear HashSet.new return ( ) }
if ( ) { return ( Map<String,Object>.containsKey ) } if ( HttpCookie.getValue String.equals ) { return ( ) }
Field.getType Class<>.isPrimitive Map<Class<Object>,Integer>.get if ( ) { Method.invoke Number.longValue return ( Math.max ) RuntimeException.new InvocationTargetException.getCause Field.getDeclaringClass Class.getName Field.getName RuntimeException.new }
if ( ) { if ( ) { if ( ) { String.compareTo String.compareTo } } }
if ( Set<Integer>.size ) { } if ( Set<Object>.size ) { } if ( List<Object>.size ) { List<Object>.size List<Object>.toArray } if ( String.isEmpty ) { } if ( List<Object>.size ) { List<Object>.size List<Object>.toArray } if ( String.isEmpty ) { }
ByteArrayOutputStream.new ByteArrayOutputStream.reset ByteArrayOutputStream.write ByteArrayOutputStream.write String.getBytes ByteArrayOutputStream.write ByteArrayOutputStream.write ByteArrayOutputStream.write ByteArrayOutputStream.write ByteArrayOutputStream.write ByteArrayOutputStream.write Hashtable<String,String>.get ByteArrayOutputStream.write ByteArrayOutputStream.write ByteArrayOutputStream.write ByteArrayOutputStream.write ByteArrayOutputStream.write Hashtable<String,String>.get ByteArrayOutputStream.write ByteArrayOutputStream.write ByteArrayOutputStream.write ByteArrayOutputStream.write ByteArrayOutputStream.write Hashtable<String,String>.get ByteArrayOutputStream.write ByteArrayOutputStream.write ByteArrayOutputStream.write ByteArrayOutputStream.write ByteArrayOutputStream.write String.getBytes ByteArrayOutputStream.write ByteArrayOutputStream.write ByteArrayOutputStream.write ByteArrayOutputStream.write ByteArrayOutputStream.write String.getBytes ByteArrayOutputStream.write ByteArrayOutputStream.write ByteArrayOutputStream.write String.getBytes ByteArrayOutputStream.write ByteArrayOutputStream.write ByteArrayOutputStream.write ByteArrayOutputStream.toByteArray
Thread.currentThread Thread.interrupt
AtomicBoolean.new if ( AtomicBoolean.get ) { }
if ( ) { return ( Boolean.booleanValue ) }
JCheckBox.setSelected JCheckBox.setSelected JCheckBox.setSelected JCheckBox.setSelected JCheckBox.setSelected JCheckBox.setSelected JCheckBox.setSelected JCheckBox.setSelected
return ( AnnotationValueVisitor<TypeMirror,Void>.visit )
Map<String,Object>.put
if ( ) { NullPointerException.new }
if ( ) { NullPointerException.new }
if ( ) { IllegalArgumentException.new } IllegalStateException.new
String.toLowerCase String.toLowerCase DatatypeConverter.printHexBinary
for ( ; List.size ; ) { List.get if ( ) { if ( ) { if ( ) { if ( ) { System.arraycopy } } } } List.set }
PrintStream.println for ( ; ; ) { PrintStream.println } PrintStream.println PrintStream.println
HashMap<Character,Object<Object>>.new
ArrayList.new
String.length String.charAt String.charAt return ( Character.isLetterOrDigit Character.isLetterOrDigit )
CharSequence.length for ( ; CharSequence.length ; ) { Character.new } if ( ) { Character.new } for ( ; ; ) { List<CharSequence>.get }
if ( HashMap<String,Object>.containsKey ) { HashMap<String,Object>.get }
return ( Map.isEmpty )
return ( Vector.isEmpty )
if ( ) { Lock.lock Lock.unlock }
while ( ) { return ( ) if ( TreeMap<Long,String>.size ) { return ( ) } for ( TreeMap<Long,String>.values ) { } }
HashSet.new for ( ) { EnumMap<Object,Set<Object>>.get if ( Set<Object>.remove ) { Set<Object>.add } }
Arrays.checkOffsetAndCount
return ( List<List<TableCellEditor>>.get List<TableCellEditor>.size )
StringCoding.decode
Objects.requireNonNull
if ( String.equals String.equals ) { NoSuchElementException.new } Collections.sort for ( ) { if ( ) { PrintStream.println List<String>.add } } PrintStream.println PrintStream.println PrintStream.println PrintStream.println IOException.printStackTrace
return ( Map<Object,Object>.isEmpty )
return ( Collections.emptyList )
ArrayList<Object>.add
if ( Object.equals String.equalsIgnoreCase ) { if ( Object.equals String.equalsIgnoreCase ) { return ( ) } }
System.currentTimeMillis if ( String.equalsIgnoreCase ) { return ( ) } System.currentTimeMillis System.currentTimeMillis
ArrayList<Object>.add
return ( Integer.intValue )
String.trim
System.getSecurityManager if ( ) { File.getPath SecurityManager.checkRead } File.getPath FileNotFoundException.new FileNotFoundException.initCause
Shape.getBounds for ( ; ; ) { for ( ; ; ) { if ( Shape.contains ) { } } }
StringBuilder.new for ( ; ; ) { if ( ) { if ( String.length ) { String.indexOf String.substring if ( String.length ) { if ( ) { StringBuilder.append } String.trim StringBuilder.append } } } } return ( StringBuilder.toString )
ArrayList<List<Object>>.new for ( ) { continue Collection<List<Object>>.add }
Switch ( List.size ) { case : return ( List.get ) default : RuntimeException.new }
ArrayList<Object>.new ArrayList<Object>.add for ( ) { if ( BigDecimal.signum ) { continue } }
StringBuilder.new while ( String.indexOf ) { StringBuilder.append } StringBuilder.toString String.trim if ( String.equals ) { }
return ( Map<String,Object>.values )
return ( String.toCharArray String.toCharArray String.toCharArray String.toCharArray )
for ( ; ; ) { BigInteger.gcd BigInteger.multiply BigInteger.divide }
HashSet.new while ( ) { Set.add }
return ( Math.floor )
Map.get if ( ) { return ( Integer.intValue ) }
File.new
for ( ; Iterator.hasNext ; ) { Iterator.next }
if ( String.equals ) { if ( ) { SAXNotSupportedException.new } } else { if ( String.equals ) { if ( ) { if ( List<>.isEmpty ) { SAXNotSupportedException.new } else { ArrayList<Object>.new Collections.unmodifiableList } } else { SAXNotSupportedException.new } } else { SAXNotRecognizedException.new } } Map<String,Object>.put
Thread.currentThread Thread.interrupt
ArrayList.new if ( ) { List<Object>.add }
if ( ) { PrintStream.println } PrintStream.println FileReader.new BufferedReader.new BufferedReader.readLine PrintStream.println PrintStream.println PrintStream.println PrintStream.println PrintStream.println
Thread.currentThread Thread.getPriority Thread.new Thread.start Thread.new Thread.setPriority Thread.start Thread.new Thread.setPriority Thread.start
Calendar.getInstance Calendar.getTimeInMillis System.currentTimeMillis Math.max do { Thread.sleep if ( ) { Calendar.getInstance return ( ) Object.toString } System.currentTimeMillis Math.min } while ( ) ; String.equals Calendar.getInstance
return ( Object.equals )
HashMap<String,String>.get if ( ) { Exception.getMessage if ( String.startsWith ) { String.substring } HashMap<String,String>.put }
BigDecimal.new BigDecimal.new BigDecimal.new Arrays.asList
Map<String,Map<Object,Map<String,Map<String,Map<Long,Object>>>>>.get HashMap<String,Map<Long,Object>>.new
for ( ; ; ) { if ( ) { if ( ) { if ( ) { Method.getParameterTypes } else { if ( ) { Constructor<>.getParameterTypes } else { AccessibleObject.getClass Class.getName IllegalArgumentException.new } } } } }
if ( ) { StringIndexOutOfBoundsException.new } if ( ) { if ( ) { System.arraycopy } else { if ( ) { Arrays.fill } } }
String.replace Path.resolve String.format String.format
if ( ) { UnsupportedOperationException.new }
String.valueOf
if ( ) { if ( ) { return ( Boolean.booleanValue ) } return ( String.equals ) }
if ( ) { EOFException.new }
HashMap<Object,Integer>.get HashMap<Object,Integer>.get
Locale.getDefault
if ( ) { PrintStream.println }
if ( Array.getLength ) { IllegalArgumentException.new }
Map<String,Object>.entrySet Set.iterator while ( Iterator<Entry<String,Object>>.hasNext ) { Iterator<Entry<String,Object>>.next Entry<String,Object>.getValue File.delete Iterator<Entry<String,Object>>.remove }
Hashtable<KeyStroke,Object>.new
return ( List<String>.size List<String>.toArray )
if ( ) { Collections.emptyList }
if ( ) { System.currentTimeMillis if ( ) { SocketException.new } }
do { if ( ) { Thread.sleep } } while ( ) ;
Switch ( ) { default : RuntimeException.new }
if ( ) { Set.clear return ( ) } for ( Set.iterator ; Iterator.hasNext ; ) { if ( Iterator.next ) { ClassCastException.new } } Set.clear Set.addAll
if ( ) { UnsupportedOperationException.new } InputMethod.reconvert
Set<Object>.add if ( ) { PriorityBlockingQueue<Object>.add return ( ) } if ( Map<String,Queue<Object>>.containsKey ) { Map<String,Queue<Object>>.get if ( ) { LinkedList<Object>.new } Queue<Object>.add Map<String,Queue<Object>>.put } else { Map<String,Queue<Object>>.put PriorityBlockingQueue<Object>.add }
if ( ) { if ( ) { String.length } }
return ( Integer.intValue )
if ( ) { if ( Object.getClass ) { return ( ) } }
if ( File.isDirectory ) { return ( ) }
return ( Thread.getThreadGroup ThreadGroup.activeCount )
Math.max if ( List<Object>.stream Stream.map Stream.filter Stream.count ) { }
if ( List<>.size ) { List<>.get return ( ) return ( return ( ) return ( ) ) return ( ) SimpleTypeVisitor7<Object,Class<Void>>.new TypeMirror.accept } if ( List<>.size ) { List<>.get }
while ( ) { InputStream.read OutputStream.write }
if ( ) { if ( ) { if ( ) { List<Object>.add } } else { if ( ) { List<Object>.add } List<Object>.clear Exception.getLocalizedMessage Exception.getLocalizedMessage } }
if ( ) { ResourceBundle.getString } KeyStore.getInstance ResourceBundle.getString MessageFormat.format ResourceBundle.getString MessageFormat.format KeyStore.load ResourceBundle.getString MessageFormat.format ResourceBundle.getString MessageFormat.format ResourceBundle.getString MessageFormat.format
String.getBytes String.length String.getBytes
if ( ) { Executors.newCachedThreadPool }
Arrays.asList
Math.sqrt Polygon.new Math.round Math.round Polygon.addPoint Math.round Math.round Polygon.addPoint Math.round Math.round Polygon.addPoint Math.round Math.round Polygon.addPoint Math.round Math.round Polygon.addPoint Math.round Math.round Polygon.addPoint Math.round Math.round Polygon.addPoint
if ( ) { for ( List<Object>.size ; ; ) { List<Object>.get } }
if ( List<Object>.contains ) { List<Object>.remove List<String>.remove }
Class.getName
return ( Arrays.asList )
if ( ) { Integer.valueOf }
StringBuilder.new for ( ; ; ) { StringBuilder.append } return ( StringBuilder.toString )
LinkedHashMap<Object,Object>.new for ( ; ; ) { if ( ) { if ( ) { Map<Object,Object>.put } } } for ( ) { Map<Object,Object>.put }
Exception.getLocalizedMessage Logger.info Exception.printStackTrace
HashMap<String,Future<Object>>.new for ( ) { URI.create ExecutorService.submit Map<String,Future<Object>>.put } HashMap<String,Object>.new for ( Map<String,Future<Object>>.entrySet ) { Entry<String,Future<Object>>.getValue Entry<String,Future<Object>>.getKey Future<Object>.get Map<String,Object>.put if ( Future<Object>.isDone ) { Entry<String,Future<Object>>.getKey Future<Object>.cancel } }
if ( ) { return ( Hashtable.get ) }
return ( Document.getUserData )
return ( Map.get )
ConcurrentHashMap<Class,Object>.get if ( Class<Object>.isInstance ) { Class<Object>.getName IllegalArgumentException.new } ConcurrentHashMap<Class,Object>.putIfAbsent
StringBuffer.new for ( ; List<String>.size ; ) { List<String>.get if ( ) { StringBuffer.append } StringBuffer.append } return ( StringBuffer.toString )
if ( ) { FileInputStream.new } InputStreamReader.new RuntimeException.new
Math.min System.arraycopy
Arrays.copyOf System.arraycopy Arrays.copyOf System.arraycopy
return ( EnumSet<Object>.contains )
Switch ( ) { case : Switch ( ) { case : for ( ; ; ) { Float.intBitsToFloat } break case : for ( ; ; ) { Double.longBitsToDouble } break } }
WeakReference.new Map<Object,WeakReference<Object>>.put
if ( ) { if ( ) { RuntimeException.new } }
if ( ) { Integer.new }
if ( ) { if ( ) { if ( ) { Math.max Math.max } } }
return ( Predicate<Object>.negate )
if ( ) { if ( ) { if ( ) { String.indexOf String.indexOf if ( ) { String.compareTo } } return ( ) } }
Writer.close
for ( ; ; ) { if ( Integer.new HashMap.containsKey ) { LinkedList.addLast LinkedList.addLast while ( ) { if ( ) { LinkedList.addLast LinkedList.addLast } else { LinkedList.addLast } } } }
if ( JTabbedPane.isEnabled JTabbedPane.isEnabledAt ) { if ( ) { if ( UIManager.getBoolean ) { } } } if ( JTabbedPane.hasFocus ) { }
String.format
MenuDragMouseEvent.getMenuSelectionManager MenuDragMouseEvent.getX MenuDragMouseEvent.getY if ( JMenuItem.getWidth JMenuItem.getHeight ) { MenuSelectionManager.clearSelectedPath }
if ( List<Object>.isEmpty ) { return ( ) } if ( List<Object>.isEmpty ) { List<Object>.size }
if ( ) { Integer.valueOf }
if ( ) { System.arraycopy }
FileDialog.new FileDialog.setFile FileDialog.show if ( FileDialog.getFile ) { FileDialog.getDirectory FileDialog.getFile } Button.setEnabled Button.setEnabled
return ( String.length )
System.currentTimeMillis System.currentTimeMillis Exception.getMessage
Arrays.checkOffsetAndCount if ( ) { BufferOverflowException.new }
return ( String.replaceAll ) PreparedStatement.setInt UUID.toString PreparedStatement.setString PreparedStatement.setInt UUID.toString PreparedStatement.setString PreparedStatement.setInt UUID.toString PreparedStatement.setString
Calendar.getInstance Calendar.get Calendar.get Calendar.get Calendar.get Calendar.get Calendar.get Calendar.get
HashMap<String,String>.new FileInputStream.new InputStreamReader.new BufferedReader.new while ( BufferedReader.readLine ) { String.trim if ( String.length String.startsWith ) { String.split if ( ) { String.replace if ( String.contains ) { String.replace } else { String.replace } Map<String,String>.put } } } if ( ) { BufferedReader.close } Map<String,String>.size
if ( ) { LinkedHashMap<String,Object>.new Collections.synchronizedMap }
JLabel.new JTextField.new JTextField.setText GroupLayout.new GroupLayout.createParallelGroup GroupLayout.createSequentialGroup SequentialGroup.addContainerGap SequentialGroup.addComponent SequentialGroup.addPreferredGap SequentialGroup.addComponent SequentialGroup.addContainerGap ParallelGroup.addGroup GroupLayout.setHorizontalGroup GroupLayout.createParallelGroup GroupLayout.createSequentialGroup SequentialGroup.addContainerGap GroupLayout.createParallelGroup ParallelGroup.addComponent ParallelGroup.addComponent SequentialGroup.addGroup SequentialGroup.addContainerGap ParallelGroup.addGroup GroupLayout.setVerticalGroup
if ( ) { Integer.valueOf }
ArrayDeque<Object>.size if ( ) { for ( ; ; ) { ArrayDeque<Object>.pollLast } }
Entry<Object>.new
List<Object>.add
Boolean.valueOf
System.currentTimeMillis
Object.new Object.new HashMap.new Map<Object,Object>.put for ( ) { if ( Map<Object,Object>.get ) { if ( Map<Object,Object>.get ) { } } } Map<Object,Object>.put for ( HashMap<Object,Object>.values ) { if ( Map<Object,Object>.get ) { } }
Random.new for ( ; ; ) { ArrayList<ArrayList>.add for ( ; ; ) { Random.nextInt ArrayList<Integer>.add } ArrayList<Integer>.add }
Blob.length Blob.length Blob.getBinaryStream Blob.getBinaryStream BufferedInputStream.new BufferedInputStream.new InputStream.read InputStream.read do { InputStream.read InputStream.read } while ( ) ; InputStream.close InputStream.close
LinkedHashMap.new if ( ) { for ( ; ; ) { HashMap.put } }
Integer.new String.valueOf
HashSet.new while ( Map<Object,List<Object>>.isEmpty ) { Map<Object,List<Object>>.keySet Set<Object>.add }
File.new
if ( ) { Math.max } else { if ( ) { Math.min } }
BasicStroke.new
HashMap.new for ( ) { if ( ) { Collections.emptyList } else { ArrayList.new for ( ) { List<Object>.add } } Map<Object,List<Object>>.put }
String.endsWith String.indexOf String.substring if ( String.length ) { StringBuffer.append } if ( ) { return ( StringBuffer.toString StringBuffer.toString ) } else { return ( StringBuffer.toString ) }
if ( File.exists ) { File.getAbsolutePath if ( File.mkdirs ) { File.getAbsolutePath } }
Collections.emptyList
if ( ) { Cursor.getDefaultCursor JInternalFrame.setCursor }
Map<Object,Object>.isEmpty Map<Object,Object>.isEmpty
if ( ) { IllegalArgumentException.new }
for ( ; ; ) { if ( ) { IllegalMonitorStateException.new } }
Boolean.valueOf
ArrayList<Object>.new Collections.sort for ( ) { if ( ) { List<Object>.add } }
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new }
if ( ) { Point.new }
if ( ) { if ( ) { SocketAddress.getClass IllegalArgumentException.new } InetSocketAddress.getPort } DatagramSocketImplFactory.createDatagramSocketImpl PlainDatagramSocketImpl.new DatagramSocketImpl.create
File.new if ( File.exists ) { return ( ) } if ( String.indexOf ) { String.trim String.split }
if ( ) { IllegalArgumentException.new } if ( ) { File.getAbsolutePath } else { if ( ) { URL.toExternalForm } else { if ( ) { Object.toString } } }
File.new if ( File.exists ) { }
for ( ) { if ( String.equals ) { } }
if ( ) { RuntimeException.new }
Document.getFirstChild
if ( ) { MalformedURLException.new } if ( ) { MalformedURLException.new } MalformedURLException.new MalformedURLException.initCause FileNotFoundException.new
return ( List<Object>.remove )
return ( String.valueOf )
return ( Collections.unmodifiableMap )
Switch ( ) { default : Byte.valueOf IllegalStateException.new }
return ( Arrays.asList )
if ( String.compareTo ) { }
return ( Date.getTime )
Arrays.asList Arrays.asList Arrays.asList Arrays.asList Arrays.asList Arrays.asList
if ( ) { IllegalStateException.new }
return ( String.trim )
if ( ) { IllegalArgumentException.new }
FileOutputStream.new String.getBytes
if ( Field.getDeclaringClass ) { return ( ) } if ( Field.getName String.equals ) { return ( ) } if ( Field.getType ) { return ( ) }
Runnable.new
return ( Float.floatToIntBits )
if ( ) { if ( ) { Set<String>.add } return ( ) } else { if ( ) { Set<String>.add } if ( ) { Set<String>.add } return ( ) }
Number.doubleValue for ( ; ; ) { Number.doubleValue Number.doubleValue } for ( ; ; ) { Number.doubleValue Number.doubleValue }
return ( Integer.intValue )
for ( ; ; ) { DataInputStream.readInt } for ( ; ; ) { DataInputStream.readInt } DataInputStream.readInt DataInputStream.readDouble DataInputStream.readBoolean
if ( ) { for ( List<Object>.size ; ; ) { List<Object>.get if ( ) { List<Object>.set } } }
JButton.setVisible
for ( ; ; ) { ByteBuffer.allocate Future<Void>.get Future<Void>.get }
String.indexOf if ( ) { return ( String.charAt ) }
return ( Map<String,Object>.get )
if ( ) { StringBuffer.new StringBuffer.append Map.entrySet Set.iterator while ( Iterator.hasNext ) { Iterator.next Entry.getKey if ( ) { if ( String.startsWith ) { Entry.getValue StringBuffer.append for ( ; ArrayList.size ; ) { StringBuffer.append ArrayList.get StringBuffer.append StringBuffer.append } } } } return ( StringBuffer.toString ) }
if ( Class<>.isPrimitive ) { Class<>.getSimpleName IllegalArgumentException.new } Map<Class<Object>,Object>.put
if ( ) { System.arraycopy InstrumentationImpl.callTransformers return ( ) }
return ( Cipher.update )
return ( Integer.new )
if ( ) { JTable.getSelectedRow if ( ) { JTable.convertRowIndexToModel if ( ) { if ( ) { JTable.convertRowIndexToModel } } } }
QName.getLocalPart
if ( ) { return ( StrictMath.pow ) }
if ( ) { if ( Map<String,Object>.containsKey ) { } }
File.getPath if ( ) { IllegalArgumentException.new } if ( ) { File.deleteOnExit }
Hashtable.get if ( ) { Hashtable.put }
if ( ) { for ( Class<>.getDeclaredMethods ) { if ( Method.getName String.equals Method.getParameterTypes ) { break } } }
return ( Number.doubleValue )
return ( Arrays.copyOf )
Collection<>.size
AtomicLong.addAndGet AtomicLong.addAndGet AtomicLong.addAndGet AtomicLong.addAndGet AtomicLong.addAndGet AtomicLong.addAndGet AtomicLong.addAndGet AtomicLong.addAndGet AtomicLong.addAndGet AtomicLong.addAndGet AtomicLong.addAndGet AtomicLong.addAndGet AtomicLong.addAndGet AtomicLong.addAndGet Math.max AtomicLong.set Math.max AtomicLong.set
if ( ) { IllegalStateException.new }
if ( DataFlavor.getRepresentationClass ) { UnsupportedFlavorException.new }
if ( ) { StringIndexOutOfBoundsException.new } Math.min
ByteArrayOutputStream.new ObjectOutputStream.new ObjectOutputStream.writeObject ObjectOutputStream.close ByteArrayOutputStream.toByteArray String.new
Insets.new JPanel.new JButton.new Dimension.new JButton.setPreferredSize JTextField.new Dimension.new JTextField.setPreferredSize JTextField.new Dimension.new JTextField.setPreferredSize JPanel.add JPanel.add JPanel.add JPanel.getPreferredSize JPanel.getHeight Dimension.new JPanel.setSize JPanel.doLayout JButton.getWidth JTextField.getWidth JTextField.getWidth
for ( Map<Object,Point>.keySet ) { }
Vector.new Vector.ensureCapacity Vector.capacity Vector.new Vector.capacity
for ( ; ; ) { Vector.elementAt Vector.setElementAt }
for ( List<Object>.toArray ) { if ( ) { List<Object>.remove } }
Map<String,Object>.get if ( ) { if ( ) { return ( ByteArrayInputStream.new ) } }
if ( ) { for ( ) { if ( String.startsWith ) { } } } if ( ) { Exception.getMessage }
Charset.defaultCharset
if ( ) { RejectedExecutionException.new }
ArrayList<Object>.new Collection<Object>.add Collection<Object>.add
for ( ) { if ( Collection<Object>.contains ) { } }
ThreadLocal<Calendar>.get Calendar.setTime Calendar.get
HashSet<Object>.new Set<Object>.add while ( ) { for ( HashSet<Object>.new ) { Set<Object>.addAll } }
if ( ) { URL.new return ( ) return ( ) }
Map<String,String>.put
if ( ) { IllegalStateException.new } if ( ) { IllegalArgumentException.new } DataOutputStream.writeInt DataOutputStream.writeInt for ( ) { DataOutputStream.writeInt } RuntimeException.new
StringBuilder.new while ( String.length ) { String.charAt if ( String.length ) { Switch ( String.charAt ) { case : StringBuilder.append break default : StringBuilder.append break } } else { StringBuilder.append } } String.length String.charAt for ( ) { if ( ) { return ( StringBuilder.toString ) } }
if ( ) { IllegalStateException.new }
for ( ) { List<Object>.get return ( ) }
IOException.getMessage IOException.printStackTrace CertificateEncodingException.getMessage CertificateEncodingException.printStackTrace InvalidKeyException.printStackTrace NoSuchAlgorithmException.getMessage NoSuchAlgorithmException.printStackTrace SignatureException.getMessage SignatureException.printStackTrace InvalidKeySpecException.getMessage InvalidKeySpecException.printStackTrace Exception.getMessage Exception.printStackTrace Exception.getMessage
DESKeySpec.isWeak DESKeySpec.isWeak for ( ; ; ) { DESKeySpec.isWeak } for ( ; ; ) { DESKeySpec.isWeak }
Vector<Object>.new if ( ) { for ( HashMap<Integer,Vector<Object>>.values ) { Vector<Object>.addAll } }
Number.doubleValue
for ( ; ; ) { Math.sin Math.sin }
if ( String.equalsIgnoreCase ) { if ( String.equalsIgnoreCase ) { return ( ) } }
StringBuilder.new StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append return ( StringBuilder.toString )
Error.new
if ( ) { IllegalArgumentException.new } if ( ) { NullPointerException.new }
if ( String.equals ) { if ( String.equals ) { if ( String.equals ) { if ( String.equals ) { } } } }
return ( String.endsWith String.format String.format )
for ( ) { if ( Map<Object,Object>.containsKey ) { if ( ) { Map<Object,Object>.put } } }
Class.getClassLoader Class.getClassLoader
StringBuilder.new for ( ) { StringBuilder.append StringBuilder.append } return ( StringBuilder.toString )
String.concat Hashtable<String,Object>.put
NodeList.getLength for ( ; ; ) { NodeList.item if ( ) { Vector.add } }
Map<Object,Object>.put
return ( HashSet.new while ( ResultSet.next ) { ResultSet.getString String.split LinkedHashMap.new for ( ) { String.split LinkedHashMap<String,String>.put } Set<Object>.add } return ( ) )
Map<String,Object>.remove Set<Class<Object>>.remove
return ( BigInteger.valueOf )
if ( ) { while ( Iterator<String>.hasNext ) { Iterator<String>.next } return ( ) }
File.new File.delete System.gc
if ( Integer.parseInt ) { return ( ) } if ( ) { File.getAbsolutePath File.new FileOutputStream.new OutputStreamWriter.new OutputStreamWriter.write OutputStreamWriter.close IOException.toString File.getAbsolutePath }
if ( ) { Timestamp.new } Logger.fine Connection.prepareStatement PreparedStatement.setString PreparedStatement.setTimestamp PreparedStatement.execute Connection.commit if ( SQLException.getErrorCode ) { SQLException.getMessage Logger.info return ( ) } IllegalStateException.new
if ( ) { NullPointerException.new } if ( ) { HashMap.new } else { HashMap.get } if ( ) { HashMap.put }
ArrayList.new
if ( ) { return ( Map<String,String>.get String.format ) } return ( Map<String,String>.get String.format )
if ( ) { Document.createElement Document.appendChild for ( Map<String,Long>.entrySet Set.iterator ; Iterator<Entry<String,Long>>.hasNext ; ) { Iterator<Entry<String,Long>>.next Entry<String,Long>.getKey if ( Map<String,Object>.containsKey ) { Document.createElement Element.appendChild Element.setAttribute Entry<String,Long>.getValue Long.toString Element.setAttribute } } if ( File.exists ) { File.createNewFile } FileOutputStream.new BufferedOutputStream.new String.getBytes OutputStream.write if ( ) { OutputStream.close } }
UnsupportedOperationException.new
StringBuilder.new StringBuilder.append for ( ; ; ) { StringBuilder.append if ( ) { return ( StringBuilder.append StringBuilder.toString ) } StringBuilder.append StringBuilder.append }
StringBuilder.new StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append Set<String>.isEmpty Set<String>.toString StringBuilder.append StringBuilder.append List<CertStore>.isEmpty List<CertStore>.toString StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append List<PKIXCertPathChecker>.isEmpty List<PKIXCertPathChecker>.toString StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append return ( StringBuilder.toString )
for ( ArrayList<Object>.size ; ; ) { ArrayList<Object>.get }
Hashtable.new ArrayList<Object>.new
Date.new
return ( Number.longValue )
StringReader.new StringReader.new PreparedStatement.setInt String.length PreparedStatement.setCharacterStream PreparedStatement.executeUpdate PreparedStatement.close ResultSet.next String.length ResultSet.updateCharacterStream ResultSet.updateRow ResultSet.close ResultSet.next ResultSet.getCharacterStream String.length StringReader.read String.new ResultSet.close
if ( ) { IllegalArgumentException.new }
String.new HashMap.remove HashMap.remove
if ( String.equals ) { Runnable.new } else { Runnable.new }
return ( Field.getName )
return ( Float.floatToIntBits Float.floatToIntBits )
return ( List<Object>.indexOf )
if ( ) { if ( Error.errorId ) { Error.errorId Error.sysError Error.text PrintStream.printf return ( ) } if ( ) { Error.text PrintStream.printf return ( ) } if ( ) { Error.errorId Error.sysError Error.text PrintStream.printf return ( ) } }
Pattern.matcher while ( Matcher.find ) { Matcher.group if ( String.contains ) { String.indexOf String.substring String.indexOf String.substring if ( ) { Map<String,String>.put } } }
if ( ) { if ( ) { Integer.intValue } Integer.valueOf }
if ( String.contains ) { if ( String.contains ) { if ( String.contains ) { IllegalArgumentException.new } } } String.split String.trim Double.parseDouble String.replaceAll String.split for ( ) { String.charAt String.replaceFirst String.trim Integer.parseInt }
if ( Class<>.isPrimitive ) { return ( ) } while ( Class<>.equals ) { if ( Class<>.isInterface ) { break } Class<>.getSuperclass }
Properties.new System.getProperty if ( ) { File.new FileInputStream.new Properties.load RuntimeException.new } else { Class.getClassLoader ClassLoader.getResourceAsStream Properties.load IOException.printStackTrace }
AtomicBoolean.getAndSet
Document.getImplementation DOMImplementation.createDocumentType DocumentType.getPublicId DocumentType.getSystemId
if ( String.contains ) { String.indexOf String.substring String.replace String.replace String.length String.substring return ( ) }
if ( Map<Object,Object>.containsKey ) { Map<Object,Object>.put } Map<Object,Object>.get
File.new if ( File.exists ) { File.delete } FileOutputStream.new ZipOutputStream.new ZipOutputStream.flush if ( ) { ZipOutputStream.close } if ( ) { FileOutputStream.close }
return ( List<String>.size )
if ( ) { ArrayList<Object>.new }
Object.getClass Class.getMethod Method.invoke InvocationTargetException.getTargetException
return ( StreamSupport.stream Collectors.toList )
Class.getName MBeanOperationInfo.new Class.getName MBeanParameterInfo.new Class.getName MBeanOperationInfo.new Class.getName MBeanParameterInfo.new Class.getName MBeanOperationInfo.new
if ( ) { NullPointerException.new }
Boolean.valueOf Exception.getMessage
Switch ( ) { default : SQLException.new }
if ( ) { IllegalArgumentException.new }
if ( Object.equals ) { }
NetworkInterface.getNetworkInterfaces Collections.list for ( ) { NetworkInterface.getInetAddresses Collections.list for ( ) { if ( InetAddress.isLoopbackAddress ) { InetAddress.getHostAddress String.toUpperCase if ( ) { if ( ) { String.indexOf return ( String.substring ) } } } } }
if ( ) { IllegalStateException.new }
ByteArrayInputStream.new ObjectInputStream.new ObjectInputStream.readObject IOException.printStackTrace ClassNotFoundException.printStackTrace ByteArrayInputStream.close ObjectInputStream.close
List.clear
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } if ( Map<Object,String>.containsKey ) { return ( ) } Map<Object,String>.put
for ( ; ; ) { if ( String.equals ) { } if ( String.equals ) { } } if ( ) { IllegalArgumentException.new }
PrintStream.print
Map<String,String>.put
ConcurrentHashMap<String,Object>.get
return ( LinkedList<Object>.getLast )
String.new
File.new Map<Integer,List<String>>.put
return ( AtomicBoolean.get )
if ( ) { Integer.valueOf }
if ( ) { Integer.valueOf }
Callable<Void>.new
DatabaseMetaData.supportsNonNullableColumns Statement.execute Statement.execute Connection.close DatabaseMetaData.supportsNonNullableColumns
if ( ) { for ( ; List.size ; ) { List.get } } else { for ( ; List.size ; ) { List.get } }
return ( Math.max Math.max )
return ( Map<Object,Set<Object>>.keySet )
Objects.requireNonNull Objects.requireNonNull for ( ) { if ( String.equals ) { return ( ) } }
return ( Optional.ofNullable )
if ( ) { Properties.setProperty Properties.setProperty }
String.format RuntimeException.new
return ( Base64.getUrlDecoder Decoder.decode )
PrintStream.println Thread.currentThread Thread.getContextClassLoader Thread.currentThread Thread.setContextClassLoader URL.openStream BufferedInputStream.new for ( BufferedInputStream.read ; ; ) { BufferedInputStream.read } BufferedInputStream.close Thread.currentThread Thread.setContextClassLoader
Document.getElementsByTagName NodeList.item Element.hasAttributeNS
return ( System.identityHashCode )
return ( SocketChannel.isConnected )
if ( ) { IllegalArgumentException.new } IllegalStateException.new
StringBuilder.new StringBuilder.append return ( StringBuilder.toString )
StringBuffer.new Switch ( ) { case : StringBuffer.append break case : StringBuffer.append break case : StringBuffer.append break case : StringBuffer.append break } StringBuffer.append StringBuffer.append return ( StringBuffer.toString )
Map<String,List<Object>>.get return ( Collections.emptyList )
RSAPublicKey.getModulus BigInteger.toString RSAPublicKey.getPublicExponent BigInteger.toString
if ( String.equals ) { }
List<String>.clear List<String>.addAll
if ( ) { Integer.parseInt Integer.parseInt Integer.parseInt Boolean.parseBoolean Integer.parseInt }
return ( Set<String>.contains )
Properties.getProperty Class.forName ClassNotFoundException.getLocalizedMessage PrintStream.println IllegalStateException.new return ( Class<>.newInstance )
for ( ; Vector.size ; ) { Vector.elementAt }
if ( List<Object>.size ) { return ( ) } ArrayList.new for ( ; List<Object>.size ; ) { List<Object>.size Math.min List<Object>.subList ArrayList.new if ( List<Object>.stream List<Object>.size ) { continue } List<Object>.size List<Object>.subList Collectors.toList List<Object>.addAll List<List<Object>>.add }
if ( ) { NullPointerException.new } StringCoding.decode
List.size Collection.iterator while ( Iterator.hasNext ) { Iterator.next if ( List.contains ) { List.add } } for ( ; List.size ; ) { List.get } while ( List.size ) { List.remove }
if ( ) { StringBuffer.new StringBuffer.append StringBuffer.toString String.toCharArray }
List<Object>.clear for ( ; ; ) { if ( ) { List<Object>.add } } List<Object>.size for ( ; List<Object>.size ; ) { List<Object>.get }
if ( ) { IllegalArgumentException.new }
ExecutorService.submit
Kernel.getKernelData Kernel.getWidth
if ( Double.isNaN ) { return ( ) } if ( ) { Math.log }
HashSet<Type>.new while ( Iterator<AudioFileWriter>.hasNext ) { Iterator<AudioFileWriter>.next AudioFileWriter.getAudioFileTypes for ( ; ; ) { HashSet<Type>.add } } return ( HashSet<Type>.size HashSet<Type>.toArray )
for ( ) { FileInputStream.new BufferedInputStream.new InputStream.close }
if ( ) { Calendar.getInstance StringBuilder.append StringBuilder.append IOException.getMessage StringBuilder.append StringBuilder.append String.format StringBuilder.append } else { StringBuilder.append StringBuilder.append } StringBuilder.append StringBuilder.append StringBuilder.append
return ( Map<String,Object>.values HashSet.new )
if ( HashSet<Object>.isEmpty ) { }
if ( ) { Class<>.getName }
ArrayList.new AssertionError.new for ( ; ; ) { ArrayList.add } System.currentTimeMillis for ( ; ; ) { if ( System.currentTimeMillis ) { } Class.wait }
Integer.new
System.currentTimeMillis
if ( ) { NullPointerException.new } if ( ) { UnsupportedOperationException.new }
if ( ) { NullPointerException.new }
if ( ) { IllegalArgumentException.new } IllegalStateException.new
AtomicLong.new AtomicLong.get
List<>.get List<>.get List<Object>.addAll List<Object>.size List<Object>.addAll List<Object>.size List<Object>.size List<Object>.size List<Object>.add List<Object>.add List<Object>.add List<Object>.add List<Object>.add List<Object>.add List<Object>.add List<Object>.add List<Object>.add List<Object>.addAll
if ( ) { IllegalArgumentException.new }
Thread.start
for ( List<Object>.iterator ; Iterator<Object>.hasNext ; ) { Iterator<Object>.next } for ( List<Object>.iterator ; Iterator<Object>.hasNext ; ) { Iterator<Object>.next }
Class<>.getMethods for ( ; ; ) { if ( Method.getName String.lastIndexOf ) { return ( ) } }
return ( ConcurrentHashMap<Object,Object>.get )
if ( ) { IllegalArgumentException.new }
Vector.addElement Vector.addElement Vector.addElement
Switch ( ) { default : IllegalArgumentException.new }
return ( Collections.emptyList )
Method.getDeclaringClass Class.getName Method.getName IllegalArgumentException.new
if ( ) { IllegalArgumentException.new }
Math.min
Math.min Math.max
for ( ; ; ) { if ( String.equals String.equals ) { return ( ) } }
Exception.getMessage
return ( File.new )
if ( ) { if ( ) { TreePath.getLastPathComponent TreeModel.isLeaf TreeCellRenderer.getTreeCellRendererComponent if ( ) { Component.setBounds return ( SwingUtilities.getDeepestComponentAt ) } } }
if ( ) { List<Object>.size ArrayList<Object>.new return ( ) } else { if ( ) { List<Object>.size ArrayList<Object>.new return ( ) } }
IllegalArgumentException.new
if ( ) { if ( ) { IllegalStateException.new } }
Map<String,String>.keySet ArrayList.new Collections.sort StringBuilder.new for ( ) { Map<String,String>.get if ( String.length ) { StringBuilder.append StringBuilder.append } }
if ( SwingUtilities.isEventDispatchThread ) { Runnable.new SwingUtilities.invokeLater }
Integer.toString
File.new if ( File.isDirectory ) { File.getAbsolutePath return ( ) return ( File.getAbsolutePath ) }
if ( ) { ThreadLocal<Object>.set }
if ( ) { IllegalArgumentException.new } if ( ) { EOFException.new }
if ( ) { if ( String.startsWith ) { } }
Math.min
if ( ) { return ( return ( Method.invoke ) PrivilegedExceptionAction<Object>.new AccessController.doPrivileged ) } else { return ( Method.invoke ) }
while ( ) { if ( ReferenceQueue<Object>.remove ) { break } }
if ( String.isEmpty ) { IllegalArgumentException.new } if ( String.isEmpty ) { IllegalArgumentException.new }
X509Certificate.getPublicKey X509Certificate.verify ResourceBundle.getString ResourceBundle.getString ResourceBundle.getString
LinkedHashSet.new while ( HashSet<Object>.isEmpty ) { }
Switch ( ) { default : IllegalArgumentException.new }
for ( ) { List<Object>.add }
String.length if ( ) { for ( ; ; ) { if ( String.charAt Character.isWhitespace ) { return ( ) } } }
StringBuilder.new Integer.parseInt StringBuilder.append return ( StringBuilder.toString )
return ( String.substring )
return ( List.size )
File.new
for ( ) { while ( Iterator<Object>.hasNext ) { Iterator<Object>.next if ( LinkedHashMap<Object,Object>.put ) { } } }
StringBuilder.new return ( StringBuilder.toString )
if ( ) { NullPointerException.new }
RuntimeException.new
List<Object>.size for ( ; ; ) { List<Object>.get List<Object>.get }
System.getSecurityManager if ( ) { SecurityManager.checkSecurityAccess } if ( Vector.contains ) { KeyManagementException.new } Vector.removeElement
if ( ) { IndexOutOfBoundsException.new }
if ( ) { if ( ) { ClassNotFoundException.new } if ( ) { ClassNotFoundException.new } return ( ) } return ( ClassLoader.loadClass )
Object.toString
ReentrantReadWriteLock.writeLock WriteLock.unlock
return ( AtomicInteger.get )
Exception.getMessage Exception.getMessage Exception.toString
if ( ) { Switch ( ) { case : StringBuilder.new StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append if ( ) { StringBuilder.append StringBuilder.append } StringBuilder.toString break case : StringBuilder.new StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append if ( ) { StringBuilder.append StringBuilder.append } if ( ) { StringBuilder.append StringBuilder.append } StringBuilder.toString break } }
while ( ) { for ( ; ; ) { List<Object>.get List<Object>.get } }
if ( ) { RuntimeException.new }
return ( BufferedReader.readLine )
if ( ) { Math.log } return ( Math.log )
if ( String.length ) { }
if ( ) { Connection.close }
return ( Math.pow )
if ( ) { List<Object>.add }
Matcher.groupCount Matcher.group Integer.parseInt Matcher.start if ( ) { PrintStream.println if ( ) { PrintStream.println String.substring if ( Matcher.group ) { } String.substring FileOutputStream.new String.getBytes FileOutputStream.write FileOutputStream.close return ( ) } }
return ( File.getPath String.length )
MARSHAL.new
JPopupMenu.add JMenuItem.setMnemonic JPopupMenu.add JMenuItem.setMnemonic JPopupMenu.add JMenuItem.setMnemonic JPopupMenu.add JMenuItem.setMnemonic JPopupMenu.add JMenuItem.setMnemonic JSeparator.new JPopupMenu.add JPopupMenu.add JMenuItem.setMnemonic
if ( ) { if ( ) { Exception.new } else { Exception.new } }
if ( Class.getClassLoader ) { return ( ) }
if ( ) { if ( List<Object>.size ) { } }
if ( ) { Date.getTime Date.new }
JList.new JList<Object>.setModel JList<Object>.setCellRenderer
for ( ) { String.split if ( ) { HashMap<String,Object>.get } else { HashMap<String,Object>.get } }
if ( ) { IllegalArgumentException.new }
FileOutputStream.new BufferedOutputStream.new OutputStream.write OutputStream.close
for ( ; ; ) { Node.predecessor if ( ) { InterruptedException.new } }
return ( Integer.intValue )
for ( ; ; ) { Node.predecessor }
InputSource.new
while ( ) { Reference<>.get ConcurrentMap<Object,Object>.remove if ( AtomicBoolean.get ) { continue } if ( Logger.isLoggable ) { Logger.log } }
if ( ) { while ( Iterator<String>.hasNext ) { Iterator<String>.next } }
if ( ) { PrintStream.println }
ArrayList.new if ( ) { for ( ) { List<Object>.add } }
ByteArrayInputStream.new CertificateFactory.getInstance CertificateFactory.generateCertificates if ( ) { ByteArrayInputStream.new CertificateFactory.getInstance CertificateFactory.generateCertificates }
if ( ) { IllegalArgumentException.new }
if ( ) { InstantiationError.new }
StringBuilder.append for ( ; ; ) { if ( ) { StringBuilder.append } } StringBuilder.append
if ( ) { System.getenv } if ( ) { System.getProperty }
if ( Objects.equals ) { return ( ) }
if ( List<Object>.isEmpty ) { } if ( List<Object>.isEmpty ) { IllegalArgumentException.new } if ( List<Object>.size List<Object>.get ) { TreeMap.new for ( ) { File.new File.new Map<Object,File>.put } }
List<Object>.addAll
if ( ) { JScrollPane.new JScrollPane.setViewportView }
Map<Integer,Object>.remove
if ( File.exists ) { File.delete } Runnable.new
if ( ) { IllegalArgumentException.new }
return ( Float.isNaN )
if ( ) { return ( Date.getTime Date.new ) }
PrintWriter.print PrintWriter.print PrintWriter.print
Charset.defaultCharset
Point2D.getX Point2D.getY
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } InstantiationException.printStackTrace IllegalAccessException.printStackTrace HashSet<Object>.new HashSet<Object>.new HashSet<Object>.new
Date.new Date.getTime
if ( ) { return ( Collections.emptyList ) }
if ( String.equals ) { } if ( String.equals ) { } if ( ) { Long.valueOf } if ( String.equals ) { }
return ( String.new )
Properties.new System.getProperty if ( ) { String.trim File.new if ( File.exists ) { File.getAbsolutePath RuntimeException.new } if ( File.canRead ) { File.getAbsolutePath RuntimeException.new } FileInputStream.new BufferedInputStream.new Properties.load Exception.getLocalizedMessage RuntimeException.new if ( ) { InputStream.close } } Map<String,String>.entrySet Set.stream Stream.forEach return ( return ( Properties.getProperty ) return ( Properties.stringPropertyNames ) )
WrongTransactionHelper.read
ArrayList<Object>.new for ( ; ; ) { String.lastIndexOf Double.valueOf if ( ) { String.substring String.substring Double.parseDouble } ArrayList<Object>.add }
Vector.elements Vector.elementAt if ( ) { if ( ) { PrintStream.println PrintStream.println System.exit } while ( Enumeration.hasMoreElements ) { Enumeration.nextElement } }
if ( String.length String.startsWith String.endsWith String.indexOf ) { return ( ) } StringTokenizer.new ArrayList<Integer>.new while ( StringTokenizer.hasMoreTokens ) { StringTokenizer.nextToken Integer.parseInt ArrayList<Integer>.add return ( ) } return ( Collections.unmodifiableList )
Math.abs Math.abs Math.min ArrayList<Object>.new List<Object>.clear
while ( Iterator.hasNext ) { Iterator.next }
Class.getClassLoader ClassLoader.getResource if ( ) { ImageIcon.new return ( ) } Exception.printStackTrace IllegalArgumentException.new
PrintWriter.new List<String>.toArray
HashMap.new
while ( String.indexOf ) { String.substring PrintWriter.println String.substring } if ( String.length ) { PrintWriter.println PrintWriter.flush }
if ( ) { if ( ) { PrintStream.println } }
File.new return ( String.endsWith ) FilenameFilter.new File.listFiles for ( ) { File.delete }
String.toLowerCase String.startsWith
HashMap<Object,Object>.get HashMap<Object,Object>.put
if ( Map<String,Object>.containsKey ) { return ( Map<String,Object>.get ) } else { Map<String,Object>.put return ( ) }
if ( String.length ) { } while ( String.charAt ) { } while ( String.charAt Character.isDigit ) { } return ( String.charAt )
QName.getLocalPart if ( String.equals ) { return ( ) }
String[].clone
PrintStream.println if ( ) { Math.random Integer.new Integer.toString } else { PrintStream.println } String.getBytes Timer.new Timer.schedule Exception.printStackTrace
URL.new URL.openConnection HttpURLConnection.setConnectTimeout HttpURLConnection.setReadTimeout
Exception.toString
return ( String.getBytes )
ArrayList.new for ( ) { if ( ) { List<Object>.add } }
for ( ; List<>.size ; ) { List<>.get }
EventListenerList.add
if ( String.isEmpty ) { return ( ) }
PrintStream.println Class.getDeclaredField Field.setAccessible PrintStream.println Field.get for ( ; ; ) { if ( ) { PrintStream.print } PrintStream.print } PrintStream.println
while ( ) { if ( ) { if ( ) { if ( ) { IllegalArgumentException.getMessage return ( ) } } else { if ( ) { if ( ) { IllegalArgumentException.getMessage return ( ) } } } } }
HashMap.new for ( ) { Map<String,Object>.put }
Callable<String>.new if ( ) { Class.getSimpleName } else { Class.getSimpleName String.format }
for ( Class<>.getDeclaredConstructors ) { Constructor<>.getGenericParameterTypes Class<>.getModifiers if ( Class<>.isMemberClass ) { } if ( ArrayList<String>.size ) { while ( ArrayList<String>.size ) { if ( ArrayList<String>.get ) { break } } } }
if ( ) { NClob.getCharacterStream NClob.length }
ArrayList.new ArrayList<Object>.add System.gc Thread.sleep
return ( Map<String,Class<Object>>.get )
SimpleDateFormat.new SimpleDateFormat.setTimeZone return ( SimpleDateFormat.parse )
Vector.new URL.openStream ZipInputStream.new while ( ZipInputStream.getNextEntry ) { ZipEntry.getName if ( ) { Vector.addElement } } ZipInputStream.close Vector.size Vector.copyInto
if ( String.equals ) { }
return ( return ( ) Callable<Double>.new )
ClassLoader.loadClass
for ( ; BufferedImage.getHeight ; ) { for ( ; BufferedImage.getWidth ; ) { if ( BufferedImage.getRGB ) { return ( ) } } }
if ( ) { ArrayList<Object>.new }
Math.sqrt
String.replaceAll String.replaceAll String.replaceAll String.replaceAll String.replaceAll
return ( Map<String,Object>.size )
String.startsWith String.startsWith
if ( ) { ArrayList<Object>.new }
if ( ) { JMXConnectorServer.stop }
if ( ) { NullPointerException.new }
if ( ) { StringBuilder.new } StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append
return ( Integer.intValue )
return ( Iterable.iterator )
for ( ; ; ) { if ( ) { if ( ) { if ( ) { Double.parseDouble } else { if ( ) { if ( String.toLowerCase String.contains ) { } } } } } } String.replace String.replace String.replace Date.new
if ( ) { if ( ) { return ( Boolean.booleanValue ) } return ( String.equals ) }
return ( Optional.ofNullable )
if ( ) { if ( ) { return ( Boolean.booleanValue ) } return ( String.equals ) }
if ( ) { Class<Object>.getName LinkageError.new Error.printStackTrace }
if ( String.isEmpty ) { IllegalArgumentException.new }
WeakHashMap<Thread,Object>.get
JTable.getSelectedRow if ( ) { List<Object>.get }
if ( String.equals ) { }
Kernel.getKernelData Kernel.getWidth
return ( ArrayList<Object>.size ArrayList<Object>.get )
Map<String,String[]>.get
Integer.toString for ( ; ; ) { Long.toString }
if ( Set.size ) { return ( ) } System.currentTimeMillis Long.longValue if ( ) { Long.new } List.size List.get if ( Set.contains ) { } List.size if ( Set.contains ) { }
IOException.new
if ( ) { if ( ) { if ( ) { Math.round Math.round } } }
for ( ; ; ) { if ( LinkedList<Object>.get ) { return ( ) } } return ( LinkedList<Object>.size )
SynthContext.getComponent Component.getFont return ( Component.getFontMetrics FontMetrics.getHeight )
Color.getRed Color.getGreen Color.getBlue Color.RGBtoHSB return ( Color.getHSBColor )
if ( String.getFinalAltitude ) { }
if ( ) { StringBuilder.new if ( ) { StringBuilder.toString } }
if ( File.isFile ) { return ( ) } return ( JarFile.new )
if ( JScrollBar.getOrientation ) { JButton.getPreferredSize Dimension.getWidth JButton.getPreferredSize Dimension.getWidth UIManager.getInt } else { JButton.getPreferredSize Dimension.getHeight JButton.getPreferredSize Dimension.getHeight UIManager.getInt } JScrollBar.getInsets return ( Dimension.new )
return ( String.equals String.equals String.equals String.equals String.equals String.equals String.equals String.equals String.equals String.equals String.equals String.equals String.equals String.equals String.equals String.equals String.equals String.equals String.equals String.equals String.equals String.equals String.equals String.equals String.equals String.equals String.equals String.equals String.equals String.equals String.equals )
JMenu.new for ( ) { JMenu.add }
if ( ) { InputStream.read }
List<String>.size List<String>.toArray if ( ) { Hashtable<String,String>.new Hashtable<String,String>.put Hashtable<String,String>.put Hashtable<String,String>.put Hashtable<String,String>.put Hashtable<String,String>.put Hashtable<String,String>.put InitialDirContext.new }
if ( ) { Window.getBounds if ( ) { Window.pack Window.setLocationRelativeTo } }
Exception.printStackTrace
if ( ) { FileOutputStream.new }
ArrayList<String>.new if ( ) { Node.getChildNodes for ( ; NodeList.getLength ; ) { NodeList.item if ( Node.getNodeName String.equals ) { Node.getTextContent String.trim List<String>.add } } }
if ( ) { IndexOutOfBoundsException.new } System.arraycopy
if ( ) { HashSet<Object>.new while ( Iterator<Object>.hasNext ) { Iterator<Object>.next HashSet<Object>.addAll } HashSet<Object>.iterator } while ( Iterator<Object>.hasNext ) { Iterator<Object>.next } ArrayList.new List.addAll return ( Collections.unmodifiableList )
HttpURLConnection.setFollowRedirects URL.new URL.openConnection HttpURLConnection.setRequestMethod if ( ) { HttpURLConnection.setRequestProperty } HttpURLConnection.setConnectTimeout HttpURLConnection.setReadTimeout HttpURLConnection.getInputStream Charset.forName InputStreamReader.new BufferedReader.new BufferedReader.close Exception.getLocalizedMessage if ( ) { InputStream.close }
BorderLayout.new JScrollPane.new Dimension.new JScrollPane.setPreferredSize
JComboBox<String>.getSelectedIndex ArrayList<Object>.get
return ( Integer.intValue )
ArrayList.new Collection<Object>.add
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new }
if ( ) { FileNotFoundException.new } IntrospectionException.getMessage IOException.new InvocationTargetException.getMessage IOException.new IllegalAccessException.getMessage IOException.new
UnsupportedOperationException.new
return ( ClassCache.getDeclaredMethod )
return ( ArrayList<Object>.new )
Collection<Object>.size Array.newInstance Collection<Object>.toArray
if ( ) { HashMap<Object,Integer>.keySet while ( Iterator<Object>.hasNext ) { Iterator<Object>.next HashMap<Object,Integer>.get } }
if ( HashMap<String,Object>.containsKey ) { return ( HashMap<String,Object>.get ) } Class.getConstructor Constructor.newInstance HashMap<String,Object>.put
return ( File.getName )
if ( Vector.size ) { Vector.size for ( ; ; ) { Vector.elementAt } }
Math.sqrt Math.sqrt
if ( ) { Long.valueOf } Long.longValue
for ( ; ; Throwable.getCause ) { Throwable.getMessage }
if ( ) { IllegalArgumentException.new } if ( ) { Collections.emptyList }
return ( Collections.unmodifiableCollection )
if ( VariableElement.getModifiers Set.contains ) { VariableElement.getSimpleName Name.toString } if ( VariableElement.getModifiers Set.contains ) { VariableElement.getSimpleName Name.toString } if ( VariableElement.getModifiers Set.contains ) { VariableElement.getSimpleName Name.toString } if ( VariableElement.getModifiers Set.contains ) { VariableElement.getSimpleName Name.toString } if ( String.length ) { VariableElement.getSimpleName Name.toString }
String.length for ( ; ; ) { String.charAt } for ( ; ; ) { String.charAt Switch ( ) { case : if ( ) { IllegalArgumentException.new } String.charAt if ( ) { IllegalArgumentException.new } String.charAt if ( ) { String.charAt String.charAt IllegalArgumentException.new } } } return ( String.new )
if ( Future<>.isDone Future<>.isCancelled ) { Future<>.get return ( ExecutionException.getCause ) Thread.currentThread Thread.interrupt }
View.removeUpdate FlowStrategy.removeUpdate
if ( ) { Error.new } if ( ) { Error.new } if ( Object.equals ) { } if ( Object.toString Object.toString String.equalsIgnoreCase ) { }
String.split for ( ; ; ) { if ( File.new File.exists ) { break } String.replace String.replace File.new File.delete File.new File.delete String.replace String.replace File.new File.new File.renameTo String.replace File.new File.delete }
PrintStream.println FileOutputStream.new FileNotFoundException.printStackTrace
Arrays.asList
if ( ) { IllegalArgumentException.new }
return ( String.valueOf )
System.currentTimeMillis while ( System.currentTimeMillis ) { }
StringBuilder.new return ( StringBuilder.toString )
HashSet<Object>.new for ( ) { Collection<Object>.addAll }
if ( ) { return ( String.substring ) }
if ( ) { return ( List<>.size List<>.get ) } else { Iterable<>.iterator return ( ) }
return ( Integer.intValue )
UIDefaults.putDefaults UIDefaults.putDefaults BorderFactory.createEmptyBorder BorderUIResource.new UIDefaults.putDefaults UIDefaults.putDefaults BorderFactory.createEmptyBorder BorderUIResource.new BorderFactory.createEmptyBorder BorderUIResource.new UIDefaults.putDefaults InsetsUIResource.new UIDefaults.putDefaults UIDefaults.putDefaults UIDefaults.putDefaults UIDefaults.putDefaults UIDefaults.putDefaults UIDefaults.putDefaults UIDefaults.putDefaults UIDefaults.putDefaults BorderUIResource.new UIDefaults.putDefaults UIDefaults.putDefaults UIDefaults.putDefaults UIDefaults.putDefaults UIDefaults.putDefaults UIDefaults.putDefaults
ArrayList.get
return ( AtomicReference<InetSocketAddress>.get )
ArrayList.new ArrayList.new if ( ) { ArrayList.add ArrayList.add } return ( ArrayList.toArray ArrayList.toArray )
if ( ) { ArrayList<Object>.indexOf ArrayList<Object>.remove for ( ) { ArrayList<Object>.add } } AtomicLong.new
UUID.randomUUID UUID.toString if ( ) { Arrays.asList }
if ( ) { IOException.new }
for ( ; ArrayList<String>.size ; ) { ArrayList<String>.get if ( String.startsWith ) { return ( ) } }
if ( JRootPane.getWindowDecorationStyle ) { if ( ) { if ( JRootPane.getBorder JRootPane.getBorder Frame.isShowing ) { JRootPane.setBorder } if ( Frame.isResizable ) { if ( ) { Action.setEnabled Action.setEnabled } else { Action.setEnabled Action.setEnabled } } else { Action.setEnabled Action.setEnabled } } else { Action.setEnabled Action.setEnabled Action.setEnabled } Action.setEnabled }
return ( Integer.toString )
return ( Collections.unmodifiableSet )
if ( ) { Class.getName }
Integer.valueOf
return ( StringReader.new BufferedReader.new )
if ( ) { Math.max Math.max }
JMenu.removeAll for ( ; ; ) { File.new File.getName JMenuItem.new if ( ) { JMenuItem.setMnemonic } ActionListener.new JMenuItem.addActionListener JMenu.add }
Properties.new
HashSet<String>.iterator while ( Iterator<String>.hasNext ) { Iterator<String>.next HashMap<String,ArrayList<String>>.get if ( ) { PrintStream.println } else { for ( ; ArrayList<String>.size ; ) { if ( ArrayList<String>.get String.endsWith ) { break } } if ( ) { HashSet<String>.add } } }
System.getProperty Integer.getInteger System.getProperty System.getProperty Integer.getInteger Integer.intValue Thread.currentThread Thread.setName if ( ) { System.setProperty } System.getProperty Class.forName for ( ) { if ( String.startsWith ) { continue } Class.forName } Integer.getInteger Integer.intValue Integer.getInteger Integer.intValue System.getProperty if ( String.equals ) { } Thread.currentThread Thread.getName
InetAddress.getLocalHost InetAddress.getHostName
if ( ) { IllegalStateException.new }
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new }
Map<String,Object>.size AtomicInteger.new for ( Map<String,Object>.entrySet ) { Entry<String,Object>.getValue return ( ) Set<Object>.add if ( ) { Set<Object>.add } if ( AtomicInteger.addAndGet ) { } Exception.getMessage String.format Set<Object>.add if ( AtomicInteger.addAndGet ) { } Entry<String,Object>.getValue String.format Set<Object>.add if ( AtomicInteger.addAndGet ) { } }
System.nanoTime System.nanoTime
if ( Map.containsKey ) { return ( Map.get ) } Class.forName Class.newInstance Map.put
return ( String.valueOf )
ArrayList<Object>.new Switch ( ) { case : if ( ) { ArrayList<Object>.add } else { Collection<Object>.size ArrayList<Object>.new for ( ) { ArrayList<Object>.add } ArrayList<Object>.add } break case : ArrayList<Object>.add break } if ( ) { ArrayList<Object>.add } if ( ) { ArrayList<Object>.add } if ( ) { ArrayList<Object>.add }
ArrayList<Object>.new List<Object>.addAll List<Object>.addAll
for ( Map<Class<Object>,List<Object>>.values ) { List<Object>.remove }
return ( Integer.intValue )
Map<String,String>.put Map<String,String>.put Map<String,String>.put Map<String,String>.put
while ( Element.getKind ElementKind.isClass Element.getKind ElementKind.isInterface ) { Element.getEnclosingElement }
if ( ) { SocketException.new } if ( ) { IllegalArgumentException.new } DatagramSocketImpl.setTimeToLive
ArrayList<Object>.new if ( Map<String,Map<String,List<Object>>>.get ) { return ( ) } Map<String,Map<String,List<Object>>>.get if ( ) { List<Object>.addAll }
DirContext.getAttributes Attributes.getAll while ( NamingEnumeration.hasMore ) { NamingEnumeration.next if ( Attribute.size ) { Attribute.getID Attribute.getAll while ( NamingEnumeration.hasMore ) { Attribute.getID Attribute.getID NamingEnumeration.next } } else { Attribute.getID Attribute.getID Attribute.get } }
Semaphore.acquire RuntimeException.new Semaphore.release
if ( ) { Exception.new } if ( ) { Exception.new }
if ( Thread.isAlive ) { IllegalStateException.new } while ( ) { BlockingQueue<Object>.take continue } Thread.new Thread.start
if ( ) { Math.max Math.max } return ( Math.tan Math.tan Math.tan Math.tan Math.max Math.sqrt Math.atan )
Switch ( ) { case : return ( BigInteger.and ) } BigInteger.new return ( BigInteger.canonicalize )
if ( ) { NullPointerException.new } ThreadLocal<Map<Charset,CharsetEncoder>>.get Map<Charset,CharsetEncoder>.get if ( ) { CharsetEncoder.reset CharsetEncoder.onMalformedInput CharsetEncoder.onUnmappableCharacter return ( ) } Charset.newEncoder CharsetEncoder.onMalformedInput CharsetEncoder.onUnmappableCharacter Map<Charset,CharsetEncoder>.put
if ( ) { IllegalMonitorStateException.new } ReentrantLock.isHeldByCurrentThread if ( ) { if ( Thread.interrupted ) { InterruptedException.new } if ( ReentrantLock.tryLock ) { break } } if ( ReentrantLock.tryLock ) { return ( ) } if ( ) { ReentrantLock.unlock }
while ( ) { if ( String.charAt ) { } }
return ( MatteBorder.getBorderInsets )
for ( List<Object>.size ; ; ) { List<Object>.get if ( String.endsWith String.equals ) { return ( ) } }
Class.getDeclaredField Field.setAccessible return ( Field.get )
ArrayList<Handler>.new Logger.getLogger Logger.getLevel
if ( ) { if ( ) { if ( ) { IllegalArgumentException.new } } }
if ( ) { IllegalArgumentException.new }
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new }
ArrayList.new ArrayList.new for ( ) { if ( ) { if ( ) { List<Object>.add } else { List<Object>.add } } } if ( List<Object>.size ) { return ( Collections.min ) } else { if ( List<Object>.size ) { return ( Collections.max ) } }
return ( List<Object>.iterator )
for ( ) { Arrays.toString PrintStream.print Arrays.toString PrintStream.println }
HashMap<Object,Object>.get if ( ) { HashMap<Object,Object>.put ArrayList<Object>.add }
for ( Map<URI,Object>.entrySet ) { Entry<URI,Object>.getValue String.format if ( Entry<URI,Object>.getValue ) { return ( ) } }
if ( ) { IllegalArgumentException.new } ByteArrayInputStream.new Map<Object,Object>.get while ( ) { Map<Object,Object>.get } IllegalStateException.new
return ( Collections.unmodifiableList )
return ( Integer.intValue )
return ( Math.round )
if ( ) { File.new if ( ) { List<Object>.add } }
Objects.requireNonNull if ( Map<String,Object>.isEmpty ) { return ( ) } TreeSet.new Stream<Object>.forEachOrdered for ( ) { TreeSet<Object>.add } return ( TreeSet<Object>.stream )
List<Object>.size List<Object>.size Math.max
if ( ) { return ( Vector.size ) }
if ( ) { if ( ) { Throwable.printStackTrace } }
Integer.valueOf
if ( ) { String.indexOf String.length } if ( String.equals ) { return ( ) }
return ( Method.getDeclaredAnnotations )
JTabbedPane.getSelectedIndex if ( ) { JTabbedPane.setSelectedIndex }
return ( Exception.getLocalizedMessage )
File.new List<String>.add
System.currentTimeMillis Long.toString Long.toString Long.toString
Callable<Void>.new
String.new X509CertSelector.addPathToName X509CertSelector.setPathToNames String.new X509CertSelector.addPathToName X509CertSelector.getPathToNames X509CertSelector.setPathToNames X509Certificate.getIssuerX500Principal X500Principal.getName X509CertSelector.addPathToName X509CertSelector.getPathToNames
Set<Entry<Object,Object>>.iterator if ( ) { while ( Iterator<Entry<Object,Object>>.hasNext ) { Iterator<Entry<Object,Object>>.next if ( Entry<Object,Object>.getValue ) { return ( ) } } } else { while ( Iterator<Entry<Object,Object>>.hasNext ) { Iterator<Entry<Object,Object>>.next if ( Entry<Object,Object>.getValue Object.equals ) { return ( ) } } }
for ( ) { for ( ) { if ( HashSet<Object>.contains ) { Map<Object,Object>.get if ( ) { if ( Set<Object>.isEmpty ) { Set<Object>.iterator Map<Object,Object>.get if ( Map<Object,Object>.get ) { Map<Object,Object>.get } if ( Map<Object,Object>.containsKey ) { Map<Object,Object>.get } else { Map<Object,Object>.put } } } break } } }
if ( ) { IllegalArgumentException.new } if ( ) { JPopupMenu.remove }
PreparedStatement.setString PreparedStatement.setString PreparedStatement.setString PreparedStatement.setString PreparedStatement.setString PreparedStatement.setString for ( ; ; ) { PreparedStatement.setString } return ( PreparedStatement.executeQuery )
File.new StringBuilder.new if ( File.isFile ) { return ( ) } FileInputStream.new InputStreamReader.new BufferedReader.new while ( BufferedReader.readLine ) { if ( StringBuilder.toString String.equals ) { StringBuilder.append } StringBuilder.append } RuntimeException.new
String.length String.length
if ( ) { if ( ) { return ( Boolean.booleanValue ) } return ( String.equals ) }
for ( ; String.length ; ) { if ( String.charAt ) { String.length } }
System.nanoTime
ArrayList<String>.new for ( ) { if ( ) { if ( ) { List<String>.add } } }
BigDecimal.unscaledValue BigInteger.toByteArray BigDecimal.scale
if ( ) { MultiPixelPackedSampleModel.new } else { ComponentSampleModel.new }
LogRecord.new if ( ) { LogRecord.setResourceBundle LogRecord.setResourceBundleName } LogRecord.setLoggerName LogRecord.setSourceClassName LogRecord.setSourceMethodName LogRecord.setThrown
if ( ) { Class.getName Logger.getLogger Logger.warning return ( ) } Class.getName Logger.getLogger Logger.warning
String.valueOf
if ( ) { Math.sqrt }
if ( ) { if ( ) { Thread.join if ( ) { Thread.interrupt } } }
Attributes.getValue Attributes.getValue
Map<String,Object>.keySet
for ( HashMap<String,Object>.values ) { }
StringBuilder.new String.split for ( ; ; ) { if ( String.equals ) { continue } StringBuilder.append StringBuilder.append } return ( StringBuilder.toString )
ArrayList.new for ( ; List<String>.size ; ) { List<String>.get if ( String.startsWith ) { } }
if ( ) { if ( ) { List<Object>.size } }
for ( Map<Object,Object>.entrySet ) { Entry<Object,Object>.getKey Entry<Object,Object>.getValue }
if ( ) { IllegalArgumentException.new }
Logger.info List<Object>.add
if ( ) { Thread.currentThread Thread.getStackTrace }
return ( BigInteger.intValue )
if ( String.length ) { return ( ) } String.length StringBuffer.new if ( ) { String.charAt Character.toUpperCase StringBuffer.append } else { String.charAt Character.toLowerCase StringBuffer.append } String.substring StringBuffer.append return ( StringBuffer.toString )
Switch ( ) { case : System.currentTimeMillis Date.new break }
for ( ) { System.arraycopy }
return ( Method.invoke ) RuntimeException.new RuntimeException.new if ( InvocationTargetException.getTargetException ) { InvocationTargetException.getTargetException } else { RuntimeException.new }
if ( String.length ) { } Connection.prepareStatement PreparedStatement.setString PreparedStatement.execute PreparedStatement.close
System.getProperty
if ( ) { IllegalArgumentException.new }
return ( String.replace )
Map<String,Object>.put
Stack.push
System.arraycopy
return ( StringBuilder.new StringBuilder.reverse StringBuilder.toString )
Types.asMemberOf ExecutableType.getParameterTypes ExecutableType.getReturnType for ( List<Object>.size ; ; ) { List<Object>.get List<>.get List<Object>.set }
UUID.randomUUID
LinkedList<String>.new for ( ; ; ) { List<String>.add }
List<Object>.add
List<Object>.isEmpty
InputStreamReader.new for ( InputStreamReader.read ; ; InputStreamReader.read ) { } InputStreamReader.close Connection.prepareStatement for ( ; ; ) { InputStreamReader.new PreparedStatement.setCharacterStream PreparedStatement.execute InputStreamReader.close } PreparedStatement.close
if ( String.equals ) { }
if ( ) { return ( UnassignedCharacters.getDirectionality ) } if ( ) { return ( PrivateUseCharacters.getDirectionality ) }
Objects.requireNonNull
ArrayList.new
File.new if ( File.exists ) { return ( ) } File.listFiles if ( ) { File.delete return ( ) } File.getName File.new File.delete File.getName IOException.printStackTrace File.delete
if ( ) { IllegalArgumentException.new }
if ( Files.isDirectory ) { Files.newDirectoryStream for ( ) { if ( Files.isDirectory ) { Path.resolve Files.newDirectoryStream if ( DirectoryStream<Path>.iterator Iterator.hasNext ) { Path.getFileName Path.toString Path.getFileName } } } }
UnsupportedOperationException.new
if ( ) { Long.valueOf if ( ) { ByteArrayOutputStream.new return ( ByteArrayOutputStream.toByteArray ByteArrayInputStream.new ) } } else { if ( String.startsWith ) { return ( ) } }
if ( String.equals ) { }
if ( Objects.nonNull ) { }
Certificate.getEncoded
Map<String,Object>.get
if ( ) { IllegalArgumentException.new } if ( Map<Integer,Object>.isEmpty ) { TreeMap<Integer,Object>.new } Map<Integer,Object>.put
for ( Map<String,Class<Object>>.entrySet ) { Entry<String,Class<Object>>.getKey Entry<String,Class<Object>>.getValue }
Writer.close if ( ) { IOException.new }
ArrayList<Object>.new String.getBytes ByteArrayInputStream.new
if ( ) { IllegalArgumentException.new }
Collections.shuffle
Random.new
return ( Map<String,Object>.get )
for ( ; ; ) { Math.exp }
String.indexOf if ( String.length ) { String.trim Double.parseDouble } else { if ( ) { for ( ; ; ) { while ( String.charAt ) { } while ( String.charAt ) { } String.substring Double.parseDouble String.indexOf if ( ) { String.length } } } }
Switch ( KeyEvent.getID ) { }
Writer.append
return ( Map<String,Object>.containsKey )
String.format String.format String.format String.format String.format Arrays.asList
for ( List<Object>.size ; ; ) { if ( List<Object>.get ) { List<Object>.remove return ( ) } } IllegalArgumentException.new
HashMap.new
Objects.requireNonNull
return ( Integer.intValue )
if ( ) { Long.parseLong }
StringBuilder.new Integer.toString StringBuilder.append StringBuilder.append Integer.toString StringBuilder.append StringBuilder.append Integer.toString StringBuilder.append StringBuilder.toString
if ( ) { String.format String.format String.format }
ArrayList<Object>.add
for ( ; Iterator<Object>.hasNext ; ) { Iterator<Object>.next }
return ( Map<Object,String>.get )
if ( ) { while ( ) { Object.wait return ( ) } if ( ) { while ( ) { Object.wait return ( ) } } }
Date.new for ( ) { Double.compare Double.compare } PrintStream.println
Rectangle2D.getMinX Rectangle2D.getMaxX Math.min Math.max Rectangle2D.getMinY Rectangle2D.getMaxY Math.min Math.max return ( Double.new )
Map<Object,NavigableMap<Long,Object>>.putAll for ( Map<Object,Object>.entrySet ) { Entry<Object,Object>.getKey Entry<Object,Object>.getValue Map<Object,NavigableMap<Long,Object>>.put Map<Object,NavigableMap<Long,Object>>.put }
while ( ) { if ( LinkedHashMap<String,Object>.isEmpty ) { Class.getName IllegalStateException.new } if ( LinkedHashMap<String,Object>.isEmpty ) { break } LinkedHashMap<String,Object>.entrySet Entry<String,Object>.getKey Entry<String,Object>.getValue LinkedHashMap<String,Object>.remove }
String.getBytes
return ( ArrayList.size )
if ( Optional<Object>.isPresent ) { return ( ) } ArrayList<Object>.new Optional<Object>.get while ( Iterator.hasNext ) { Iterator.next if ( Set<String>.contains ) { Optional<Object>.get } else { ArrayList<Object>.add } } if ( ArrayList<Object>.isEmpty ) { }
if ( ) { Long.longValue }
if ( ) { if ( ) { Math.log } } else { if ( ) { ArrayList<Object>.new if ( List<Object>.size ) { return ( ) } List<Object>.size List<Object>.get Math.log } } if ( ) { RuntimeException.new }
if ( ) { IllegalArgumentException.new }
if ( File.exists ) { FileInputStream.new ObjectInputStream.new ObjectInputStream.readObject for ( ) { Map<String,Serializable>.get } }
return ( String.endsWith )
if ( Map<String,Object>.get ) { Map<String,Object>.put } return ( Map<String,Object>.get )
UnsupportedOperationException.new
if ( Element.hasAttribute ) { Element.getAttribute } else { if ( Element.getParentNode Node.getNodeType ) { IllegalArgumentException.new } }
System.arraycopy MessageDigest.digest MessageDigest.update return ( MessageDigest.digest )
Hashtable.new
DOMSource.new Exception.getMessage
Math.max
Statement.executeQuery
if ( ) { CopyOnWriteArrayList<StatementEventListener>.add }
if ( String.length String.equals ) { return ( ) } String.length while ( String.indexOf ) { } String.length String.length while ( String.indexOf ) { while ( ) { String.charAt } for ( ; ; ) { String.charAt } } String.length while ( ) { String.charAt } return ( String.new )
File.isFile if ( ) { SecurityException.getMessage }
Integer.toString
if ( ArrayDeque<Object>.isEmpty ) { } if ( ArrayDeque<Object>.isEmpty ) { return ( ) } while ( ArrayDeque<Object>.peek ) { }
if ( ) { NullPointerException.new } if ( ) { IllegalArgumentException.new } List<Object>.add List<Object>.size List<Object>.toArray
if ( ) { Integer.valueOf }
while ( ) { if ( String.length ) { break } } if ( ) { System.arraycopy }
FileReader.new BufferedReader.new while ( BufferedReader.readLine ) { StringTokenizer.new if ( StringTokenizer.countTokens ) { continue } StringTokenizer.nextToken String.toLowerCase String.toLowerCase Map.put }
return ( String.equals )
if ( String.isEmpty ) { }
for ( ; ; ) { StructMember.new } StructMember.new
FloatBuffer.put FloatBuffer.flip FloatBuffer.put FloatBuffer.flip FloatBuffer.get
SecureRandom.new SecureRandom.nextBytes Cipher.getInstance Cipher.init Cipher.doFinal IllegalStateException.new
if ( ) { if ( ) { NullPointerException.new } }
if ( ) { if ( ) { NullPointerException.new } }
ArrayList<Object>.new while ( Iterator<Object>.hasNext ) { Iterator<Object>.next ArrayList<Object>.add }
Class.getResource URL.toExternalForm System.exit
File.new if ( File.exists ) { FileInputStream.new } String.format FileNotFoundException.getMessage String.format IOException.getMessage String.format
StringWriter.new PrintWriter.new PrintWriter.println PrintWriter.print for ( ; ; ) { PrintWriter.print } PrintWriter.println for ( ; ; ) { PrintWriter.print for ( ; ; ) { PrintWriter.print } PrintWriter.print PrintWriter.println } PrintWriter.print for ( ; ; ) { PrintWriter.print } PrintWriter.print PrintWriter.println PrintWriter.println return ( StringWriter.toString )
if ( ) { Class.getName IllegalStateException.new } if ( String.length ) { Class.getName IllegalStateException.new } if ( String.charAt ) { } if ( String.charAt ) { String.substring if ( String.length ) { Class.getName IllegalStateException.new } } else { String.substring if ( String.length ) { Class.getName IllegalStateException.new } }
return ( String.getBytes )
HashSet.new for ( ) { if ( ) { Set<Object>.add } }
ByteArrayOutputStream.new ObjectOutputStream.new ObjectOutputStream.writeObject DatagramPacket.new DatagramSocket.send ObjectOutputStream.flush ByteArrayOutputStream.flush ObjectOutputStream.close ByteArrayOutputStream.close IOException.printStackTrace
LinkedList<Object>.new List<Object>.add List<Object>.add
if ( ) { return ( Collections.emptyList ) }
return ( Class<Object>.newInstance ) Class<Object>.getName RuntimeException.new Class<Object>.getName RuntimeException.new RuntimeException.new
if ( ) { IllegalArgumentException.new } if ( ) { String.trim } URL.getProtocol URL.getHost URL.getPort URL.getPath URL.new return ( URL.toString )
ArrayList<Object>.new for ( ) { if ( ) { Collection<Object>.add } }
ResourceBundle.getString
StringWriter.new PrintWriter.new Throwable.printStackTrace if ( ) { StringBuilder.new StringWriter.toString String.split for ( ; ; ) { if ( ) { StringBuilder.append } StringBuilder.append } } else { StringWriter.toString StringBuilder.new } return ( StringBuilder.toString )
String.format String.format
while ( ) { if ( ) { AssertionError.new } }
List<Object>.size List<Object>.get List<Object>.set List<Object>.get
HashMap<String,String>.get
FileOutputStream.getChannel FileChannel.truncate
DatagramSocketImpl.disconnect
if ( ) { IllegalArgumentException.new }
if ( ) { String.format }
FileInputStream.new BufferedInputStream.new DataInputStream.new
StringBuffer.new if ( ) { StringBuffer.append StringBuffer.append }
System.getProperty Properties.new if ( ) { FileInputStream.new Properties.load Properties.getProperty Properties.getProperty Integer.parseInt Exception.printStackTrace } System.setProperty String.format System.setProperty
return ( JAXBElement<Object>.new )
HashSet.new for ( ; ; ) { HashSet.add } for ( HashSet.iterator ; Iterator.hasNext ; ) { Integer.new Iterator.next } return ( Class.getName ) List.size List.size List.iterator for ( ; ; ) { Iterator.next }
return ( String.new )
Class.forName
Map<Object,WeakReference<Object>>.remove WeakReference<Object>.get
return ( Double.new )
if ( List<Object>.length ) { }
Map<Object,Object>.get if ( ) { Map<Object,Object>.put }
if ( Set<String>.contains ) { return ( ) }
if ( ) { IllegalArgumentException.new } Map<String,Object>.remove if ( ) { SSLSessionBindingEvent.new SSLSessionBindingListener.valueUnbound }
Collections.shuffle ArrayList.new ArrayList.addAll LinkedList.new LinkedList.addAll
while ( InputStream.skip ) { }
SortedSet<Object>.clear
Iterator<File>.next File.getName
for ( ; ; ) { for ( ; ; ) { Random.nextDouble } }
if ( ) { if ( String.equals String.equals ) { } }
String.toCharArray ClassCastException.getMessage
if ( HashMap<Object,Integer>.size ) { PrintStream.println return ( ) } ArrayList<String>.new for ( HashMap<Object,Integer>.keySet ) { ArrayList<String>.add } for ( ; ; ) { if ( ArrayList<String>.contains ) { } }
ResponseCache.getDefault
Runnable.new
Map<String,Object>.get
Arrays.asList HashSet<String>.new Arrays.asList HashSet<String>.new X509CertSelector.new X509CertSelector.setPolicy X509CertSelector.match X509CertSelector.match X509CertSelector.setPolicy X509CertSelector.match X509CertSelector.match X509CertSelector.setPolicy X509CertSelector.match X509CertSelector.match
return ( List<String[]>.get )
String.format
for ( ; String.charAt ; ) { if ( String.equals String.equals ) { if ( String.equals String.equals ) { if ( String.equals String.equals ) { if ( String.equals String.equals ) { System.exit } } } } }
List<Object>.get List<Object>.get System.currentTimeMillis
if ( ) { IllegalArgumentException.new }
String.valueOf
return ( String.substring )
return ( ExecutorService.submit )
Map<Method,Class<Object>>.keySet HashMap.new for ( ) { Method.getDeclaringClass if ( Map<Class<Object>,Set<String>>.containsKey ) { Map<Class<Object>,Set<String>>.put } Map<Method,Class<Object>>.get Method.getAnnotation Annotation.annotationType Class.getAnnotation Annotation.value Map<Class<Object>,Set<String>>.get if ( Set<String>.isEmpty ) { Set<String>.add } for ( ) { if ( ) { Method.getName List<Object>.add } else { for ( ) { Method.getName List<Object>.add } } } }
if ( ) { if ( ) { Runnable.new } }
Math.max
Long.parseLong
while ( ArrayList<Object>.isEmpty ) { ArrayList<Object>.remove }
SocketChannel.isOpen SocketChannel.close
return ( PrivilegedAction<Object>.run )
if ( ) { List<Object>.size Math.min List<Object>.subList }
DefaultMutableTreeNode.preorderEnumeration while ( Enumeration<>.hasMoreElements ) { Enumeration<>.nextElement if ( DefaultMutableTreeNode.isLeaf ) { Set<Object>.add } }
for ( ; ; ) { Double.isNaN Double.isInfinite Double.isNaN Double.isInfinite } if ( ) { for ( ; ; ) { for ( ; ; ) { Math.pow } } } else { for ( ; ; ) { for ( ; ; ) { Math.pow } } }
if ( ) { JTabbedPane.putClientProperty } JTabbedPane.putClientProperty
PreparedStatement.setString PreparedStatement.setString PreparedStatement.setString PreparedStatement.setString PreparedStatement.setString PreparedStatement.setString PreparedStatement.setLong
if ( ) { if ( ) { if ( ) { IllegalArgumentException.new } } else { IllegalArgumentException.new } }
return ( Document.getFirstChild Node.getTextContent Integer.parseInt )
JCheckBox.setVisible
if ( ) { if ( String.length ) { String.getBytes HexBinaryAdapter.new MessageDigest.digest HexBinaryAdapter.marshal } return ( ) }
if ( String.equals ) { }
String.length String.getChars
Map<String,String>.put
Map<String,Object>.put
Map<String,String>.put
return ( List<Object>.stream )
for ( ) { if ( String.equals ) { continue } }
OutputStream.write_string
if ( ) { IllegalArgumentException.new }
return ( Sync.getCount )
StringBuffer.new Vector<Object>.elements while ( Enumeration<Object>.hasMoreElements ) { Enumeration<Object>.nextElement StringBuffer.append if ( ) { if ( Vector<Object>.contains ) { StringBuffer.append } else { StringBuffer.append } } if ( Enumeration<Object>.hasMoreElements ) { if ( ) { StringBuffer.append } else { StringBuffer.append } } } return ( StringBuffer.toString )
System.arraycopy
if ( ) { Exception.new }
Graphics2D.setPaint Graphics2D.fill
while ( ) { ConcurrentHashMap<Object,AtomicLong>.get if ( ) { AtomicLong.new ConcurrentHashMap<Object,AtomicLong>.putIfAbsent } while ( ) { AtomicLong.get if ( ) { if ( AtomicLong.new ConcurrentHashMap<Object,AtomicLong>.replace ) { return ( ) } continue } if ( AtomicLong.compareAndSet ) { return ( ) } } }
Map<String,Object>.get
List<Object>.size List<Object>.get
Exception.printStackTrace Exception.getClass Class.getName Integer.toString Integer.toString Throwable.printStackTrace Throwable.getClass Class.getName Throwable.getMessage Exception.new Exception.getStackTrace StackTraceElement.toString
HashMap<String,Object>.get if ( ) { if ( ) { HashMap<String,Object>.remove } } else { HashMap<String,Object>.get if ( ) { if ( LinkedList<Object>.size ) { HashMap<String,Object>.remove } } }
if ( ) { RuntimeException.new }
return ( Double.longBitsToDouble )
String.new String.new String.new String.toCharArray String.toCharArray
if ( ) { IllegalArgumentException.new } ByteArrayInputStream.new
ParsePosition.getIndex if ( ) { ParsePosition.setIndex return ( ) } ParsePosition.getIndex Switch ( ) { case : return ( Number.doubleValue ) default : ParsePosition.setIndex ParsePosition.setErrorIndex return ( ) } if ( ) { ParsePosition.setIndex return ( ) } return ( Number.doubleValue Number.doubleValue )
if ( ) { IllegalArgumentException.new }
return ( SortedSet<Object>.comparator )
for ( HashMap<Integer,Object>.values ) { }
if ( ) { IllegalArgumentException.new } IllegalStateException.new
Long.reverseBytes
if ( String.trim String.length ) { return ( ) } Map<String,X509CRL>.get if ( X509CRL.getNextUpdate Date.new Date.before ) { Map<String,X509CRL>.remove } if ( ) { URL.new URL.openConnection URLConnection.setConnectTimeout URLConnection.getInputStream CertificateFactory.generateCRL InputStream.close Map<String,X509CRL>.put }
return ( String.equals String.equals )
return ( FileSystem.compare )
HashMap<String,Object>.new
CharSequence.subSequence CharSequence.toString if ( Properties.containsKey ) { return ( Properties.getProperty ) } return ( CharSequence.subSequence )
StringBuilder.new for ( ; ; ) { if ( ) { StringBuilder.append } Integer.toString String.toUpperCase StringBuilder.append } return ( StringBuilder.toString )
Function<,>.apply
Method.getName if ( Method.getDeclaringClass ) { if ( String.equals ) { return ( Boolean.new ) } else { if ( String.equals ) { if ( String.equals ) { return ( Integer.new ) } } } } else { if ( String.equals Method.getParameterTypes ) { return ( ) } }
LinkedList.new List<String>.add if ( ) { List<String>.add List<String>.add } if ( ) { List<String>.add List<String>.add } if ( ) { List<String>.add File.getAbsoluteFile File.toString List<String>.add } if ( ) { List<String>.add File.getAbsolutePath List<String>.add } if ( ) { List<String>.add File.getAbsolutePath List<String>.add }
HashMap.put PrintStream.println
while ( ) { Thread.sleep } if ( ) { Exception.printStackTrace } if ( ) { Exception.printStackTrace } if ( ) { Exception.printStackTrace } while ( ) { Thread.sleep }
return ( ArrayList.new )
if ( ) { Writer.write return ( ) } while ( ) { String.getChars }
List<Object>.add Collections.sort
for ( ; List<Object>.size ; ) { if ( List<Object>.get ) { return ( ) } }
if ( ) { IOException.new } if ( String.indexOf ) { File.getName PrintStream.println PrintStream.println }
if ( ) { String.format }
HashMap.get if ( ) { HashMap.put }
List<Class<Object>>.addAll
SOAPConnectionFactory.newInstance SOAPConnectionFactory.createConnection
UnsupportedOperationException.new
if ( Set<String>.isEmpty ) { return ( ) }
String.equals Map<Object,Object>.put
SSLContext.getInstance if ( SSLContext.getProvider Provider.getName String.equals System.getProperty System.getProperty ) { System.getProperty System.getProperty KeyStore.getInstance FileInputStream.new String.toCharArray KeyStore.load KeyManagerFactory.getInstance String.toCharArray KeyManagerFactory.init KeyManagerFactory.getKeyManagers SSLContext.init } else { SSLContext.init } return ( SSLContext.getSocketFactory )
if ( ) { IllegalArgumentException.new }
return ( Collections.unmodifiableList )
if ( ) { IllegalArgumentException.new }
if ( ) { if ( ) { ClassNotFoundException.new } } Class.getPackage Package.getName Class.forName Class<>.newInstance
return ( ZipEntry.getSize )
if ( ) { IllegalArgumentException.getMessage }
PrintStream.println
ConcurrentHashMap<String,InetAddress[]>.new
if ( ) { IllegalArgumentException.new } if ( ) { DOMImplementation.createDocumentType } return ( DOMImplementation.createDocument )
JTabbedPane.getTabCount
List<Object>.add
if ( String.compareTo ) { } for ( ) { Integer.parseInt Integer.parseInt }
List<Object>.add
return ( String.trim Long.parseLong )
if ( String.matches ) { IllegalArgumentException.new }
ImageIcon.new JButton.new String.valueOf JButton.setActionCommand JButton.setToolTipText ActionEvent.getActionCommand Integer.parseInt ActionListener.new JButton.addActionListener ImageIcon.new JButton.new String.valueOf JButton.setActionCommand JButton.setToolTipText ActionEvent.getActionCommand Integer.parseInt ActionListener.new JButton.addActionListener ImageIcon.new JButton.new String.valueOf JButton.setActionCommand JButton.setToolTipText ActionEvent.getActionCommand Integer.parseInt ActionListener.new JButton.addActionListener ImageIcon.new JButton.new String.valueOf JButton.setActionCommand JButton.setToolTipText ActionEvent.getActionCommand Integer.parseInt ActionListener.new JButton.addActionListener
DatabaseMetaData.getColumnPrivileges
Map.values Collection.iterator while ( Iterator.hasNext ) { Iterator.next }
ArrayList.new Map<String,Object>.get List<Object>.addAll
PrintStream.printf
String.replace String.replace String.replace
HashMap<Object,Object>.get if ( ) { HashMap<Object,Object>.put }
List.remove
if ( ) { IllegalArgumentException.new }
if ( ) { if ( ) { List.size } }
Boolean.toString
for ( ) { if ( HashSet<String>.remove ) { } } if ( HashSet<String>.isEmpty ) { }
OutputStreamWriter.new Writer.write
if ( ) { AssertionError.new }
Math.exp Math.exp
if ( ) { String.valueOf } else { if ( ) { String.valueOf } else { IllegalArgumentException.new } }
return ( String.replace )
System.arraycopy
return ( Random.nextInt )
if ( ) { IllegalArgumentException.new }
return ( Class.cast )
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new }
return ( Set<InetAddress>.contains )
Switch ( ) { default : System.exit }
if ( ) { Object.getClass IllegalArgumentException.new }
Switch ( ) { default : IllegalArgumentException.new }
Collection<Object>.size
Component.setBounds
if ( ) { IllegalArgumentException.new } Color.getRGB Color.getRed Color.getGreen Color.getBlue
if ( ) { URI.create URI.create } System.currentTimeMillis
return ( System.currentTimeMillis )
Class.newInstance
if ( ) { for ( ) { if ( ) { List<Object>.add } } IllegalArgumentException.new }
Graphics.setColor Graphics.fillRect Graphics.setColor Graphics.fillRect Graphics.setColor JScrollBar.getWidth JScrollBar.getHeight Graphics.fillRect Graphics.setColor Graphics.drawLine Graphics.drawLine
if ( ) { NullPointerException.new }
Objects.requireNonNull
if ( String.isEmpty ) { }
while ( Iterator<AudioFileReader>.hasNext ) { Iterator<AudioFileReader>.next return ( AudioFileReader.getAudioInputStream ) } UnsupportedAudioFileException.new
Exception.getMessage String.indexOf if ( String.length ) { return ( String.substring ) }
KeyStore.getInstance KeyStore.load CertificateFactory.getInstance ByteArrayInputStream.new CertificateFactory.generateCertificate KeyFactory.getInstance if ( String.isEmpty ) { EncryptedPrivateKeyInfo.new String.toCharArray PBEKeySpec.new EncryptedPrivateKeyInfo.getAlgName SecretKeyFactory.getInstance SecretKeyFactory.generateSecret EncryptedPrivateKeyInfo.getKeySpec } else { PKCS8EncodedKeySpec.new } KeyFactory.generatePrivate String.toCharArray KeyStore.setKeyEntry FileOutputStream.new String.toCharArray KeyStore.store Exception.getMessage PrintStream.println Exception.printStackTrace
while ( ) { RuntimeException.getMessage }
Comparator<Object>.new Collections.sort
if ( ) { NullPointerException.new }
String.toCharArray if ( ) { String.format IllegalArgumentException.new }
if ( ) { IllegalArgumentException.new }
if ( ) { Properties.getProperty } Logger.fine
if ( ) { NullPointerException.new } if ( ) { NullPointerException.new }
Long.valueOf Collections.sort
StringBuffer.length if ( ) { SAXException.new StringBuffer.getChars } StringBuffer.setLength
for ( ) { if ( ) { Map<String,Object>.get Map<String,Object>.get } }
return ( BigInteger.valueOf BigInteger.toByteArray )
String.indexOf return ( String.substring )
Vector.new
List<Object>.add
Document.setNodeValue
if ( ) { IllegalArgumentException.new }
PrintStream.println if ( ) { PrintStream.println PrintStream.println PrintStream.println PrintStream.println PrintStream.println PrintStream.println PrintStream.println PrintStream.println PrintStream.println PrintStream.println PrintStream.println if ( ) { PrintStream.println PrintStream.println PrintStream.println } } else { PrintStream.println } System.exit
Connection.commit Connection.createStatement Statement.executeQuery ResultSet.getMetaData ResultSetMetaData.getColumnCount HashMap.new for ( ; ; ) { ResultSetMetaData.getColumnName Map<Integer,String>.put } if ( ResultSet.next ) { for ( ; ; ) { Map<Integer,String>.get if ( ) { ResultSet.getString } } } Logger.log
return ( Map<Integer,Object>.get )
SecurityException.new
if ( ) { InvalidNameException.new } else { if ( ) { if ( ) { System.arraycopy System.arraycopy } } }
ActionListener.new Timer.new Timer.setRepeats
StringBuilder.new for ( ) { StringBuilder.append StringBuilder.append } return ( StringBuilder.toString )
return ( ResultSet.getFloat )
Calendar.set Calendar.getTimeInMillis
Map<String,Integer>.size if ( String.equalsIgnoreCase ) { if ( String.equalsIgnoreCase ) { } } if ( ) { if ( String.equalsIgnoreCase ) { if ( String.equalsIgnoreCase ) { } } }
return ( Stream<Object>.filter )
if ( ) { return ( Collections.emptyList ) } else { ArrayList<Object>.new for ( ) { if ( ) { List<Object>.add } } return ( ) }
Thread.currentThread Thread.getStackTrace StringBuffer.new for ( ; ; ) { StringBuffer.append StringBuffer.append StringBuffer.append } return ( StringBuffer.toString )
PreparedStatement.setInt PreparedStatement.setInt PreparedStatement.setInt PreparedStatement.executeQuery if ( ResultSet.next ) { ResultSet.getBigDecimal if ( BigDecimal.signum ) { ResultSet.getBigDecimal } }
ArrayList<Object>.size for ( ; ; ) { if ( ArrayList<Object>.get ArrayList<Object>.get ) { ArrayList<Object>.get } }
StringBuilder.new for ( ) { if ( StringBuilder.length ) { StringBuilder.append } if ( String.indexOf ) { StringBuilder.append } } StringBuilder.toString Properties.put
if ( ) { IllegalArgumentException.new } if ( ) { ArrayIndexOutOfBoundsException.new } Math.min System.arraycopy
LinkedList.new DefaultMutableTreeNode.depthFirstEnumeration while ( Enumeration<DefaultMutableTreeNode>.hasMoreElements ) { Enumeration<DefaultMutableTreeNode>.nextElement if ( DefaultMutableTreeNode.getUserObject ) { DefaultMutableTreeNode.getUserObject if ( ) { DefaultMutableTreeNode.getUserObject List<Object>.add } } }
HashMap<String,String>.new QName.new while ( Iterator<>.hasNext ) { Iterator<>.next QName.new Map<String,String>.put }
ArrayList<Object>.get
String.format
MBeanConstructorInfo.getSignature for ( ; ; ) { if ( MBeanParameterInfo.equals ) { return ( ) } }
do { if ( ) { Math.abs } if ( Math.abs Math.abs ) { } if ( Math.abs Math.abs ) { } } while ( ) ;
ThreadLocal<Compiler>.get Compiler.setFlags Compiler.compile Compiler.cleanup
Locale.new Locale.getLanguage Date.new Date.new List<Object>.size Callable<Void>.new
LinkedList.new while ( Iterator.hasNext ) { Iterator.next if ( ) { LinkedList.add } } return ( LinkedList.listIterator )
return ( List<Object>.size )
return ( String.new String.new Integer.new Integer.new Double.new Float.new String.new Integer.new Short.new Long.new Byte.new )
HashMap<String,ArrayList<Object>>.new PrintStream.println for ( ) { if ( String.startsWith ) { String.replace } if ( String.startsWith ) { String.substring } if ( HashMap<String,ArrayList<Object>>.containsKey ) { ArrayList<Object>.new HashMap<String,ArrayList<Object>>.put } HashMap<String,ArrayList<Object>>.get ArrayList<Object>.add } for ( HashMap<String,ArrayList<Object>>.entrySet ) { Entry<String,ArrayList<Object>>.getKey for ( Entry<String,ArrayList<Object>>.getValue ) { } }
return ( TableModel.getRowCount )
if ( ) { NullPointerException.new }
Arrays.equals
TimeUnit.toNanos
return ( String.new ) return ( String.new )
if ( ) { Selector.close }
if ( ) { for ( ) { if ( ) { String.valueOf } } }
HashMap<Object,Integer>.new
HashMap<String,Object>.new
Charset.forName
System.getProperty System.currentTimeMillis System.currentTimeMillis PrintStream.println for ( ) { PrintStream.println }
Map<Object,Object>.put
Map<Integer,Object>.put
return ( HashMap<String,String>.new )
String.format UnsupportedOperationException.new
Integer.new Exception.toString Exception.toString
Integer.parseInt StringBuffer.new StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append return ( StringBuffer.toString )
Arrays.asList
JTextField.getText File.new
return ( Arrays.asList )
return ( Integer.intValue )
if ( String.equals String.equals ) { } if ( ) { MalformedURLException.new } MalformedURLException.new
String.format
Reader.mark do { if ( ) { Reader.reset return ( ) } } while ( ) ; RuntimeException.new
IllegalStateException.new
HashMap<Integer,Object>.new Map<Integer,Object>.put Map<Integer,Object>.put Map<Integer,Object>.put Map<Integer,Object>.put
Pattern.split for ( ; ; ) { ArrayList<Object>.add }
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } if ( ) { if ( ) { HashMap.new } }
System.currentTimeMillis System.identityHashCode
return ( Math.ceil )
HashMap.new
return ( Class.getName )
if ( Collection<Object>.size ) { IllegalArgumentException.new } ByteArrayOutputStream.new ByteArrayOutputStream.flush ByteArrayOutputStream.toString String.length Writer.write ByteArrayOutputStream.close
Map<CharSequence,Object>.put
Math.min
Long.valueOf String.substring String.toUpperCase String.substring if ( ) { String.substring String.toUpperCase String.substring } if ( String.contains ) { } if ( String.equals ) { } String.charAt String.toUpperCase String.charAt String.toUpperCase Math.round if ( ) { String.toUpperCase } if ( String.equals ) { Math.round }
for ( Map<Object,Object>.entrySet ) { }
return ( HashMap<Object,Object>.new )
List<Object>.add
BufferedOutputStream.new while ( ) { BufferedOutputStream.write } if ( ) { BufferedOutputStream.close }
Hashtable<String,AtomicInteger>.get if ( ) { AtomicInteger.intValue }
return ( StringBuilder.new StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.toString )
if ( ) { ArrayList<Object>.new }
Switch ( ) { default : PrintStream.println break }
if ( ) { Integer.valueOf }
if ( ) { if ( ) { if ( Double.isNaN ) { return ( ) } AtomicBoolean.set } } AtomicBoolean.set
if ( ) { List<Object>.add }
UnsupportedOperationException.new
Runtime.getRuntime Runtime.exec Thread.sleep Process.destroy
JPanel.new GridBagLayout.new JPanel.setLayout GridBagConstraints.new JButton.new Insets.new JPanel.add GridLayout.new JPanel.new JPanel.add JPanel.add Insets.new JPanel.add BorderFactory.createMatteBorder JPanel.setBorder
if ( ) { IllegalArgumentException.new } Vector.addElement
if ( ) { IOException.new }
if ( ) { for ( ; ArrayList<Object>.size ; ) { ArrayList<Object>.get } }
ObjectOutputStream.write ObjectOutputStream.close ByteArrayOutputStream.toByteArray ByteArrayInputStream.new ObjectInputStream.new ObjectInputStream.read ObjectInputStream.close
Long.new
String[].clone
if ( ) { if ( X509CRL.getIssuerX500Principal X509CRL.getIssuerX500Principal X500Principal.equals ) { } }
String.trim
Pattern.matcher Matcher.matches Matcher.group Boolean.parseBoolean Map<String,Set<Connection>>.get if ( ) { HashSet.new Map<String,Set<Connection>>.put } Set<Connection>.add
Map<String,Object>.get return ( Collections.emptyList )
return ( ArrayList<Character>.get )
AddressCacheEntry.new BasicLruCache.put
ExecutionException.getCause
if ( ) { Integer.toString } if ( ) { Switch ( ) { case : Timestamp.toString if ( String.length ) { String.substring } break case : Timestamp.getTime Time.new Time.toString break case : Timestamp.getTime Date.new Date.toString break } }
File.new List<String>.add Arrays.asList
Integer.intValue Properties.new Properties.setProperty Properties.setProperty Properties.setProperty Properties.setProperty Properties.setProperty Properties.setProperty Properties.setProperty Properties.setProperty Properties.setProperty Properties.setProperty Properties.setProperty
HashSet.new for ( ) { Set<Object>.add }
if ( ) { String.format NoSuchElementException.new }
return ( Integer.intValue )
if ( ) { for ( ; ; ) { if ( ) { RuntimeException.new } if ( ) { RuntimeException.new } } } else { for ( ; ; ) { if ( ) { RuntimeException.new } if ( ) { RuntimeException.new } } }
if ( ) { Runnable.new InterruptedException.printStackTrace }
ArrayList<Object>.new HashMap<Object,Object>.new
StringBuilder.new if ( ) { StringBuilder.append StringBuilder.append StringBuilder.append } StringBuilder.append StringBuilder.toString StringBuilder.append
BigInteger.new if ( ) { if ( BigInteger.bitLength ) { return ( BigInteger.longValue ) } BigInteger.bitLength }
if ( ) { if ( ) { Math.max } else { Math.min } return ( ) }
if ( String.equals ) { }
if ( Set<X509Certificate>.contains ) { return ( ) } Set<X509Certificate>.add if ( ) { String.toCharArray KeyStore.setKeyEntry } else { KeyStore.setCertificateEntry } FileOutputStream.new String.toCharArray KeyStore.store Throwable.getMessage
return ( Object.getClass )
return ( String.length String.length String.substring )
if ( String.endsWith ) { return ( String.length String.substring ) } if ( String.endsWith String.endsWith ) { return ( String.length String.substring ) }
if ( ) { IllegalArgumentException.new }
Exception.new
return ( Map<Object,Set<Object>>.keySet )
AtomicReference<Object>.get HashMap<Object,ArrayList<Object>>.get
if ( ) { UnsupportedOperationException.new }
if ( ) { JButton.new }
return ( Class.getName )
Document.createElementNS Element.setPrefix
return ( ArrayList.new )
if ( String.equalsIgnoreCase String.equalsIgnoreCase ) { }
return ( HashMap<String,Object>.get )
if ( List<Object>.size ) { return ( ) } List<Object>.get
return ( String.trim )
return ( Executor.execute Executor.new )
if ( ) { IllegalArgumentException.new }
if ( ) { if ( String.equals ) { if ( String.equals ) { Exception.new } } } if ( ) { Exception.new }
Collections.sort for ( ArrayList<Integer>.size ; ; ) { ArrayList<Integer>.get if ( ) { IllegalStateException.new } }
return ( ByteArrayOutputStream.new )
if ( Double.isNaN ) { return ( ) } if ( Double.isNaN ) { return ( ) } Random.nextInt
ArrayList<Object>.new for ( ) { if ( ) { List<Object>.add } } List<Object>.size List<Object>.toArray if ( Logger.isLoggable ) { Logger.fine }
X509Certificate.getNotBefore if ( ) { if ( ) { X509Certificate.getSerialNumber Logger.fine } return ( Date.new ) }
Runtime.getRuntime Runtime.removeShutdownHook
while ( ) { if ( ) { if ( ) { IllegalStateException.new } } }
String.lastIndexOf if ( ) { return ( String.substring ) }
if ( ) { return ( Class<>.isArray Class<>.getComponentType ) } else { if ( ) { return ( ParameterizedType.getOwnerType ParameterizedType.getRawType ParameterizedType.getActualTypeArguments ) } else { if ( ) { return ( GenericArrayType.getGenericComponentType ) } else { if ( ) { return ( WildcardType.getUpperBounds WildcardType.getLowerBounds ) } } } }
System.currentTimeMillis
for ( ) { Object.hashCode }
return ( LinkedList.new )
if ( Object.equals String.equalsIgnoreCase ) { if ( Object.equals String.equalsIgnoreCase ) { return ( ) } }
if ( ) { return ( Collections.emptyList ) } return ( ArrayList.new )
if ( String.startsWith String.endsWith ) { return ( ) }
File.getPath FileInputStream.new
Any.extract_Streamable BAD_OPERATION.new BAD_OPERATION.initCause
if ( ) { for ( ) { if ( ) { List<Object<Object>Object>.add } } }
Map<String,Integer>.get
if ( Map.get ) { Map.put if ( String.equals ) { if ( String.equals ) { } } }
return ( UUID.toString String.format )
return ( Collector.of )
String.valueOf
if ( ) { ArrayList.new } List<Object>.add
return ( Vector.new )
Collection<Object>.size HashMap<Object,Object<Object>>.new
Collections.emptyList
List<>.size List<>.get List<>.get List<>.get
if ( ) { if ( ) { return ( Boolean.booleanValue ) } return ( String.equals ) }
Switch ( ) { case : PrintStream.println }
ProcessBuilder.new ProcessBuilder.redirectErrorStream ProcessBuilder.start Process.getInputStream Scanner.new Scanner.useDelimiter ArrayList.new while ( Scanner.hasNext ) { Scanner.next List<String>.add } Process.waitFor Process.exitValue if ( ) { String.format IllegalArgumentException.new }
Runnable.new
for ( ; Vector.size ; ) { Vector.get if ( ) { Vector.removeElementAt return ( ) } }
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } UnsupportedOperationException.new
Integer.parseInt if ( ) { JOptionPane.showMessageDialog }
BufferedImage.createGraphics Graphics2D.setComposite Graphics2D.setColor Graphics2D.fillRect Graphics2D.dispose
if ( ) { return ( Character.charValue Character.new ) } return ( Character.new )
if ( ) { Logger.log return ( ) } Logger.log
if ( ) { URLDecoder.decode if ( String.equals ) { return ( ) } }
if ( Class<>.getTypeParameters ) { Set<Object>.add }
for ( ; ; ) { if ( ) { Exception.new } }
if ( ) { return ( Vector<Object>.size ) } else { if ( ) { return ( Vector<Object>.size ) } }
if ( ) { return ( Collections.emptyList ) } return ( ConcurrentMap<String,List<Object>>.keySet )
String.new String.getBytes
if ( ) { if ( ) { IllegalStateException.new } return ( ) }
if ( ) { Integer.valueOf }
String[].clone
if ( ) { IllegalArgumentException.new } Switch ( ) { case : AssertionError.new case : AssertionError.new default : AssertionError.new } Switch ( ) { default : AssertionError.new }
if ( ) { IllegalStateException.new } if ( ) { IllegalStateException.new }
HashSet.new for ( ; ; ) { HashSet.add } for ( HashSet.iterator ; Iterator.hasNext ; ) { Integer.new Iterator.next } for ( HashSet.iterator ; Iterator.hasNext ; ) { Iterator.next Collections.singleton List.size List.iterator Iterator.next HashSet.new List.size List.iterator Iterator.next List.size Set.iterator Iterator.next List.iterator Iterator.next }
return ( return ( Iterator<Object>.hasNext ) return ( Iterator<Object>.next ) )
for ( ; ; ) { HashMap.get }
for ( ; ; ) { Entry<Object,Object>.getKey Entry<Object,Object>.getValue } for ( ) { Entry<Object,Object>.getKey Entry<Object,Object>.getValue }
for ( ) { for ( ) { if ( String.equals ) { break } } } String.equals if ( ) { IllegalStateException.new }
if ( ) { Error.new }
return ( Map<String,Object>.remove )
Executors.newSingleThreadScheduledExecutor File.getAbsolutePath File.new if ( File.exists ) { ScheduledExecutorService.shutdown } Runnable.new ScheduledExecutorService.scheduleAtFixedRate
Pattern.compile Pattern.compile
IOException.new
System.currentTimeMillis
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } ArrayList<Object>.new if ( ) { IOException.new }
for ( ) { List<String>.add }
ArrayList<String>.new File.getAbsolutePath List<String>.add if ( ) { List<String>.add } List<String>.add File.new File.getAbsolutePath List<String>.add File.new File.getAbsolutePath List<String>.add ProcessBuilder.new ProcessBuilder.start Process.waitFor IOException.new if ( ) { Process.getErrorStream if ( InputStream.available ) { InputStream.available InputStream.read String.new IOException.new } }
if ( ) { if ( ) { IllegalArgumentException.new } }
List<Object>.add
String.startsWith
List.clear List.size List.add List.add List.add List.add List.clear List.size
return ( ClasspathFontPeer.getStyle )
Arrays.sort
if ( ) { while ( ListIterator<Object>.hasPrevious ) { ListIterator<Object>.previous } } else { while ( ListIterator<Object>.hasNext ) { ListIterator<Object>.next } }
Properties.getProperty
HashMap<String,Object>.new Map<String,Object>.put
if ( ) { Integer.valueOf }
if ( ) { NullPointerException.new }
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } if ( ) { IllegalStateException.new }
return ( Collection<Object>.size )
String.split if ( ) { RuntimeException.new }
TimeUnit.toNanos
BigInteger.toByteArray System.arraycopy
if ( ) { if ( String.equals ) { } } if ( List<String>.isEmpty ) { } List<String>.remove for ( ) { if ( String.endsWith String.endsWith ) { List<String>.add } } if ( List<String>.isEmpty ) { }
SecureRandom.new Random.nextBytes
System.nanoTime if ( ) { LinkedBlockingQueue<Object>.poll } else { LinkedBlockingQueue<Object>.take } Thread.currentThread Thread.interrupt
WeakReference<Object>.new
if ( String.equals ) { }
if ( String.equals ) { return ( ) }
TreeSet.new for ( ) { if ( Map<String,Double>.containsKey ) { Map<String,Double>.get Math.abs } else { Math.abs Collection<String>.iterator while ( Iterator<String>.hasNext ) { Iterator<String>.next if ( Map<String,Double>.containsKey ) { Map<String,Double>.get Math.abs } } if ( ) { Map<String,Double>.put } } SortedSet<Object>.add }
EnumSet.of EnumSet.of EnumSet.of EnumSet.of String.getBytes String.getBytes Arrays.asList Arrays.asList
IntStream.range IntStream.range for ( ; ; ) { Math.min Math.max for ( ; ; ) { Math.min Math.max Math.min Math.max } } if ( ) { IllegalStateException.new }
if ( ) { return ( Object.toString ) } else { Object.getClass Class.getName IllegalArgumentException.new }
Arrays.sort Arrays.sort for ( ; ; ) { Double.new } Arrays.asList Arrays.equals Arrays.sort for ( ; ; ) { Double.new } Arrays.asList Arrays.equals
if ( ) { IllegalArgumentException.new } ThreadLocal<Stack<Object>>.get if ( ) { Stack<Object>.new ThreadLocal<Stack<Object>>.set } Stack<Object>.add
Exception.getMessage
return ( Dimension.new )
JAXBContext.newInstance JAXBContext.createUnmarshaller FileReader.new Unmarshaller.unmarshal FileReader.close for ( ) { if ( ) { NullPointerException.new NullPointerException.printStackTrace continue } PrintStream.println } Exception.printStackTrace
return ( EnumMap<Object,Object>.get )
if ( ) { Class.forName Class.getDeclaredField Field.setAccessible Field.get Object.getClass Class.getName Class.forName Class.getDeclaredMethod Method.setAccessible Method.invoke }
if ( String.length String.length ) { return ( ) }
if ( List<Object>.isEmpty ) { return ( Collections.emptyList ) } List<Object>.get Map<Object,BiFunction<Object,Object,Object>>.get return ( List<Object>.stream Collectors.toList )
if ( List<Object>.isEmpty ) { List<Object>.get List<Object>.size List<Object>.get }
if ( ) { if ( ) { Math.max } } if ( ) { if ( ) { Math.min } }
Date.new Date.getTime
Statement.executeQuery ResultSet.next ResultSet.getInt ResultSet.deleteRow ResultSet.next ResultSet.updateLong ResultSet.updateRow ResultSet.close Statement.executeQuery Statement.close
GridBagLayout.new GridBagConstraints.new Font.new JProgressBar.new GridBagLayout.setConstraints JProgressBar.setVisible JPanel.new GridBagLayout.setConstraints GridBagLayout.new GridBagConstraints.new JPanel.setLayout JLabel.new Insets.new GridBagLayout.setConstraints JPanel.add JLabel.new GridBagLayout.setConstraints JPanel.add GridBagLayout.setConstraints
return ( Map<String,Object>.get )
URL.new URL.openConnection return ( URLConnection.getInputStream )
Logger.info
AtomicLong.get AtomicLong.get
Class.getDeclaredField Field.setAccessible Class.getDeclaredField Field.setAccessible Field.get Field.set Exception.printStackTrace
LinkedList.addLast LinkedList.addLast LinkedList.addLast LinkedList.addLast LinkedList.addLast LinkedList.addLast
if ( CharBuffer.remaining ) { return ( ) } while ( ) { CharBuffer.get }
Integer.valueOf
if ( Map<Integer,Object>.containsKey Map<Integer,Object>.get Map<Integer,Object>.get ) { return ( ) }
if ( ) { Integer.valueOf }
if ( ) { String.valueOf IllegalStateException.new }
if ( ) { String.concat } for ( ; ; ) { System.arraycopy System.arraycopy } String.new if ( ) { String.concat } if ( ) { IOException.getMessage } Runnable.new
Integer.valueOf
AtomicInteger.incrementAndGet Map<Integer,Object>.put Map<Integer,Object>.remove
AffineTransform.new AffineTransform.translate Image.getWidth Image.getHeight AffineTransform.scale
PrintStream.println PrintStream.println Exception.printStackTrace
if ( ) { if ( ) { ArrayList<Object>.new } ArrayList<Object>.add }
return ( Double.new )
System.getProperty ParserFactory.makeParser SAXException.new SAXException.new SAXException.new SAXException.new SAXException.new
StrictMath.toRadians StrictMath.toRadians StrictMath.sin StrictMath.cos StrictMath.sin StrictMath.cos
if ( Document.getLength ) { return ( ) } Document.getText String.charAt if ( ) { Document.getText for ( ; ; ) { String.charAt } } else { Document.getLength Document.getText for ( ; ; ) { String.charAt } }
ArrayList.new for ( ) { List<Object>.add } if ( List<Object>.size ) { List<Object>.add }
StringBuilder.new Random.new for ( ; ; ) { Random.nextInt StringBuilder.append } return ( StringBuilder.toString )
if ( ) { PrintStream.println }
if ( ) { return ( MessageDigest.getInstance String.getBytes MessageDigest.digest ) } if ( String.endsWith ) { } String.replace String.indexOf if ( ) { String.length String.substring } String.indexOf if ( ) { String.substring }
if ( Class.equals ) { return ( ) } if ( ) { if ( ) { for ( ; Iterator<Object>.hasNext ; ) { Iterator<Object>.next for ( List<Object>.iterator ; Iterator<Object>.hasNext ; ) { Iterator<Object>.next } } return ( ) } }
HashSet<String>.new Set<String>.add Set<String>.add BasicAttributes.new BasicAttribute.new Attribute.add Attributes.put HashSet<Object>.new Set<Object>.add File.new Set<Object>.add Class.getResourceAsStream if ( ) { IOException.new }
FileInputStream.new InputSource.new File.getAbsolutePath InputSource.setSystemId XMLReader.parse
System.arraycopy
if ( ) { IllegalArgumentException.new } Locale.getDefault
FileOutputStream.new ObjectOutputStream.new ObjectOutputStream.writeObject ObjectOutputStream.close FileOutputStream.close
if ( ) { CubicCurve2D.setCurve } if ( ) { CubicCurve2D.setCurve }
TimeZone.getOffset return ( Time.new )
if ( URI.toString ) { URI.toString } Exception.getMessage
ArrayList.new
Random.new Random.setSeed List<Object>.size for ( ; ; ) { Random.nextInt List<Object>.get List<Object>.get List<Object>.set List<Object>.set List<Integer>.get List<Integer>.get List<Integer>.set List<Integer>.set List<Integer>.get List<Integer>.get List<Integer>.set List<Integer>.set List<Object>.get List<Object>.get List<Object>.set List<Object>.set }
LinkedBlockingDeque.new for ( ; ; ) { LinkedBlockingDeque.put } LinkedBlockingDeque.put Thread.new Thread.start Thread.sleep LinkedBlockingDeque.remainingCapacity LinkedBlockingDeque.take Thread.sleep Thread.interrupt Thread.join LinkedBlockingDeque.remainingCapacity
return ( Math.round Math.round Math.round Math.round )
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new }
Integer.valueOf
ThreadLocal<Object>.get return ( Integer.toString )
if ( ) { while ( Iterator<Object>.hasNext ) { Iterator<Object>.next } }
ArrayList<Object>.new List<Object>.add
IOException.getMessage
Date.new Logger.log if ( ) { IllegalArgumentException.new } File.new File.getAbsoluteFile Arrays.copyOfRange Logger.info Logger.log
Object.getClass return ( Class.getSuperclass )
if ( ) { IllegalStateException.new }
UnsupportedOperationException.new
String.indexOf if ( ) { String.substring Long.parseLong if ( System.currentTimeMillis ) { return ( ) } } return ( String.substring )
if ( String.equals ) { return ( ) }
if ( ) { IllegalStateException.new }
if ( ) { ForkJoinTask<>.cancel }
Map<String,Set<String>>.get return ( Set<String>.contains )
if ( ArrayList<File>.get File.isDirectory ) { System.exit } ArrayList<File>.get File.listFiles Arrays.asList ArrayList.new
if ( ) { PrintStream.println for ( ) { PrintStream.println } PrintStream.println PrintStream.println PrintStream.println PrintStream.println PrintStream.println PrintStream.println } else { PrintStream.println }
if ( ) { IllegalArgumentException.new }
if ( ) { String.charAt String.substring String.toLowerCase }
ArrayList<GarbageCollectorMXBean>.new for ( ; ; ) { List<GarbageCollectorMXBean>.add InternalError.new }
String.split Integer.parseInt
HashMap<String,Object>.new Set<TypeMirror>.addAll Set<TypeMirror>.addAll for ( ) { Types.asElement TypeElement.getQualifiedName Name.toString TypeElement.getSimpleName Name.toString if ( Set<String>.contains ) { if ( String.equals String.equals ) { String.isEmpty String.length String.substring } } Map<String,Object>.put }
UUID.randomUUID UUID.toString IOException.getMessage
CharSequence.length StringWriter.new return ( StringWriter.toString ) RuntimeException.new
while ( ) { System.currentTimeMillis } Exception.printStackTrace
StringTokenizer.new HashSet.new while ( StringTokenizer.hasMoreTokens ) { StringTokenizer.nextToken Set<Object>.add }
if ( ) { if ( ) { PrintStream.println } return ( ) }
TreeSet<String>.new for ( Map<String,Object>.entrySet ) { if ( Entry<String,Object>.getValue ) { Entry<String,Object>.getKey SortedSet<String>.add } }
if ( ) { Properties.getProperty StringBuilder.new if ( String.endsWith ) { StringBuilder.append } StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.toString PrintStream.println Runtime.getRuntime StringBuilder.toString Runtime.exec Process.waitFor }
if ( ) { Reader.close }
Set<String>.contains
if ( ) { for ( ) { if ( String.matches ) { ArrayList<Float>.add return ( ) } } ArrayList<Float>.add return ( ) } else { if ( ) { ArrayList<Float>.add return ( ) } else { ArrayList<Float>.add return ( ) } }
if ( ) { IllegalArgumentException.new }
Document.getElementById
if ( Iterator<Object>.hasNext ) { return ( ) } Iterator<Object>.next
MARSHAL.new
ArrayList<List<Object>>.new if ( ) { ArrayList<Object>.new List<Object>.add List<List<Object>>.add return ( ) } if ( ) { for ( ) { for ( ) { List<Object>.add List<List<Object>>.add } } } else { ArrayList<Object>.new for ( ; ; ) { List<Object>.add } List<List<Object>>.add }
Class.getClassLoader ClassLoader.getResource ImageIcon.new Class.getClassLoader ClassLoader.getResource ImageIcon.new
if ( ) { if ( ) { PrintStream.println } }
if ( ) { Queue<Object>.add }
if ( ) { IllegalArgumentException.new } Timer.setDelay
StringBuffer.new List<Object>.size String.valueOf StringBuffer.append return ( StringBuffer.toString )
UnsupportedOperationException.new
return ( Arrays.asList )
Arrays.sort for ( ; ; ) { if ( Set<Object>.contains ) { continue } }
if ( ) { NullPointerException.new } TimerImpl.new FinalizerHelper.new
JTabbedPane.getSelectedIndex if ( JTabbedPane.getTabCount ) { return ( ) } if ( ) { JTabbedPane.setSelectedIndex }
ArrayList<Object>.size Exception.getMessage
if ( ) { while ( ) { if ( Object.equals ) { return ( ) } } }
if ( ) { PrintStream.println }
System.getenv Map.get if ( ) { if ( ) { PrintStream.println } }
ArrayList<Object>.new FileReader.new LineNumberReader.new StringBuffer.new while ( LineNumberReader.readLine ) { if ( String.indexOf ) { StringBuffer.append while ( LineNumberReader.readLine String.indexOf ) { StringBuffer.append } if ( String.indexOf ) { StringBuffer.append DocumentBuilderFactory.newInstance DocumentBuilderFactory.setIgnoringElementContentWhitespace DocumentBuilderFactory.newDocumentBuilder StringBuffer.toString String.getBytes ByteArrayInputStream.new DocumentBuilder.parse Document.getDocumentElement PrintStream.println ArrayList<Object>.add StringBuffer.new } } } Exception.getMessage PrintStream.println Exception.printStackTrace
if ( String.equals ) { }
if ( Object.equals ) { return ( ) }
Map<Object,String>.clear Map<String,Object>.clear Map<String,Object>.clear
HashSet.new HashSet.new Set<Object>.add Set<Object>.add LinkedList<Object>.getFirst while ( LinkedList<Object>.size ) { LinkedList<Object>.removeFirst Set<Object>.add List<Object>.removeAll for ( ) { if ( ) { if ( Set<Object>.contains ) { if ( ) { LinkedList<Object>.add } } } } }
if ( ) { IndexOutOfBoundsException.new }
CPStringBuilder.append if ( ) { CPStringBuilder.append } else { CPStringBuilder.append } CPStringBuilder.append CPStringBuilder.append CPStringBuilder.append if ( ) { CPStringBuilder.append } CPStringBuilder.append return ( CPStringBuilder.toString )
if ( ) { if ( ) { PrintStream.println } Vector.addElement return ( ) return ( ) }
if ( ) { System.arraycopy }
ArrayList<Object>.new ArrayList<Object>.add if ( ) { ArrayList<Object>.add } if ( ) { ArrayList<Object>.add }
Class.getName MBeanOperationInfo.new Class.getName MBeanParameterInfo.new Class.getName MBeanOperationInfo.new Class.getName MBeanParameterInfo.new Class.getName MBeanOperationInfo.new
Map<String,Integer>.get Integer.intValue
for ( ; ; ) { Map<Object,Boolean>.get }
return ( Arrays.asList )
return ( List<Object>.size List<Object>.size List<Object>.get )
StringBuilder.new if ( ) { StringBuilder.append StringBuilder.append } StringBuilder.append StringBuilder.append return ( StringBuilder.toString )
List<Object>.size List<Object>.add
return ( Thread.currentThread Thread.getName )
if ( ) { Integer.valueOf }
ConcurrentSkipListMap<Object,Object>.initialize ConcurrentSkipListMap<Object,Object>.buildFromSorted InternalError.new
String.indexOf while ( ) { String.substring String.substring String.indexOf } Object.getClass if ( Object.getClass Method.getParameterTypes ) { Method.invoke } else { Method.getParameterTypes Method.invoke }
Properties.new
if ( ) { PrintStream.printf }
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } if ( ) { RuntimeException.new }
Switch ( ) { default : AssertionError.new }
if ( ) { IllegalArgumentException.new }
MouseEvent.getComponent Component.requestFocus if ( ) { if ( SwingUtilities.isRightMouseButton ) { if ( MouseEvent.getSource ) { MouseEvent.getSource } } }
if ( ) { IllegalStateException.new }
Document.getElementsByTagName NodeList.item Node.getChildNodes NodeList.item Document.createElement Node.insertBefore Node.getNodeName
if ( ) { IllegalStateException.new } ByteArrayOutputStream.writeTo
if ( ) { ArithmeticException.new } Switch ( ) { default : AssertionError.new }
return ( ArrayList.new )
return ( Integer.intValue )
Switch ( ) { default : IllegalStateException.new }
Math.max ArrayList<Object>.new for ( ; ; ) { if ( ) { if ( ) { List<Object>.add continue } } List<Object>.add } List<Object>.toArray List<Object>.size List<Object>.clear
if ( Map<String,Object>.get ) { if ( Map<String,String>.get ) { return ( ) } }
if ( JTabbedPane.getTabCount ) { return ( JTabbedPane.getTabCount ) }
Random.new
System.arraycopy
if ( ) { Runnable.run return ( ) }
Class.getName Properties.setProperty
Logger.info
ArrayList<Object>.new
return ( Collection<>.remove )
if ( ) { SecurityManager.checkLink }
return ( ArrayList<Object>.size )
Vector.iterator if ( Iterator.hasNext ) { Iterator.next ComponentUI.getPreferredSize } while ( Iterator.hasNext ) { Iterator.next ComponentUI.getPreferredSize }
if ( ) { HashMap<String,Class<Object>>.new }
return ( Class<>.getSimpleName )
if ( ) { View.getContainer }
return ( Class.getName )
if ( List<Object>.isEmpty ) { return ( Collections.emptyList ) } List<Object>.size for ( ) { DataInputStream.new List<Object>.add }
Hashtable.new Float.new Hashtable.put Float.new Hashtable.put Float.new Hashtable.put Float.new Hashtable.put Float.new Hashtable.put Float.new Hashtable.put
if ( ) { String.indexOf String.substring String.valueOf String.split for ( ) { String.trim } }
Map<String,String>.size Map<String,String>.size for ( Map<String,String>.entrySet ) { Entry<String,String>.getKey Entry<String,String>.getValue }
ArrayList.new if ( List<Object>.contains ) { return ( ) }
return ( Collections.unmodifiableList )
Map<String,Object>.remove
ArrayList<String>.new while ( ) { Throwable.getMessage Throwable.toString StringWriter.new PrintWriter.new for ( Throwable.getStackTrace ) { PrintWriter.println } StringWriter.toString Throwable.getCause } List<String>.size List<String>.toArray
Object.getClass
if ( ) { IllegalArgumentException.new }
Exception.printStackTrace Runnable.new Executor.execute
if ( ) { NullPointerException.new } Map<String,Object>.put
return ( Set<String>.contains )
ArrayList<Object>.new while ( ) { List<Object>.add }
Class.getMethod
Switch ( ) { case : ResultSet.getString if ( ) { String.getBytes } break case : ResultSet.getNString if ( ) { String.getBytes } break case : ResultSet.getBytes break }
System.getProperty if ( String.equals ) { if ( String.equals ) { FileOutputStream.new PrintStream.new return ( ) } }
Map<Object,String>.get return ( String.equals )
if ( ) { for ( ) { if ( String.indexOf ) { if ( String.equalsIgnoreCase ) { break } } } } if ( ) { for ( ) { if ( String.equalsIgnoreCase ) { } } }
return ( ArrayList.iterator )
if ( Math.abs ) { }
return ( AtomicLong.get )
if ( ) { IllegalStateException.new }
AtomicReference<Object>.getAndSet
return ( WritableRaster.getWidth )
Set<Object>.remove if ( ) { Map<String,Queue<Object>>.remove if ( ) { if ( ) { Queue<Object>.size } PriorityBlockingQueue<Object>.addAll } }
System.currentTimeMillis if ( ) { System.currentTimeMillis }
Font.deriveFont HashMap<String,Font>.put
Timer.new List<BigDecimal>.add TimerTask.new Timer.schedule TimerTask.new Timer.scheduleAtFixedRate
if ( String.startsWith String.length String.endsWith ) { IllegalArgumentException.new }
return ( Math.min )
List<Object>.remove
return ( KeyFactorySpi.engineTranslateKey )
Map<String,Object>.get while ( ) { Map<String,Object>.get }
Semaphore.acquire Semaphore.release
if ( ) { PrintStream.println System.exit } File.new if ( File.isDirectory ) { PrintStream.println System.exit } while ( ArrayList<File>.isEmpty ) { ArrayList<File>.get ArrayList<File>.remove }
PooledConnection.getConnection Connection.setHoldability PooledConnection.getConnection Connection.close
if ( String.startsWith ) { if ( String.startsWith ) { String.indexOf if ( ) { String.substring } if ( String.startsWith ) { if ( ) { FileInputStream.new } } } else { FileInputStream.new } }
if ( ) { Writer.close } File.new FileOutputStream.new BufferedOutputStream.new OutputStreamWriter.new BufferedWriter.new Writer.flush
URL.toExternalForm
if ( ) { SecurityException.new } Element.setAttribute
if ( ) { NullPointerException.new } List<Object>.set
List<Object>.size ArrayList<Object>.new List<Object>.size ArrayList<Object>.new
return ( EnumSet.noneOf )
if ( ) { IllegalArgumentException.new }
HashSet<String>.new for ( Properties.keySet ) { if ( Properties.containsKey ) { Set<String>.add } }
return ( ArrayList<Object>.get )
List<String>.size List<String>.toArray
HashSet<Object>.new StringBuffer.append for ( List<Object>.iterator ; Iterator<Object>.hasNext ; ) { Iterator<Object>.next if ( ) { StringBuffer.new HashMap<String,String>.new Map<String,String>.put } else { if ( ) { HashMap<Object,String>.new HashSet<Object>.new HashSet<String>.new HashSet<Object>.new Map<Object,String>.putAll } } if ( ) { if ( ) { StringBuffer.append } StringBuffer.append } } StringBuffer.toString
TreeMap<Long,Object>.new Date.new Date.new
if ( Process.myUid ) { }
return ( File.getAbsolutePath )
HashMap<String,String>.new Calendar.getInstance Calendar.get Integer.toString String.substring Map<String,String>.put Calendar.add Calendar.get Integer.toString String.substring Map<String,String>.put
while ( ) { if ( ) { Object.hashCode } }
if ( ) { Vector<Object>.get Vector<Object>.get for ( ; Vector<Object>.size ; ) { Vector<Object>.get Vector<Object>.get Vector<Object>.get Vector<Object>.get Vector<Object>.get Vector<Object>.get Vector<Object>.get Vector<Object>.get Vector<Object>.get Vector<Object>.get } }
DynAnyFactoryHelper.not_applicable MARSHAL.new
return ( Integer.intValue )
Runnable.new
if ( ) { AssertionError.new }
if ( ) { Locale.forLanguageTag }
for ( ) { if ( ) { List<Object>.add } else { List<Object>.add } }
if ( ) { LinkedList<Object>.addFirst }
HashSet<String>.new HashSet<String>.new while ( Iterator<Object>.hasNext ) { Iterator<Object>.next if ( ) { if ( ) { if ( Set<String>.contains Set<String>.contains ) { continue } Set<String>.add Set<String>.add } } }
Descriptor.getFieldValue if ( ) { return ( Object.toString ) }
return ( String.equals )
if ( ) { NullPointerException.new }
if ( ) { return ( Collections.emptyList ) }
if ( Thread.isAlive ) { } if ( Thread.isAlive ) { System.currentTimeMillis Thread.interrupt Thread.join Thread.currentThread Thread.interrupt System.currentTimeMillis if ( Thread.isAlive ) { } }
StringTokenizer.new if ( StringTokenizer.hasMoreTokens ) { StringTokenizer.nextToken ParseException.new }
if ( ) { Exception.printStackTrace }
if ( ) { HashSet<String>.new for ( ) { CharSequence.toString String.trim for ( ) { Set<String>.add } } return ( ) }
ThreadLocal<SoftReference<SAXParser>>.get SoftReference<SAXParser>.get if ( ) { SAXParserFactory.newSAXParser SoftReference<SAXParser>.new ThreadLocal<SoftReference<SAXParser>>.set return ( ) IllegalStateException.new } else { SAXParser.reset return ( ) }
if ( Class.isArray Class.isArray ) { return ( Class.getComponentType Class.getComponentType ) } if ( Class.isInterface ) { return ( ) } while ( ) { Class.getSuperclass }
return ( Socket.getKeepAlive )
if ( ) { IllegalArgumentException.new }
Runnable.new Thread.new Thread.start
return ( String.charAt )
ArrayList<File>.new List<File>.add
return ( Arrays.asList )
if ( ) { SecureRandom.new } do { SecureRandom.nextInt } while ( ) ;
if ( HashMap<Object,Runnable>.isEmpty ) { HashMap.new for ( HashMap<Object,Runnable>.entrySet ) { Entry<Object,Runnable>.getKey Entry<Object,Runnable>.getValue } }
if ( ) { IllegalArgumentException.new } if ( ) { IndexOutOfBoundsException.new }
return ( String.length )
if ( ) { Applet.getComponentListeners for ( ; ; ) { ComponentListener.componentResized } }
InetAddress.getLocalHost InetAddress.getHostName
if ( ) { Math.max Arrays.copyOf }
return ( Number.doubleValue Double.parseDouble )
for ( ) { if ( String.equals ) { return ( ) } }
Map<Method,List<Object>>.get if ( Map<Method,List<Object>>.containsKey ) { Method.toString } if ( ) { LinkedList<Object>.new Map<Method,List<Object>>.put } List<Object>.add
if ( ) { if ( List<Object>.isEmpty ) { } }
Integer.new
PropertyChangeEvent.getPropertyName if ( String.equals String.equals String.equals String.equals String.equals String.equals String.equals String.equals ) { JSlider.repaint } else { if ( PropertyChangeEvent.getPropertyName String.equals ) { PropertyChangeEvent.getOldValue BoundedRangeModel.removeChangeListener JSlider.getModel BoundedRangeModel.addChangeListener JSlider.repaint } }
Integer.valueOf
return ( String[][].clone )
List<Character>.add Character.getxAdvance
return ( Integer.intValue )
while ( ) { TreeSet<String>.new Set<String>.size Set<String>.toArray File.getName Arrays.binarySearch if ( ) { File.new } }
Field.set
Object.getClass Class.getName HashMap.get if ( ) { PrintStream.println return ( ) } ByteArrayOutputStream.toByteArray ByteArrayInputStream.new ObjectInputStream.new ObjectInputStream.readObject Exception.printStackTrace Vector.new Vector.add Vector.add Boolean.new Vector.add
return ( Map<String,Object>.get )
RuntimeException.new
Class<>.getDeclaredConstructor
ArrayList<Object>.add
Math.min
List<Object>.size for ( ; List<Object>.size ; ) { List<Object>.get if ( ) { IllegalArgumentException.new } } List<List<Object>>.size
Math.abs Math.abs
return ( Integer.intValue )
return ( NumberFormat.getInstance NumberFormat.parse Number.doubleValue )
Arrays.asList Arrays.asList Arrays.asList HashSet.new Collections.singletonList HashSet.new Collections.singletonList HashSet.new Collections.singletonList HashSet.new Arrays.asList HashSet.new HashSet.new Collections.singletonList HashSet.new HashSet.new
return ( Field.getAnnotation Optional<Method>.orElse Field.getAnnotation )
return ( DirectoryComboBoxModel.new )
StringBuilder.new StringBuilder.length StringBuilder.new StringBuilder.length
BlockDataOutputStream.writeBytes
System.currentTimeMillis PrintStream.println if ( ) { System.currentTimeMillis }
if ( ) { return ( Rectangle.new ) } else { return ( Rectangle.new ) }
for ( Map<Integer,List<File>>.keySet ) { Map<Integer,List<File>>.get List<File>.toArray for ( ) { File.list for ( ) { if ( String.startsWith String.endsWith ) { String.indexOf String.indexOf String.length String.substring } } } }
String.format
if ( List<Object>.size ) { List<Object>.get }
if ( ) { AssertionError.new }
if ( ) { ArrayList<URI>.new URI.new List<URI>.add }
List<Object>.size for ( ; ; ) { List<Object>.get } List<Object>.size for ( ; ; ) { List<Object>.get }
Map.put
List<Object>.iterator while ( Iterator<Object>.hasNext ) { Iterator<Object>.next if ( ) { Iterator<Object>.remove } }
StringBuilder.new Long.toHexString if ( String.length ) { String.length for ( ; ; ) { StringBuilder.append } } StringBuilder.append StringBuilder.insert StringBuilder.insert StringBuilder.append Long.toHexString if ( String.length ) { String.length for ( ; ; ) { StringBuilder.append } } StringBuilder.append StringBuilder.insert return ( StringBuilder.toString )
Switch ( ) { case : return ( return ( ) ) case : return ( return ( ) ) case : return ( return ( ) ) default : IllegalArgumentException.new }
if ( ) { IllegalArgumentException.new } if ( ) { NullPointerException.new }
for ( ; ; ) { if ( ) { if ( ) { StringBuilder.append } StringBuilder.append } else { if ( ) { if ( ) { StringBuilder.append } } } }
if ( ) { Float.doubleValue Double.doubleValue } IllegalArgumentException.new
System.getProperty System.getProperty System.getProperty if ( String.length ) { } System.getProperty System.getProperty ManagementFactory.getMemoryMXBean MemoryMXBean.getNonHeapMemoryUsage MemoryMXBean.getHeapMemoryUsage ManagementFactory.getRuntimeMXBean RuntimeMXBean.getName RuntimeMXBean.getUptime ManagementFactory.getThreadMXBean ThreadMXBean.getThreadCount ThreadMXBean.getPeakThreadCount ThreadMXBean.getDaemonThreadCount ThreadMXBean.getTotalStartedThreadCount List<Object>.size for ( ; ; ) { List<Object>.get }
if ( String.trim String.isEmpty ) { }
return ( return ( ) Callable<Double>.new )
if ( ) { NullPointerException.new }
if ( ) { IllegalArgumentException.new } if ( Set<CharSequence>.isEmpty ) { IllegalArgumentException.new }
if ( ) { NullPointerException.new }
OutputStream.write
return ( Map<String,String>.keySet )
if ( ) { if ( ) { return ( Boolean.booleanValue ) } return ( String.equals ) }
ArrayList<Object>.new for ( HashMap<String,Object>.values ) { if ( ) { ArrayList<Object>.add } }
for ( ; ; ) { ByteBuffer.getShort }
return ( List<Integer>.size )
UUID.randomUUID List<Object>.toArray FutureTask<Void>.run
HashSet<Object>.new Set<Object>.retainAll
List.nil for ( ) { if ( ) { if ( ) { List<Object>.prepend } continue } if ( ) { List.nil } }
Graphics2D.setRenderingHint Graphics2D.setBackground Graphics2D.clearRect
Switch ( ) { default : IllegalArgumentException.new }
return ( Optional.empty )
for ( ; List<Object>.size ; ) { List<Object>.get }
JTable.getColumnCount for ( ; ; ) { for ( ; ; ) { JTable.getValueAt } } JTextField.setText
return ( AtomicInteger.getAndIncrement )
return ( String.charAt )
Executor.new
ByteBuffer.wrap ByteBuffer.put ByteBuffer.put ByteBuffer.array MessageDigest.getInstance MessageDigest.digest
return ( String.equals )
for ( ; ; ) { File.getAbsolutePath URL.new }
if ( ) { ByteArrayOutputStream.new ByteArrayOutputStream.toByteArray }
ArrayList<Object>.new HashSet<Object>.new
for ( ; ; ) { List.get }
if ( Logger.isLoggable ) { Logger.info }
if ( ) { IllegalArgumentException.new }
return ( Integer.intValue )
InputStream.available InputStream.read InputStream.close String.new IOException.printStackTrace
List<String>.size if ( ) { for ( ; ; ) { List<String>.get } }
do { InputStream.read } while ( ) ;
Integer.toString
if ( String.equalsIgnoreCase ) { if ( String.equalsIgnoreCase ) { } }
DSAPrivateKeySpec.getG DSAPrivateKeySpec.getP DSAPrivateKeySpec.getQ BigInteger.toByteArray BigInteger.toByteArray BigInteger.toByteArray DSAPrivateKeySpec.getX BigInteger.toByteArray DSAParameterSpec.new
HashMap.new
if ( ) { if ( ) { Vector<Object>.add } return ( ) } if ( ) { if ( ) { Vector<Object>.add } return ( ) } if ( ) { Vector<Object>.add }
return ( String.format )
if ( ) { NullPointerException.new }
HashMap<String,Object>.new LinkedList<Map<String,Object>>.addFirst
if ( ) { ArrayIndexOutOfBoundsException.new } Math.min
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new }
if ( ) { return ( ) Exception.printStackTrace return ( ) }
String.split
for ( ) { if ( Map<Object,Integer>.containsKey ) { Map<Object,Integer>.put } else { Map<Object,Integer>.get Map<Object,Integer>.put } }
if ( ) { IllegalArgumentException.new }
List<Object>.add List<Object>.size
if ( ) { IllegalArgumentException.new } Math.abs
if ( ) { IllegalArgumentException.new }
RuntimeException.new
if ( String.length ) { return ( ) } String.charAt Character.toUpperCase String.substring
if ( ) { NoSuchElementException.new }
HashSet.new for ( ) { Set<URI>.add } for ( ) { if ( Set<URI>.contains ) { List<Object>.add } }
Class.getSimpleName UnsupportedOperationException.new
if ( ) { System.identityHashCode }
String.toCharArray String.toCharArray
List<Object>.addAll
String[].clone
Proxy.isProxyClass Class.isAssignableFrom
return ( Stream.of )
if ( ) { StringIndexOutOfBoundsException.new }
HashSet<Object>.new
return ( Integer.intValue )
while ( Iterator<>.hasNext ) { if ( Iterator<>.next ) { } } return ( Iterator<>.hasNext Iterator<>.next )
Switch ( ) { default : AssertionError.new }
if ( ) { Integer.valueOf }
CharSequence.length while ( CharSequence.charAt ) { } return ( CharSequence.length CharSequence.subSequence )
Map<String,Integer>.put
return ( Pattern.pattern String.replaceAll )
Collections.emptyList
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } for ( ; ; ) { Math.max Math.min } for ( ; ; ) { Math.max Math.min }
return ( CopiesList<Object>.new )
if ( ) { System.arraycopy } else { if ( ) { PrintStream.println } else { if ( ) { if ( ) { PrintStream.println } } } }
return ( Integer.intValue )
return ( String.equals )
Hashtable.get if ( ) { Hashtable.put } if ( Vector.size ) { Math.max }
String.indexOf if ( ) { return ( String.substring ) }
if ( String.indexOf ) { return ( ) }
Exception.getMessage if ( ) { List<String>.add }
if ( Object.equals ) { return ( ) }
JMenu.new JMenu.setMnemonic JMenuItem.new ActionListener.new JMenuItem.addActionListener JMenuItem.setMnemonic JMenu.add JMenu.addSeparator JMenuItem.new ActionListener.new JMenuItem.addActionListener JMenuItem.setMnemonic JMenu.add
return ( Integer.intValue )
JSplitPane.setContinuousLayout
if ( String.equals ) { File.toString File.exists }
return ( Field.get )
return ( DatabaseMetaData.getProcedures ) ResultSet.getString if ( String.length ) { ResultSet.getString ResultSet.getString String.length if ( Set.contains ) { Switch ( ResultSet.getShort ) { } SQLException.getStackTrace } } SQLException.getStackTrace
if ( ) { if ( ) { return ( Boolean.booleanValue ) } return ( String.equals ) }
if ( ) { if ( ) { Integer.parseInt } } if ( String.isEmpty ) { if ( ) { if ( String.equals ) { } } } if ( List<Object>.isEmpty ) { for ( ) { Exception.getLocalizedMessage if ( List<Object>.isEmpty ) { break } } } Exception.getLocalizedMessage
return ( AtomicReference<Object>.get )
if ( ) { IllegalArgumentException.new }
for ( ) { Set<File>.add }
NoSuchElementException.new
LinkedList.new for ( ) { if ( ) { Collection<Object>.add } } if ( Collection<Object>.isEmpty ) { return ( ) }
FileOutputStream.new PrintWriter.new for ( ) { PrintWriter.println PrintWriter.println PrintWriter.println } PrintWriter.close
if ( ) { return ( TypeVariable<>.getBounds ) } if ( ) { return ( WildcardType.getUpperBounds ) } for ( Class<>.getGenericInterfaces ) { }
if ( ) { if ( ) { Collection.contains } } AtomicInteger.incrementAndGet Collection.size if ( ) { for ( Collection.iterator ; Iterator.hasNext ; ) { Iterator.next } }
return ( Integer.toHexString )
if ( ) { Map<String,List<Integer>>.get if ( ) { ArrayList.new List<Integer>.add Map<String,List<Integer>>.put } else { List<Integer>.add } if ( ) { Map<String,List<Integer>>.get if ( ) { ArrayList.new List<Integer>.add Map<String,List<Integer>>.put } else { List<Integer>.add } } }
StringBuilder.new for ( ) { StringBuilder.append } return ( StringBuilder.toString )
UnsupportedOperationException.new
List.add Math.max
HashMap<Object,Object>.get
MemoryUsage.getInit MemoryUsage.getUsed MemoryUsage.getCommitted MemoryUsage.getMax
if ( ) { System.arraycopy }
Objects.requireNonNull if ( ) { IllegalArgumentException.new }
return ( Math.sqrt )
Arrays.sort
Logger.fine if ( String.isEmpty ) { Logger.warning return ( ) } if ( ) { Logger.warning return ( ) } if ( List<Object>.isEmpty ) { List<Object>.get Switch ( ) { case : Element.setAttribute Integer.toString Element.setAttribute Integer.toString Element.setAttribute Element.setAttribute Integer.toString Element.setAttribute Integer.toString Element.setAttribute Integer.toString Element.setAttribute DatatypeConverter.printBase64Binary Element.setTextContent break } } Logger.log
return ( ArrayList<Object>.get )
return ( Socket.getInetAddress InetAddress.getHostAddress )
PrintStream.println PrintStream.println
Switch ( ) { default : System.arraycopy return ( ) }
Objects.requireNonNull
return ( Sync.getPermits )
HashSet<String>.new if ( String.equals ) { String.toLowerCase String.split for ( ) { if ( String.length ) { continue } if ( String.matches ) { HashSet<String>.add continue } if ( String.matches ) { HashSet<String>.add continue } } }
String.format
if ( ) { Integer.valueOf }
return ( Collections.unmodifiableList )
if ( ) { PrintStream.println }
if ( String.length ) { String.substring }
BufferedInputStream.read
if ( List.isEmpty ) { return ( ) }
return ( Integer.intValue )
ArrayList.new List<Object>.get
Integer.valueOf ThreadLocal<Integer>.set
if ( ) { Class.getName RuntimeException.new } ByteArrayOutputStream.toString
if ( ) { if ( ) { HashMap.remove return ( ) } } if ( ) { String.substring String.substring return ( ) } String.length while ( ) { if ( ) { String.charAt } } String.substring String.substring
System.currentTimeMillis Map<Object,Object>.entrySet while ( Iterator<Entry<Object,Object>>.hasNext ) { Iterator<Entry<Object,Object>>.next if ( Entry<Object,Object>.getValue Entry<Object,Object>.getValue ) { Iterator<Entry<Object,Object>>.remove } } if ( ) { Logger.info }
for ( AnnotationMirror.getElementValues Map.entrySet ) { Entry<,>.getKey if ( ExecutableElement.getSimpleName Name.contentEquals ) { Entry<,>.getValue return ( AnnotationValue.getValue Class<Object>.cast ) } }
return ( String.equals )
Logger.info while ( ) { BlockingQueue<Object>.take }
ArrayList.new for ( ; ; ) { List<List<Object>>.add } ArrayList.new for ( ; ; ) { List<List<Object>>.add } Stream<Object>.forEach
HashMap<Integer,Object>.get
return ( Collectors.toConcurrentMap Stream<Entry<Object,Object>>.collect )
if ( ) { PrintStream.println }
Map<Object,Object>.clear
return ( String.new )
return ( Date.getTime )
OutputStream.flush IOException.toString
if ( ) { if ( ) { BlockingQueue<Object>.offer } }
ArrayList<Object>.new List<Object>.add List<Object>.add List<Object>.add ArrayList<Object>.new List<Object>.add List<Object>.add
if ( Collection<Object>.isEmpty ) { }
if ( ) { return ( HashMap<Object,Object>.get ) }
if ( String.equals ) { }
BigDecimal.compareTo BigDecimal.toString
ArrayList<String>.new AtomicReference<Object>.new
return ( Math.exp )
Switch ( ) { default : String.format IllegalArgumentException.new }
for ( ; ; ) { Set<String>.add }
IllegalArgumentException.new
if ( ) { PrintStream.println }
Document.getFirstChild
OutputStream.write_string OutputStream.write_Object
if ( String.isEmpty ) { IllegalArgumentException.new }
System.currentTimeMillis System.currentTimeMillis
String.valueOf
System.arraycopy
LinkedHashSet<String>.new LinkedHashSet<String>.new
Math.abs Math.max
for ( ; ; ) { Math.exp } for ( ; ; ) { for ( ; ; ) { Math.abs } }
Map<Class<Object>,Object>.size HashMap.new if ( ) { for ( Map<Class<Object>,Object>.entrySet ) { Entry<Class<Object>,Object>.getKey Entry<Class<Object>,Object>.getValue Map<Class<Object>,Object>.put } }
DynAny.type if ( ) { DynAny.to_any Any.extract_Streamable }
if ( ) { IllegalArgumentException.new }
if ( Double.isNaN ) { } if ( Double.isInfinite ) { } Double.doubleToLongBits if ( ) { BigInteger.valueOf BigInteger.flipBit } else { BigInteger.valueOf BigInteger.flipBit BigInteger.multiply }
if ( ) { String.valueOf return ( String.toCharArray ) } else { if ( ) { ClassCastException.new } }
ArrayList.new for ( ; ; ) { List.add } ArrayList.add
if ( String.length ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } Locale.getDefault String.toLowerCase String.startsWith String.toLowerCase String.replaceFirst if ( String.isEmpty ) { return ( ) } return ( Locale.getDefault String.toLowerCase Locale.getDefault String.toLowerCase String.equals )
if ( ) { String.new PrintStream.println } Math.min System.arraycopy if ( ) { System.arraycopy } Math.min
MessageDigest.getInstance for ( ) { MessageDigest.reset X509Certificate.getEncoded MessageDigest.digest if ( Arrays.equals ) { return ( ) } }
if ( ) { IllegalStateException.new }
Document.getDefaultRootElement Element.getElement Document.getDefaultRootElement Element.getElement Element.getStartOffset Element.getEndOffset Document.remove BadLocationException.printStackTrace
Integer.toHexString
Logger.getGlobal Logger.info if ( ) { Logger.info Logger.info Logger.info Logger.info Logger.info Logger.info Logger.info Logger.info Logger.info } Exception.toString Exception.getMessage Logger.info
if ( ) { NullPointerException.new } if ( ) { DocumentBuilderFactory.newInstance DocumentBuilderFactory.newDocumentBuilder Error.new ErrorHandler.new DocumentBuilder.setErrorHandler if ( String.equals ) { StringReader.new InputSource.new InputSource.setSystemId return ( ) } SAXException.new EntityResolver.new DocumentBuilder.setEntityResolver } DocumentBuilder.parse Document.getElementsByTagName NodeList.getLength for ( ; ; ) { NodeList.item Element.getAttribute Element.getTextContent } InvalidPropertiesFormatException.new
ConcurrentLinkedQueue<Object>.new HashSet<Object>.new Collections.synchronizedSet HashSet<SocketAddress>.new
Math.max ConcurrentMap<Object,SoftReference<Object>>.clear ConcurrentHashMap<Object,SoftReference<Object>>.new
return ( JAXBElement<Object>.new )
Map<String,Object>.get if ( ) { return ( Object.toString ) }
if ( ) { return ( Character.charValue ) } else { Object.getClass Class.getName }
Calendar.set Calendar.set Calendar.set if ( Calendar.getActualMaximum ) { Calendar.add Calendar.set Calendar.set Calendar.set Calendar.set Calendar.add } else { Calendar.set }
BigDecimal.valueOf BigDecimal.valueOf
return ( String.new )
WeakReference<Object>.get WeakReference<Object>.clear
if ( ) { IllegalArgumentException.new }
WeakReference<Object>.new UUID.toString UUID.toString if ( ) { Switch ( ) { case : IllegalArgumentException.new case : UnsupportedOperationException.new default : RuntimeException.new } }
for ( ) { System.arraycopy } Arrays.sort
return ( Integer.intValue )
Arrays.asList
while ( Iterator<Object>.hasNext ) { Iterator<Object>.next if ( ) { Iterator<Object>.remove } }
ArrayList.new for ( ) { List<Object>.add } ArrayList.new for ( ) { List<Object>.add }
Socket.getLocalAddress InetAddress.getHostAddress if ( ) { Socket.getInetAddress InetAddress.getHostAddress }
Map<String,String>.put
return ( Integer.valueOf )
return ( Hashtable.get )
String.length String.new if ( String.equals ) { return ( ) }
if ( ) { IllegalArgumentException.new } DoubleUnaryOperator.applyAsDouble DoubleUnaryOperator.applyAsDouble DoubleUnaryOperator.applyAsDouble
return ( Object.getClass )
Attributes.getValue
return ( Math.min Math.max )
DriverManager.getConnection Connection.createStatement Statement.executeQuery
return ( TreeMap.new TreeMap.new )
if ( String.equals ) { if ( String.equals ) { } } else { if ( String.equals ) { if ( String.equals ) { } } }
return ( MessageFormat.format )
StringBuffer.new for ( ; ; ) { for ( ; ; ) { StringBuffer.append StringBuffer.append } StringBuffer.append } return ( StringBuffer.toString )
Hashtable.clear
return ( NumberFormat.getAvailableLocales )
return ( ChannelOutputStream.new OutputStreamWriter.new )
if ( ) { IllegalArgumentException.new } NoSuchElementException.new
List<Object>.clear
if ( ) { return ( LinkedList.get ) }
ArrayList<Integer>.new PrintStream.println List<Integer>.add Arrays.asList
if ( ) { if ( ) { ConcurrentModificationException.new } } else { if ( Collection<Object>.isEmpty ) { Map<Object,Collection<Object>>.get } }
ArrayList<Object>.new ArrayList<String>.new Collection<Object>.size Collections.singletonList for ( ) { if ( ) { List<String>.add } if ( ) { if ( String.equals ) { } } } List<Object>.add List<Object>.add List<Object>.add List<Object>.add if ( List<String>.isEmpty ) { List<String>.size List<String>.toArray List<Object>.add } return ( List<Object>.size List<Object>.toArray )
Arrays.asList
if ( ) { Integer.valueOf }
StringTokenizer.new StringTokenizer.nextToken StringTokenizer.nextToken StringTokenizer.nextToken StringTokenizer.nextToken StringTokenizer.nextToken StringTokenizer.nextToken
return ( Integer.highestOneBit )
Integer.parseInt
HashMap.new for ( Map<,>.entrySet ) { Entry<,>.getKey Entry<,>.getValue Map<Object,Iterable<Object>>.put }
System.getSecurityManager if ( ) { SecurityManager.checkSetFactory }
String.replaceFirst String.replaceFirst
WindowAdapter.new Container.setLayout JButton.new Font.new JButton.setFont JButton.new JButton.setText JTextField.setText ActionListener.new JButton.addActionListener JButton.setForeground Font.new JButton.setFont JButton.setBounds Container.add JButton.setBounds Container.add JTextField.new Font.new JTextField.setFont JTextField.setBounds Container.add JTextField.setColumns JButton.new ActionListener.new JButton.addActionListener Font.new JButton.setFont JButton.setBounds Container.add JButton.new ActionListener.new JButton.addActionListener Font.new JButton.setFont JButton.setBounds Container.add JButton.new ActionListener.new JButton.addActionListener Font.new JButton.setFont JButton.setBounds Container.add
if ( String.isEmpty ) { return ( ) }
if ( ) { CannotUndoException.new }
return ( String.length String.endsWith String.charAt String.charAt String.charAt )
List<Object>.add
Class.getConstructor Constructor<>.newInstance String.format Class.getSimpleName String.format IOException.new
while ( ) { Switch ( ) { case : Number.doubleValue break case : Number.doubleValue break case : Number.doubleValue break case : Number.doubleValue break case : Number.doubleValue break case : Number.doubleValue break } }
if ( ) { Integer.valueOf }
File.new File.getName String.lastIndexOf String.substring
for ( ; ; ) { if ( String.equals ) { return ( ) } }
Document.getDoctype DocumentType.getEntities NamedNodeMap.getNamedItem Node.getNodeType
return ( Class.getName Arrays.toString Arrays.toString )
Set<Object>.remove
return ( File.new )
return ( HashMap.get )
List<Object>.size List<Object>.size List<Object>.size List<Object>.size List<Object>.size List<Object>.size for ( ; List<Object>.size ; ) { for ( ; List<Object>.size ; ) { List<Object>.get List<Object>.get } } for ( ; List<Object>.size ; ) { for ( ; List<Object>.size ; ) { for ( ; List<Object>.size ; ) { Math.min } } }
if ( ) { Double.parseDouble return ( ) } Object.getClass Class.getName IllegalStateException.new
PrintStream.print PrintStream.print PrintStream.println
LinkedList<Runnable>.add
if ( String.equals ) { Arrays.asList if ( List<String>.contains ) { return ( ) } }
Arrays.binarySearch
if ( HashMap<Object,Object>.containsKey ) { } ArrayList<Object>.add HashMap<Object,Object>.put
Map<String,Integer>.remove
if ( KeyEvent.getKeyCode ) { } KeyAdapter.new
if ( String.equals ) { if ( BigDecimal.signum ) { } } else { if ( String.length ) { if ( BigDecimal.signum ) { } } if ( String.length ) { if ( BigDecimal.signum ) { } } }
Switch ( ) { case : return ( TimeUnit.convert ) case : return ( BigDecimal.valueOf ) case : return ( Charset.forName String.new ) case : Charset.forName String.new return ( Arrays.asList ) return ( ) }
ByteArrayInputStream.new InputStream.read InputStream.read InputStream.read InputStream.read InputStream.close if ( ) { ByteArrayInputStream.new InputStream.skip InputStream.read InputStream.read InputStream.read InputStream.read if ( ) { InputStream.read if ( ) { InputStream.read InputStream.read InputStream.read InputStream.read } InputStream.close return ( ) } } IOException.new if ( ) { InputStream.close }
Consumer<Object>.andThen Consumer<Object>.accept
ArrayList<Object>.new for ( ; ; ) { if ( ) { ArrayList<Object>.add } } if ( ) { ArrayList<Object>.add } ArrayList<Object>.size for ( ; ; ) { ArrayList<Object>.get }
if ( String.isEmpty ) { IllegalArgumentException.new }
Collection<String>.size ArrayList<Object>.new for ( ) { Collection<Object>.add }
Thread.currentThread for ( ; ; ) { if ( ) { Exception.new } if ( ) { Exception.new } if ( ) { Thread.currentThread Thread.getId } }
if ( ) { Arrays.copyOf Arrays.copyOf } ArrayList.new for ( ; ; ) { Double.doubleToRawLongBits } List<Byte>.size for ( ; ; ) { List<Byte>.get }
List<Object>.stream Collectors.toList return ( return ( ) )
Element.getAttribute if ( String.isEmpty ) { } Element.getAttribute if ( String.isEmpty ) { Element.getAttribute if ( String.isEmpty ) { } } if ( String.isEmpty ) { } if ( ) { NodeList.item Node.getChildNodes } if ( String.isEmpty ) { }
Deque<Object<Object>Object>.push for ( ; ; ) { if ( String.equals ) { return ( ) } } Arrays.copyOf IllegalArgumentException.new IllegalArgumentException.new
return ( Float.intBitsToFloat )
if ( ) { ArrayList<String>.new while ( ) { Class.getName List<String>.add } }
String.length for ( ; String.length ; ) { String.charAt }
while ( ) { if ( ) { if ( ) { if ( ) { Arrays.toString } } } }
return ( Class.getSimpleName )
if ( ) { if ( ) { System.arraycopy } NamingException.new }
if ( ) { RuntimeException.new }
if ( String.equals ) { } if ( String.equals ) { }
return ( Map<String,String>.get )
if ( ) { File.new if ( File.exists ) { File.length if ( ) { File.delete } else { if ( ) { File.delete } else { FileOutputStream.new FileNotFoundException.toString if ( ) { Long.toString } } } } }
if ( ) { Arrays.fill return ( ) } else { Arrays.fill return ( ) }
if ( ) { if ( ) { List.size Array.newInstance List.toArray return ( ) } }
for ( ; ; ) { if ( ) { Thread.sleep } }
if ( ) { ProxySelector.connectFailed }
Switch ( ) { default : String.format IllegalArgumentException.new }
System.getenv if ( ) { Integer.parseInt if ( ) { String.format } }
return ( CharBuffer.allocate while ( BufferedReader.read ) { CharBuffer.rewind Appendable.append CharBuffer.rewind } return ( ) )
return ( Statement.executeUpdate Statement.executeUpdate Statement.executeUpdate Statement.executeUpdate Statement.executeUpdate )
return ( Long.parseLong )
if ( String.isEmpty ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new }
if ( ) { Set<Object>.add }
if ( ) { IllegalStateException.new }
return ( return ( ) Callable<Long>.new )
for ( ; List<Object>.size ; ) { List<Object>.get }
Switch ( ) { case : Switch ( ) { default : AssertionError.new } break default : AssertionError.new }
for ( ; ; ) { Math.random }
Map<String,Object>.get
List<Object>.toArray Arrays.toString System.getProperties Class.getName ArrayList.new List<String>.add List<String>.add List<String>.add List<String>.add List<String>.add List<String>.add
return ( Map<String,TreeSet<Object>>.get )
return ( Long.toHexString )
if ( Class<>.isAssignableFrom ) { IllegalArgumentException.new }
List<Object>.add
if ( ) { IllegalArgumentException.new }
Hashtable<Object,Object>.new
Integer.toString
ByteArrayOutputStream.new return ( ByteArrayOutputStream.toByteArray )
Array.newInstance
if ( ) { IllegalArgumentException.new } if ( ) { OutOfMemoryError.new }
if ( BigInteger.equals ) { return ( ) }
if ( Collection<Object>.size Collection<Object>.isEmpty ) { for ( ) { List<Object>.add } }
URI.getPath HttpCookie.getPath return ( String.startsWith )
List<Object>.size List<Object>.get List<Object>.get List<Object>.get
return ( Long.parseLong )
if ( ) { if ( Component.getName String.equals Component.getName String.equals ) { return ( ) } } if ( Component.getParent ) { return ( ) }
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new }
OutputStream.write OutputStream.write OutputStream.write OutputStream.write OutputStream.write OutputStream.write OutputStream.write OutputStream.write OutputStream.write OutputStream.write OutputStream.write OutputStream.write
String.concat Hashtable<String,Object>.get if ( ) { Hashtable<String,Object>.get if ( ) { Hashtable<String,Object>.get } if ( ) { Hashtable<String,Object>.get } }
if ( XMLStreamWriter.getPrefix ) { XMLStreamWriter.writeNamespace XMLStreamWriter.setPrefix } XMLStreamWriter.writeAttribute
if ( ) { IllegalArgumentException.new }
System.currentTimeMillis
return ( String.valueOf )
for ( ; ; ) { System.arraycopy }
if ( ) { if ( List.isEmpty ) { } }
if ( Object.equals String.equalsIgnoreCase ) { if ( Object.equals String.equalsIgnoreCase ) { return ( ) } }
Method.getReturnType Method.getName if ( String.startsWith String.length String.charAt Character.isUpperCase Method.getParameterTypes ) { if ( String.startsWith String.length String.charAt Character.isUpperCase Method.getParameterTypes ) { return ( Method.getParameterTypes ) } }
if ( ) { IllegalStateException.new } ArrayList.new List<Object>.add List<Object>.add List<Object>.add List<Object>.add List<Object>.add List<Object>.add List<Object>.add List<Object>.add List<Object>.add List<Object>.add List<Object>.add List<Object>.add List<Object>.size List<Object>.toArray
HashMap.new for ( ) { Entry<String,String>.getKey Entry<String,String>.getValue Map<String,String>.put }
Map<Double,String>.clear
if ( ) { if ( ) { UUID.randomUUID UUID.toString Hashtable<String,String>.put } }
Callable.call Class<>.getName Exception.getClass
for ( ) { while ( Iterator<Object>.hasNext ) { Iterator<Object>.next } }
if ( ) { IllegalArgumentException.new } Runnable.new
StringBuilder.setLength
CharSequence.length StringWriter.new return ( StringWriter.toString ) RuntimeException.new
if ( ) { IllegalStateException.new }
if ( ) { IndexOutOfBoundsException.new }
return ( File.getPath )
for ( ; ; ) { File.new }
List<Object>.forEach List<Object>.size List<Object>.toArray
if ( ) { Class<>.getSuperclass Class<>.getDeclaredFields for ( ) { Field.getType if ( Class<>.isPrimitive ) { continue } Field.getModifiers if ( Modifier.isStatic ) { continue } Field.setAccessible ArrayList<Field>.add } }
BigDecimal.new return ( BigDecimal.subtract BigDecimal.toString )
String.toCharArray
PreparedStatement.executeQuery while ( ResultSet.next ) { ResultSet.getInt ResultSet.getInt ResultSet.getInt ResultSet.getInt ResultSet.getInt ResultSet.getString ResultSet.getString ResultSet.getString ResultSet.getString } ResultSet.close
return ( Dimension.new )
return ( Integer.parseInt ) DateFormat.parse DateFormat.parse GregorianCalendar.new Calendar.setTime return ( Calendar.get Calendar.get Calendar.get )
HashMap<String,Object>.get
if ( ) { NullPointerException.new }
Boolean.valueOf
if ( ) { RuntimeException.new } if ( ) { if ( ) { List<Object>.get } }
if ( ThreadLocal<ResourceBundle>.get ) { } return ( ThreadLocal<ResourceBundle>.get )
for ( ) { Map<Object,Integer>.get Map<Object,Integer>.put }
if ( ) { if ( ) { if ( ) { BigInteger.intValue } return ( ) } else { if ( ) { BigInteger.intValue return ( ) } else { if ( ) { if ( ) { if ( ) { RuntimeException.new } } } } } }
StringBuffer.setLength Integer.toHexString StringBuffer.append while ( StringBuffer.length ) { StringBuffer.insert } StringBuffer.insert for ( ; StringBuffer.length ; ) { StringBuffer.charAt }
return ( JAXBElement<Object>.new )
if ( ) { for ( Map<String,Object>.keySet ) { if ( Map<String,Long>.containsKey ) { Map<String,Object>.get Map<String,Long>.get } } }
if ( ) { NullPointerException.new } else { if ( ) { NullPointerException.new } } WeakReference<Class<Object>>.new
return ( Hashtable<Object,Object>Object.new )
if ( ) { String.format }
ArrayList<Object>.new
UnsupportedOperationException.new
StringBuilder.new StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append if ( ) { StringBuilder.append String.new StringBuilder.append StringBuilder.append } else { StringBuilder.append } StringBuilder.append StringBuilder.append return ( StringBuilder.toString )
return ( List<Object>.size )
StringBuffer.new if ( ) { StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.toString File.new } else { if ( ) { StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.toString File.new } }
return ( Arrays.binarySearch )
if ( ) { IllegalArgumentException.new } Map<Object,String>.put
return ( Integer.intValue )
String[].clone
Arrays.asList if ( List.size ) { List.get for ( ; List<String>.size ; ) { List<String>.get String.toString } } String.trim if ( String.startsWith ) { String.substring String.indexOf String.substring }
if ( Deque<Integer>.isEmpty ) { if ( Deque<Integer>.getFirst ) { while ( Deque<Integer>.isEmpty ) { Deque<Integer>.removeFirst } } } List<Object>.size
return ( MessageDigest.toString )
Runnable.new
if ( Class<>.isAssignableFrom ) { if ( Class<>.isAssignableFrom Class<>.isAssignableFrom ) { if ( Class<>.isAssignableFrom Class<>.isAssignableFrom ) { if ( Class<>.isAssignableFrom Class<>.isAssignableFrom ) { if ( Class<>.isAssignableFrom ) { if ( Class<>.isAssignableFrom ) { return ( ) } } } } } }
ByteBuffer.clear ByteBuffer.put ByteBuffer.flip do { } while ( ByteBuffer.hasRemaining ) ; if ( ) { Math.abs }
if ( ) { JOptionPane.showMessageDialog } Exception.getMessage if ( ) { Locale.setDefault } System.exit Runnable.new Thread.new Thread.setName Thread.setDaemon Thread.start
Character.digit
if ( String.isEmpty ) { }
while ( ) { List<Object>.remove List<Object>.remove }
do { if ( Iterator<Object>.hasNext ) { Iterator<Object>.next if ( Iterator<Object>.hasNext ) { Iterator<Object>.next while ( Iterator<Object>.hasNext ) { Iterator<Object>.next } } } } while ( ) ;
if ( ) { List<Object>.add }
ArrayList<Object>.indexOf ArrayList<Object>.get Runnable.new List<Object>.size for ( ; ; ) { List<Object>.get ArrayList<Object>.indexOf ArrayList<Object>.get ArrayList<Object>.get }
HashMap.new Map<String,String>.put Scanner.new Scanner.useDelimiter if ( Scanner.hasNext ) { Scanner.next } Scanner.close String.trim if ( String.isEmpty ) { StringReader.new }
AtomicReference<WeakReference<Object>>.get return ( WeakReference<Object>.get )
Arrays.checkOffsetAndCount if ( ) { SocketTimeoutException.new }
Collections.singletonList
for ( ; ; ) { Integer.toString String.substring }
while ( ) { URL.new break break }
if ( ) { ByteArrayInputStream.new } InputStream.close if ( ) { ByteArrayInputStream.new } if ( ) { InputStream.close }
if ( ) { IllegalArgumentException.new }
String[].clone
String.startsWith String.contains String.contains
Hashtable<Integer,Integer>.get
return ( ArrayList.new )
Long.parseLong
for ( ; ; ) { Integer.parseInt }
if ( Set<String>.contains ) { String.format }
List<Object>.get
String.format String.substring return ( Integer.valueOf )
StringBuilder.append StringBuilder.append if ( ) { StringBuilder.append StringBuilder.append StringBuilder.append } if ( ) { StringBuilder.append StringBuilder.append } StringBuilder.append
JToggleButton.new JToggleButton.setBounds JToggleButton.setSelected MetalToggleButtonUI.new JToggleButton.setUI URL.new ImageIO.read ImageIcon.new JToggleButton.setIcon MalformedURLException.printStackTrace IOException.printStackTrace URL.new ImageIO.read ImageIcon.new JToggleButton.setSelectedIcon MalformedURLException.printStackTrace IOException.printStackTrace JToggleButton.new JToggleButton.setBounds JToggleButton.new JToggleButton.setBounds JToggleButton.new JToggleButton.setBounds
if ( ) { IndexOutOfBoundsException.new }
if ( Collection<Object>.isEmpty ) { return ( ) } ArrayList<Object>.new for ( ) { Collection<Object>.add }
Objects.requireNonNull Objects.requireNonNull
String.length for ( ; ; ) { String.charAt Character.digit String.charAt Character.digit }
ArrayList<Object>.add
for ( ) { Deque<Object>.remove }
if ( ) { Logger.log } else { if ( ) { if ( ) { Logger.log return ( ) } } }
ArrayList<Object>.new for ( ) { List<Object>.add } Set<Object>.clear
return ( Stack.empty )
return ( ByteArrayInputStream.new DocumentBuilder.parse )
Vector.iterator if ( Iterator.hasNext ) { Iterator.next ComponentUI.getPreferredSize } while ( Iterator.hasNext ) { Iterator.next ComponentUI.getPreferredSize }
Switch ( ) { default : IllegalArgumentException.new }
HashMap.new ArrayList.new
String.split String.split StringBuilder.new for ( ; ; ) { String.replaceAll if ( ) { StringBuilder.append StringBuilder.append } else { StringBuilder.append } } StringBuilder.toString StringBuilder.new for ( ; ; ) { StringBuilder.append StringBuilder.append } return ( StringBuilder.toString )
return ( Charset.forName )
if ( ) { if ( ) { if ( ) { ArrayList<Object>.new } if ( ) { if ( List<Object>.size ) { List<Object>.set } else { if ( List<Object>.size ) { List<Object>.add } } } } }
if ( Stack.size ) { } Stack.push
return ( Arrays.toString )
List<Object>.size if ( ) { String.format } if ( ) { String.format } if ( ) { for ( ; ; ) { if ( ) { if ( ) { if ( ) { String.format } } } } }
if ( ) { Integer.valueOf }
Integer.toHexString Integer.toHexString Integer.toHexString Integer.toHexString if ( String.length ) { } if ( String.length ) { } if ( String.length ) { } if ( String.length ) { }
if ( List<Object>.size ) { return ( ) } List<Object>.get if ( ) { RuntimeException.new } ArrayList<Object>.new for ( ) { Map<Object,Object>.get if ( ) { if ( ) { List<Object>.add } } }
if ( ) { if ( ) { RuntimeException.new } }
if ( ) { NullPointerException.new } if ( ) { EOFException.new }
return ( Collection<X509Certificate>.size )
ConcurrentMap.put HashSet<Object>.remove
if ( String.equals ) { Class<Object>.getClassLoader Proxy.newProxyInstance return ( ) }
if ( Parameter.isAnnotationPresent ) { Parameter.getAnnotation return ( ) }
PrintStream.println
File.delete
if ( String.endsWith ) { String.length String.substring }
if ( ) { IllegalArgumentException.new }
Array.getLength
StringBuilder.new StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append if ( ) { StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append } if ( ) { StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append } StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.toString Exception.printStackTrace
HashSet.new while ( ) { if ( Set<String>.add ) { } }
for ( ) { if ( Entry<Integer,Integer>.getValue ) { Entry<Integer,Integer>.getKey Entry<Integer,Integer>.getValue } }
if ( Node.getParentNode ) { return ( ) }
IllegalArgumentException.new
return ( Queue<Object>.remove )
if ( ) { IndexOutOfBoundsException.new }
if ( ) { IllegalArgumentException.new } for ( ) { if ( X509Certificate.getIssuerX500Principal X509Certificate.getSerialNumber ) { return ( ) } }
X509CRLSelector.new CertificateFactory.getInstance ByteArrayInputStream.new CertificateFactory.generateCertificate X509CRLSelector.setCertificateChecking X509CRLSelector.getCertificateChecking X509CRLSelector.setCertificateChecking X509CRLSelector.getCertificateChecking
Integer.valueOf
Integer.new Integer.new
if ( ) { IllegalStateException.new }
ArrayList.new for ( Vector.iterator ; Iterator.hasNext ; ) { Iterator.next for ( ) { if ( ) { if ( ) { if ( List<String>.contains ) { List<String>.add } } } } }
StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append
Arrays.asList Arrays.asList ZipFile.new ZipFile.getEntry Arrays.asList ZipFile.new ZipFile.getEntry Collections.emptyList
if ( ) { ArrayList<String>.new }
if ( String.equals ) { return ( ) } if ( String.equals ) { return ( ) }
return ( BlockingQueue<Object>.size )
FileOutputStream.new BufferedOutputStream.new OutputStream.write OutputStream.close
while ( InputStream.read ) { } if ( ) { IOException.new }
if ( List<String>.contains ) { return ( ) } List<String>.remove IllegalStateException.new
return ( SocketImpl.getLocalPort InetSocketAddress.new )
BigDecimal.new BigDecimal.new
if ( ) { IllegalArgumentException.new }
Arrays.checkOffsetAndCount if ( ) { BufferOverflowException.new }
Class.getPackage Package.getName String.replace Class.getResource URL.toString
if ( String.equals ) { XMLStreamWriter.writeAttribute } else { XMLStreamWriter.writeAttribute }
return ( Number.longValue )
if ( ) { Map.put }
if ( String.equals ) { if ( String.equals ) { if ( String.equals ) { if ( String.equals ) { if ( ) { Runnable.new } } else { if ( String.equals ) { if ( String.equals ) { } } } } } }
if ( ) { Set<Object>.add }
if ( ) { ResultSet.close }
Calendar.get
if ( String.equals ) { }
Exception.new
CharSequence.length
Date.new
if ( ) { IllegalArgumentException.new }
if ( ) { ArrayList<Object>.new } List<Object>.add
UnsupportedOperationException.new
LinkedHashSet<Object>.new LinkedHashSet<Object>.add LinkedHashSet<Object>.new LinkedHashSet<Object>.add LinkedHashSet<Object>.new
if ( ) { if ( ) { return ( Boolean.booleanValue ) } return ( String.equals ) }
Boolean.valueOf
return ( String.length )
if ( ) { IllegalArgumentException.new }
if ( ) { IllegalArgumentException.new }
List<String>.remove
if ( String.length ) { return ( ) }
if ( ) { if ( ) { Throwable.new } }
ArrayList.new
if ( ) { if ( String.equals String.equals ) { String.format } String.format Integer.toString if ( String.equals ) { } }
if ( List<>.isEmpty ) { return ( ) } for ( List<>.iterator ; Iterator<>.hasNext ; ) { if ( Iterator<>.next ) { return ( ) } }
return ( List<Object>.get )
if ( ) { RuntimeException.new } if ( ) { FileOutputStream.close }
for ( Map<Object,Set<Object>>.entrySet ) { Entry<Object,Set<Object>>.getKey if ( ) { Entry<Object,Set<Object>>.getValue } }
SocketFactory.getDefault
for ( ) { if ( File.exists File.new ) { } }
Map<String,String>.get if ( ) { File.new File.getAbsolutePath return ( ) }
return ( Optional.ofNullable )
ArrayList<Object>.new TreeModel.getRoot TreeModel.getChildCount for ( ; ; ) { TreeModel.getRoot TreeModel.getChild if ( ) { List<Object>.add } }
JTableHeader.getColumnModel TableColumnModel.getColumn TableColumn.getHeaderRenderer if ( ) { JTableHeader.getDefaultRenderer } JTableHeader.getTable TableColumn.getHeaderValue TableCellRenderer.getTableCellRendererComponent return ( AccessibleJTableHeaderCell.new )
for ( ) { if ( ) { if ( ) { ArrayList.new } Collection<Object>.addAll } }
List<Object>.add return ( List<Object>.size )
for ( JToolBar.getComponentCount ; ; ) { JToolBar.getComponent Component.setEnabled } if ( ) { JToolBar.setEnabled }
List<Object>.addAll
if ( String.contains ) { return ( String.lastIndexOf String.substring ) }
StringBuilder.new return ( StringBuilder.toString )
if ( ) { List<Object>.add }
LinkedList<Object>.add
if ( ) { for ( ) { Map<String,JPanel>.get JTabbedPane.addTab } } else { for ( ) { Map<String,JPanel>.get JTabbedPane.remove } }
StringBuilder.new for ( ) { if ( ) { StringBuilder.append } } return ( StringBuilder.toString )
if ( ) { IllegalArgumentException.new } while ( ) { Reader.read }
String.length String.length return ( String.regionMatches )
if ( ) { ArrayList<String>.new }
if ( ) { PrintStream.println }
if ( List<String>.size ) { if ( List<String>.size ) { IllegalArgumentException.new } } if ( List<String>.size ) { for ( ; List<String>.size ; ) { List<String>.get } } if ( List<String>.size ) { } if ( String.startsWith ) { StringBuilder.new List<String>.get StringBuilder.insert StringBuilder.toString }
if ( ) { if ( String.length ) { } }
if ( ) { Integer.valueOf }
Pattern.matcher if ( Matcher.matches ) { Matcher.group Integer.parseInt }
if ( String.length String.length ) { return ( String.compareTo ) } String.length String.substring return ( String.compareTo ) Comparator<Object>.new Collections.binarySearch ArrayList<Object>.new while ( List<Object>.get String.toLowerCase ) { } if ( ) { while ( List<Object>.size List<Object>.get String.toLowerCase ) { } } return ( List<Object>.subList )
Element.getAttributeNodeNS if ( ) { return ( Attr.getNodeValue ) } for ( Element.getParentNode ; ; Node.getParentNode ) { if ( Node.getNodeType ) { Element.getAttributeNodeNS if ( ) { return ( Attr.getNodeValue ) } } }
Math.sin Math.cos Math.sin Math.sqrt Math.sqrt
if ( ) { if ( ) { IllegalArgumentException.new } }
if ( ) { if ( ) { Stack<String>.new StringBuffer.new while ( ) { Stack<String>.push } while ( Stack<String>.empty ) { Stack<String>.pop StringBuffer.append } StringBuffer.append StringBuffer.toString } }
if ( SOAPMessage.getProperty ) { SOAPMessage.getProperty Object.toString }
InetAddress.getByName ByteBuffer.wrap
ArrayList<Object>.new if ( ) { for ( ) { List<Object>.add } } ArrayList<Object>.new if ( ) { for ( ) { List<Object>.add } }
System.arraycopy
IllegalArgumentException.new IllegalArgumentException.new
return ( Integer.intValue )
ThreadLocal<ByteBuffer>.get if ( ByteBuffer.capacity ) { ByteBuffer.allocateDirect ByteOrder.nativeOrder ByteBuffer.order ThreadLocal<ByteBuffer>.set } ByteBuffer.rewind ByteBuffer.put ByteBuffer.put Lock.lock Lock.unlock BigInteger.new BigInteger.intValue BigInteger.new BigInteger.intValue
if ( ) { NoSuchElementException.new }
if ( ) { Integer.toString }
List<Object>.size for ( ; ; ) { List<Object>.get if ( ) { while ( List<Object>.get ) { } while ( List<Object>.get ) { } } } for ( ; ; ) { List<Object>.get if ( String.equals ) { continue } }
if ( ) { if ( ) { Writer.flush } else { OutputStream.flush } ErrorManager.error }
if ( String.equalsIgnoreCase ) { if ( String.equalsIgnoreCase String.equalsIgnoreCase ) { if ( String.equalsIgnoreCase String.equalsIgnoreCase ) { if ( String.equalsIgnoreCase String.equalsIgnoreCase ) { return ( ) } } } }
Map<String,Object>.put
HashMap<String,Set<String>>.new ArrayList<URI>.new for ( ) { if ( Map<String,Set<String>>.containsKey ) { HashSet<String>.new Map<String,Set<String>>.put } Map<String,Set<String>>.get }
return ( String.format )
DualPivotQuicksort.sort
URL.new
return ( return ( ) return ( ) AbstractList<Object>.new )
Switch ( ) { case : Math.min break }
AtomicInteger.incrementAndGet Object.notifyAll
for ( ) { if ( String.contains ) { for ( String.split ) { if ( String.trim String.isEmpty ) { String.trim } } } else { if ( String.isEmpty ) { } } }
if ( Map<String,Long>.keySet Set.containsAll ) { } Map<String,Long>.clear for ( ) { Map<String,Long>.put }
CharArrayWriter.new PrintWriter.new PrintWriter.print CharArrayWriter.toString for ( String.length ; ; ) { PrintWriter.print } PrintWriter.print
if ( ) { Integer.valueOf }
for ( ) { Arrays.asList Collections.max return ( ) }
Logger.getLogger Logger.addHandler Logger.setLevel Logger.getLogger Logger.setLevel Exception.printStackTrace
for ( ; ; ) { AtomicInteger.get if ( ) { BlockingQueue<Runnable>.isEmpty if ( AtomicInteger.get ) { continue } } if ( ) { if ( AtomicInteger.compareAndSet ) { return ( ) } } BlockingQueue<Runnable>.poll BlockingQueue<Runnable>.take }
return ( JAXBElement<Object>.new )
ArrayList.new while ( ) { ArrayList<Object<Object>>.add }
if ( ) { LinkedHashMap<String,Object>.new Collections.synchronizedMap }
HashMap<String,Object>.new
DataInputStream.readInt
return ( Integer.intValue )
if ( ) { ReentrantLock.isHeldByCurrentThread }
ReentrantReadWriteLock.readLock ReadLock.lock ReentrantReadWriteLock.readLock ReadLock.unlock
Math.rint
Graphics.getColor JComponent.getInsets JComponent.getBounds Rectangle.new SwingUtilities.calculateInnerArea JComponent.getBackground Graphics.setColor Graphics.fillRect JComponent.getForeground Graphics.setColor Graphics.fillRect if ( JProgressBar.isStringPainted JProgressBar.getString String.equals ) { } Graphics.setColor
for ( ; ; ) { BigDecimal.subtract } if ( BigDecimal.compareTo ) { }
return ( List<Object>.isEmpty )
if ( ) { if ( ) { if ( ) { HashMap.remove if ( HashMap.size ) { } } } else { if ( ) { if ( ) { HashMap.new } else { HashMap.get } HashMap.put } else { if ( ) { HashMap.get } } } }
Connection.createStatement Statement.executeQuery ResultSet.next ResultSet.getString String.lastIndexOf if ( ) { String.substring } ResultSet.close
if ( ) { PrintStream.println }
DriverManager.getConnection Connection.unwrap Connection.createStatement Statement.executeQuery
StringBuilder.new StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append return ( StringBuilder.toString )
if ( ) { IllegalArgumentException.new } if ( ) { NullPointerException.new } Engine.getInstance return ( KeyAgreement.new )
HashMap.new
BufferedImage.getRaster WritableRaster.getNumBands if ( ) { WritableRaster.getWidth WritableRaster.getHeight WritableRaster.getPixels for ( ; ; ) { Color.RGBtoHSB } }
if ( ) { ThreadLocal<Object>.set Random.nextInt }
if ( ) { IOException.getMessage }
return ( Math.sqrt )
if ( ) { Integer.valueOf }
if ( ) { String.valueOf IllegalArgumentException.new }
if ( ) { Thread.currentThread Thread.getId Thread.currentThread Thread.getName } if ( ) { Timer.new Timer.schedule return ( ) }
return ( String.valueOf )
Switch ( ) { case : if ( ) { List.toArray } break } Exception.getMessage
if ( ) { Connection.close }
return ( List<Object>.stream Stream.map )
RuntimeException.new
if ( ) { StringBuilder.new } else { StringBuilder.new } if ( ) { if ( ) { StringBuilder.append } } StringBuilder.append return ( StringBuilder.toString )
Desktop.getDesktop URL.new URL.toURI Desktop.browse
if ( ) { Constructor<>.toGenericString String.format }
ConcurrentHashMap<Object,Object>.put
if ( Math.abs ) { return ( ) }
System.identityHashCode
if ( ) { NullPointerException.new }
NetworkInterface.getClass Class.getMethod return ( Method.invoke )
if ( ) { Integer.valueOf }
return ( String.valueOf ) Function<Object,String>.new return ( return ( ) Callable<String>.new )
Class.forName Class<>.getMethod Method.invoke Method.invoke Class<>.getMethod Method.invoke Method.invoke Class<>.getMethod Method.invoke Exception.printStackTrace
PrintStream.println
JRootPane.setDefaultButton
List<Object>.size HashMap<Object,Object>.new for ( ; List<Object>.size ; ) { List<Object>.get Map<Object,Object>.put }
Class.getClassLoader ClassLoader.getResource ImageIcon.new
Class.getName
while ( ) { List<Object>.get }
for ( ; ; ) { if ( String.equals ) { if ( ) { Object.toString } } else { if ( String.equals ) { } } StringBuilder.append StringBuilder.append } StringBuilder.append ByteArrayOutputStream.new PrintStream.new Exception.printStackTrace ByteArrayOutputStream.toString
if ( ReentrantLock.isHeldByCurrentThread ) { IllegalMonitorStateException.new }
if ( URI.toString URI.toString String.equals ) { } if ( Set<URI>.contains ) { }
Class<>.getClassLoader
if ( ) { IllegalArgumentException.new }
return ( Set<String>.isEmpty )
NodeList.getLength ArrayList.new for ( ; NodeList.getLength ; ) { NodeList.item List<Node>.add }
if ( ) { IndexOutOfBoundsException.new } System.arraycopy
ByteArrayOutputStream.new DataOutputStream.new System.currentTimeMillis DataOutputStream.writeLong System.nanoTime DataOutputStream.writeLong Process.myPid DataOutputStream.writeInt Process.myUid DataOutputStream.writeInt DataOutputStream.write DataOutputStream.close return ( ByteArrayOutputStream.toByteArray ) SecurityException.new
return ( String.lastIndexOf String.substring )
if ( String.equals ) { return ( ) }
if ( ) { IllegalArgumentException.new }
ArrayList<Object>.size for ( ; ; ) { ArrayList<Object>.get } ArrayList<Object>.size for ( ; ; ) { ArrayList<Object>.get if ( ) { if ( ) { ArrayList<Object>.remove } return ( ) } }
if ( List<Object>.isEmpty ) { Logger.finer Logger.finer } if ( List<Object>.isEmpty ) { Logger.finer List<Object>.add return ( ) }
Dimension.getHeight Dimension.getWidth for ( ; ; ) { Point2D.getX Point2D.getY } for ( ; ; ) { Point2D.getX Point2D.getY Point2D.setLocation }
if ( Collection<Object>.size ) { IllegalArgumentException.new } ByteArrayOutputStream.new ByteArrayOutputStream.flush ByteArrayOutputStream.toString String.length Writer.write
if ( ) { IllegalStateException.new } if ( ) { IllegalStateException.new }
HashMap<String,Map<String,Object>>.new while ( Set<String>.isEmpty ) { Set<String>.iterator Iterator.next String.indexOf if ( ) { Set<String>.remove continue } String.substring Map<String,Map<String,Object>>.get if ( ) { HashMap<String,Object>.new } String.indexOf String.length String.lastIndexOf String.substring Map<String,Object>.put Map<String,Map<String,Object>>.put }
FloatBuffer.remaining Math.min FloatBuffer.position for ( ; ; ) { FloatBuffer.get return ( ) } return ( FloatBuffer.remaining )
System.arraycopy System.arraycopy Arrays.fill
ByteArrayOutputStream.new ByteArrayOutputStream.flush ByteArrayOutputStream.toString
if ( ) { RuntimeException.new if ( ) { RuntimeException.new } } ArrayList<Object>.add
BigInteger.compareTo
if ( JRadioButton.isSelected ) { if ( JTextField.getInputVerifier InputVerifier.verify ) { JTextField.requestFocusInWindow return ( ) } JTextField.getText Double.parseDouble } else { if ( JTextField.getInputVerifier InputVerifier.verify ) { JTextField.requestFocusInWindow return ( ) } JTextField.getText Double.parseDouble }
HashMap.new HashMap<String,String>.put
return ( AtomicBoolean.get )
Switch ( ) { case : Math.round break default : IllegalArgumentException.new }
System.currentTimeMillis while ( ) { System.currentTimeMillis Thread.join break } if ( ) { Thread.currentThread Thread.interrupt } Thread.isAlive
IOException.getMessage
return ( ArrayList<Object>.new )
LinkedHashMap<Object,Object>.new for ( ) { if ( ) { Map<Object,Object>.put } } for ( ) { Map<Object,Object>.get Map<Object,Object>.get List<Object>.add } return ( Map<Object,Object>.values ArrayList<Object>.new )
return ( CharacterData.of CharacterData.isOtherUppercase )
List<Object>.add
if ( String.equals ) { } StringReader.new File.delete PrintWriter.print PrintWriter.print PrintWriter.print
for ( ; ; ) { Locale.getDefault String.format Locale.getDefault String.format Locale.getDefault String.format Locale.getDefault String.format Locale.getDefault String.format }
List<String>.stream Stream.map Collectors.toList Stream.collect List<String>.size Object.toArray
StringBuilder.new if ( ) { for ( ) { StringBuilder.append StringBuilder.append } } return ( StringBuilder.toString )
InputStream.close
return ( Map<String,String>.get )
BoxLayout.new Container.setLayout Container.add Container.add Container.add
Collection.iterator while ( Iterator.hasNext ) { Iterator.next }
Map.put
JTextField.getText Double.parseDouble JComboBox<Object>.getSelectedItem ActionListener.new JButton.addActionListener JTextField.getText Double.parseDouble JComboBox<Object>.getSelectedItem ActionListener.new JButton.addActionListener
HashMap<String,String>.new AttributeSet.getAttributeNames while ( Enumeration<>.hasMoreElements ) { Enumeration<>.nextElement AttributeSet.getAttribute Object.toString Object.toString HashMap<String,String>.put }
if ( Files.isDirectory ) { return ( ) }
return ( String.replace String.trim )
if ( ) { List<Object>.add } if ( ) { if ( ) { if ( ) { if ( ) { if ( ) { if ( ) { List<Object>.add } } } } } }
List<Object>.clear
Executors.defaultThreadFactory
Integer.valueOf Integer.valueOf Integer[].getClass
if ( ) { if ( ) { Throwable.new } }
ConcurrentHashMap.new
return ( JComboBox<Object>.getSelectedItem )
Date.new Date.getTime
Logger.info
Vector.iterator if ( Iterator.hasNext ) { Iterator.next ListUI.locationToIndex } while ( Iterator.hasNext ) { Iterator.next ListUI.locationToIndex }
if ( List<Object>.size ) { List<Object>.size return ( ) } List<Object>.get
Stack<Object>.push Semaphore.release
if ( ) { IllegalArgumentException.new } else { if ( ) { IllegalArgumentException.new } }
return ( Integer.intValue )
Vector.new Vector.addElement return ( Vector.elements )
while ( Enumeration<String>.hasMoreElements ) { Enumeration<String>.nextElement } Map<String,Object>.put
Map<Integer,Object>.get
return ( Double.toString )
Map<String,String[]>.get
CompletableFuture<Object>.new
UUID.randomUUID
for ( Logger.getLogger Logger.getHandlers ) { if ( ) { Handler.setLevel } }
return ( String.valueOf )
File.delete Thread.sleep
return ( Set<String>.add )
Set<Object>.add
return ( URL.getProtocol String.equals )
Object.notifyAll
Date.new for ( ) { Double.compare Double.compare } PrintStream.println
if ( ) { if ( ) { for ( ) { Math.ceil } } }
String.length ArrayList<String>.new for ( ; ; ) { String.charAt if ( ) { while ( ) { String.charAt } } else { while ( ) { String.charAt } } String.substring ArrayList<String>.add } ArrayList<String>.size for ( ; ; ) { ArrayList<String>.get }
File.getAbsolutePath PrintStream.println InetSocketAddress.new TimeUnit.sleep
if ( ) { StringBuffer.new if ( ) { StringBuffer.append } if ( ) { StringBuffer.append } if ( ) { StringBuffer.append } for ( ; ; ) { if ( ) { StringBuffer.append } } StringBuffer.toString }
Array.getLength ArrayList.new for ( ; ; ) { Array.get ArrayList.add }
for ( ) { String.replace String.replace } return ( Collections.emptyList )
if ( List<String>.isEmpty ) { ArrayList.new Class.getDeclaredMethod Method.setAccessible for ( ) { if ( Method.invoke ) { String.replaceAll String.replaceAll ArrayList<String>.add } } return ( ) } Exception.printStackTrace
Map<String,Object>.clear
if ( ) { IllegalArgumentException.new }
return ( String.equals )
List<Object>.add
return ( ComponentSampleModel.new )
for ( Collection.iterator ; Iterator.hasNext ; ) { Iterator.next String.length Math.max }
MessageFormat.format if ( ) { if ( MessageFormat.format ) { } }
LinkedList<Object>.new List<Object>.add List<Object>.add
if ( ) { IllegalArgumentException.new }
if ( ) { IllegalStateException.new }
if ( ) { Vector.removeElement }
return ( Map<,>.entrySet )
if ( ) { ConcurrentModificationException.new }
Socket.getInputStream BufferedInputStream.new Socket.getOutputStream BufferedOutputStream.new ArrayList<Integer>.new
if ( EnumSet<Object>.contains ) { }
while ( ) { if ( ) { for ( ; ; ) { Float.intBitsToFloat } } else { for ( ; ; ) { Float.intBitsToFloat } } }
if ( ) { OutOfMemoryError.new }
JMenuBar.getMenuCount for ( ; ; ) { if ( JMenuBar.getComponent ) { if ( JMenuBar.getComponent JMenu.getText String.equals ) { } } } JMenu.new JMenuBar.add JMenuItem.new JMenu.add ActionListener.new JMenuItem.addActionListener
BufferedOutputStream.close IOException.printStackTrace
if ( ) { if ( ) { return ( Boolean.booleanValue ) } return ( String.equals ) }
StringBuilder.new for ( ; ; ) { if ( ) { if ( String.length ) { String.indexOf String.substring if ( String.length ) { if ( ) { StringBuilder.append } String.trim StringBuilder.append } } } } return ( StringBuilder.toString )
Set<String>.iterator while ( Iterator.hasNext ) { Iterator.next if ( String.length String.length String.contains String.length String.charAt ) { break } } if ( ) { Iterator.remove }
for ( Map<,>.entrySet ) { }
if ( ) { if ( ) { if ( ) { List<Object<Object>>.add } } }
ArrayList<Future<Object>>.new
if ( ) { IllegalArgumentException.new }
if ( ) { Short.reverseBytes }
for ( ) { if ( Set<Object>.contains ) { } }
List<Object>.add
if ( ) { for ( ; ; ) { if ( ) { String.intern } } }
if ( Map<Object,List<Object>>.containsKey ) { Map<Object,List<Object>>.get if ( List<Object>.size ) { RuntimeException.new } return ( List<Object>.get ) }
Pattern.compile
if ( ) { IllegalArgumentException.new } Map<Object,Object>.get return ( Dimension.new )
if ( ) { IllegalArgumentException.new } Boolean.parseBoolean
while ( Iterator<Object>.hasNext Iterator<Object>.hasNext ) { Iterator<Object>.next Iterator<Object>.next Arrays.asList Collections.max List<Double>.indexOf }
ArrayList<Object>.new ArrayList<Object>.new for ( ) { List<Object>.add } if ( List<Object>.isEmpty ) { Color.new if ( ) { Color.new } else { if ( ) { Color.new } else { if ( ) { Color.new } } } List<Object>.add Map<Object,Object>.put }
String.split
XMLStreamReader.getProperty Boolean.equals
Map<String,Object>.get if ( String.equalsIgnoreCase ) { PrintStream.println } else { PrintStream.println } System.exit
Map<String,String>.put Map<String,String>.put
if ( Map<Integer,Object>.isEmpty ) { Collections.unmodifiableMap }
LinkedList<Object>.new while ( Iterator<Object>.hasNext ) { Iterator<Object>.next LinkedList<Object>.addFirst } LinkedList<Object>.iterator while ( Iterator<Object>.hasNext ) { Iterator<Object>.next }
if ( ) { IllegalStateException.new }
while ( ) { List<Object>.stream }
if ( ) { LinkedList<String>.new for ( String.split ) { List<String>.add } }
if ( ) { Float.parseFloat return ( ) }
ArrayList.new ArrayList.new
Class.getResource Set<Object>.size Set<Object>.size
return ( String[].clone )
while ( Iterator<Object>.hasNext ) { Iterator<Object>.next Object.equals }
ArrayList<Object>.new while ( ) { if ( ) { ArrayList<Object>.add } }
if ( ) { ArrayList.get }
if ( ) { LogManager.getLogManager LogManager.checkAccess } if ( ) { NullPointerException.new } List.remove
Switch ( ) { default : IllegalArgumentException.new }
Math.floor
String.split
RuntimeException.new
StringBuilder.new for ( ; ; ) { String.valueOf StringBuilder.append } StringBuilder.append return ( String.replace )
if ( ) { IllegalStateException.new }
PropertyChangeSupport.firePropertyChange
if ( ) { ConcurrentModificationException.new } if ( ) { NoSuchElementException.new }
ArrayList.new HashMap<String,Object>.keySet List<String>.addAll
Math.max
return ( Integer.valueOf Map<Integer,Object>.get )
return ( Integer.new )
File.new FileWriter.new PrintWriter.new
List<Object>.add
BigInteger.new BigInteger.new BigInteger.add BigInteger.toByteArray BigInteger.signum
if ( ) { IndexOutOfBoundsException.new }
ThreadLocal<Object>.set
if ( ) { IllegalArgumentException.new }
String.new Class.getName DecimalFormat.format DecimalFormat.format DecimalFormat.format DecimalFormat.format DecimalFormat.format DecimalFormat.format DecimalFormat.format
if ( ) { LinkedList<Object>.new return ( ) }
String.format
LinkedHashMap<String,Long>.keySet ArrayList<String>.new Collections.sort StringBuilder.new for ( ) { LinkedHashMap<String,Long>.get StringBuilder.append } return ( StringBuilder.toString )
if ( ) { List<Object>.remove }
List<Object>.size for ( ; ; ) { List<Object>.get return ( ) }
if ( ) { NullPointerException.new } TreeMap<Object,Object>.get if ( ) { IllegalArgumentException.new }
Objects.requireNonNull return ( Map<String,Object>.get )
JLabel.setText JLabel.setIcon if ( ) { JLabel.setText } else { if ( ) { JLabel.setText } else { if ( ) { JLabel.setText } else { if ( ) { JLabel.setText } else { JLabel.setIcon ImageIcon.getIconWidth ImageIcon.getIconHeight JLabel.setText } } } }
Map<Class,Object>.get if ( ) { Class<Object>.getConstructor Constructor<Object>.setAccessible Map<Class,Object>.put }
if ( ) { IndexOutOfBoundsException.new } while ( ) { if ( ) { return ( Long.numberOfTrailingZeros ) } }
if ( ) { Long.valueOf }
return ( Sync.getQueueLength )
InputStream.close
ByteBuffer.position
Locale.getDefault
return ( return ( ) return ( Iterable<Object>.toString ) )
if ( ) { ArrayList<Object>.new ArrayList<Object>.new return ( ) }
Component.getX Spring.constant Component.getY Spring.constant Spring.width Spring.height
return ( Integer.intValue )
LinkedHashMap<String,Object>.put
Executors.defaultThreadFactory
if ( ) { IllegalStateException.new } if ( ) { IllegalStateException.new } Executors.defaultThreadFactory ThreadFactory.newThread Thread.setDaemon Thread.setName Thread.start
Map<Object,Map<Object,Object>>.get if ( ) { HashMap<Object,Object>.new Map<Object,Map<Object,Object>>.put }
if ( ) { if ( HashSet<Integer>.contains ) { } HashSet<Integer>.add return ( ) } String.new if ( String.length ) { }
return ( Class.getName )
if ( ) { HashMap<String,List<Object>>.new } else { Map<String,List<Object>>.keySet } List<Object>.iterator ArrayList<String>.new while ( Iterator<Object>.hasNext ) { Iterator<Object>.next if ( Map<String,List<Object>>.containsKey ) { Iterator<Object>.remove } else { List<String>.add } } if ( List<Object>.isEmpty ) { Map<String,List<Object>>.putAll }
if ( ) { return ( Name.append ) }
Objects.requireNonNull AtomicLong.getAndIncrement
Map<Object,Object>.put
Stack.push
return ( Math.max Math.min )
ArrayList<Object>.new for ( ; ; ) { if ( String.endsWith ) { ArrayList<Object>.add } }
if ( ) { IllegalArgumentException.new } if ( String.isEmpty ) { IllegalArgumentException.new }
PrintStream.print return ( Scanner.nextInt )
return ( Collection<Object>.size )
return ( Collection<Object>.isEmpty )
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new }
return ( SecretKeyFactorySpi.engineTranslateKey )
JTextComponent.scrollRectToVisible
String.length for ( ; ; ) { String.charAt }
HashMap<Object,Object>.clear
Executor.new
if ( ) { if ( ) { if ( ) { if ( ) { if ( ) { if ( ) { if ( ) { if ( ) { RuntimeException.new } } } } } } } }
Connection.createStatement Statement.executeQuery return ( ResultSet.getMetaData ) ResultSet.close Statement.close
return ( Field.get )
Switch ( ) { default : IllegalArgumentException.new }
return ( List<Object>.get )
if ( ) { NullPointerException.new }
if ( ) { if ( ) { if ( ) { if ( ) { if ( ) { if ( ) { return ( BigInteger.new ) } else { if ( ) { return ( BigDecimal.new ) } } } } } } }
if ( ) { if ( ) { if ( ) { if ( ) { System.arraycopy } } } }
Closeable.close if ( ) { Logger.log }
return ( ArrayList<String>.size )
return ( Integer.intValue )
Random.new Random.new for ( ; ; ) { Random.nextInt Random.nextInt }
HashMap.new
List<Object>.get IllegalArgumentException.new
return ( Integer.intValue )
DocumentBuilderFactory.newInstance DocumentBuilderFactory.newDocumentBuilder URL.openConnection HttpURLConnection.getResponseCode if ( ) { HttpURLConnection.getInputStream DocumentBuilder.parse return ( ) SAXException.getMessage SAXException.printStackTrace } Exception.getMessage Exception.printStackTrace
List<Object>.get if ( ) { List<>.get for ( ; ; ) { List<>.get List<Object>.add } }
return ( Integer.intValue )
XMLStreamWriter.getPrefix if ( ) { while ( XMLStreamWriter.getNamespaceContext NamespaceContext.getNamespaceURI ) { } XMLStreamWriter.writeNamespace XMLStreamWriter.setPrefix }
NavigableMap<Long,Object>.floorEntry if ( ) { return ( Entry<Long,Object>.getValue ) }
Deflater.finish while ( Deflater.finished ) { Deflater.deflate OutputStream.write }
PrintStream.println
File.new if ( File.exists ) { File.mkdirs }
String.split for ( ) { String.split StringBuffer.new for ( ) { if ( StringBuffer.toString ) { StringBuffer.append } else { StringBuffer.length StringBuffer.setLength StringBuffer.toString StringBuffer.new } } if ( StringBuffer.length ) { StringBuffer.length StringBuffer.setLength } StringBuffer.toString }
return ( Integer.intValue )
return ( BufferedImage.getWidth BufferedImage.getHeight )
Integer.valueOf
if ( ) { return ( Collections.unmodifiableMap ) }
if ( ) { NullPointerException.new }
if ( ) { return ( Pattern.compile ) } else { if ( ) { return ( Pattern.compile ) } }
BigDecimal.new BigDecimal.subtract if ( BigDecimal.compareTo ) { return ( ) }
return ( Iterator<>.hasNext )
BufferedImage.new GraphicsEnvironment.getLocalGraphicsEnvironment GraphicsEnvironment.createGraphics Graphics.setClip
for ( ) { if ( String.equals ) { } }
ReentrantReadWriteLock.readLock Lock.lock if ( ) { IllegalArgumentException.new } Exception.getMessage Lock.unlock
PrintStream.println
UnsupportedOperationException.new
return ( Math.abs )
Object.getClass if ( ) { Class.getName IllegalArgumentException.new } else { if ( ) { return ( Double.doubleValue ) } else { Class.getName Object.getClass Class.getName IllegalArgumentException.new } }
return ( FileReader.new )
if ( ) { IllegalArgumentException.new }
System.currentTimeMillis while ( System.currentTimeMillis ) { }
if ( Double.isNaN ) { return ( ) }
Exception.getMessage if ( HashMap<String,Object>.containsKey ) { HashMap<String,Object>.get } else { if ( HashMap<String,Object>.containsKey ) { HashMap<String,Object>.get } }
StringBuffer.new String.format StringBuffer.append String.format StringBuffer.append for ( ) { String.format StringBuffer.append } String.format StringBuffer.append StringBuffer.toString
Set<String>.add
Integer.valueOf Integer.valueOf
return ( Component.isShowing Component.getLocationOnScreen )
if ( ) { IndexOutOfBoundsException.new }
if ( ) { if ( ) { if ( ) { if ( String.equals ) { } } if ( String.valueOf ) { return ( ) } if ( String.valueOf String.valueOf ) { return ( ) } if ( String.isEmpty String.isEmpty ) { return ( ) } } }
if ( ) { String.valueOf }
if ( ) { if ( ) { IOException.new } }
if ( ) { ApproveSelectionAction.new }
Integer.valueOf
if ( JTextArea.getParent ) { return ( JTextArea.getText ) } return ( JEditorPane.getText )
return ( Object.toString BigInteger.new )
ArrayList<Object>.get
NavigableMap<Object,NavigableMap<Object,NavigableMap<Object,NavigableMap<Long,Object>>>>.get if ( NavigableMap<Object,NavigableMap<Object,NavigableMap<Long,Object>>>.containsKey ) { return ( ) } if ( NavigableMap<Object,NavigableMap<Object,NavigableMap<Long,Object>>>.get NavigableMap<Object,NavigableMap<Long,Object>>.containsKey ) { return ( ) } return ( NavigableMap<Object,NavigableMap<Object,NavigableMap<Long,Object>>>.get NavigableMap<Object,NavigableMap<Long,Object>>.get NavigableMap<Long,Object>.lastEntry Entry.getValue )
for ( Map<String,ArrayList<Integer>>.keySet ) { Map<String,ArrayList<Integer>>.get ArrayList<Integer>.size ArrayList<Integer>.toArray Arrays.sort ArrayList<Integer>.clear for ( ) { ArrayList<Integer>.add } Map<String,ArrayList<Integer>>.put }
Long.valueOf
LinkedList.new
return ( Locale.getDefault )
if ( String.length ) { } Runnable.new
Integer.intValue Integer.new if ( ) { Integer.intValue } else { Integer.intValue } Exception.getMessage
Date.getTime Date.getTime
for ( ; ; ) { if ( String.equals ) { List<String>.add } else { if ( String.equals ) { if ( String.equals String.equals ) { PrintWriter.println } } } } if ( List<String>.size ) { List<String>.add } if ( ) { SimpleDateFormat.new Date.new SimpleDateFormat.format }
DataSource.getConnection Connection.prepareStatement PreparedStatement.setString PreparedStatement.setString PreparedStatement.setString if ( PreparedStatement.executeUpdate ) { }
if ( Object.equals String.equalsIgnoreCase ) { if ( Object.equals String.equalsIgnoreCase ) { return ( ) } }
if ( ) { Map<String,String>.get Map<String,String>.get Map<String,String>.get }
if ( ) { Exception.new }
HashMap<Object,Object>.clear
UnsupportedOperationException.new
if ( ) { String.new String.getBytes OutputStream.write }
Math.atan Math.sqrt for ( ; ; ) { for ( ; ; ) { if ( ) { for ( ; ; ) { if ( ) { if ( ) { Math.atan Math.sqrt } } } if ( ) { Math.round } } } } Date.new
LinkedHashSet<String>.new for ( ; List<Object>.size ; ) { List<Object>.get for ( ; List<Object>.size ; ) { List<Object>.get if ( ) { LinkedHashSet<String>.add } } }
CPStringBuilder.append CPStringBuilder.append CPStringBuilder.append CPStringBuilder.append for ( ; Iterator.hasNext ; ) { Iterator.next InetAddress.toString CPStringBuilder.append } return ( CPStringBuilder.toString )
Callable<Void>.new
Arrays.asList
return ( InputStreamReader.getEncoding )
DataInputStream.readByte while ( ) { DataInputStream.skipBytes DataInputStream.readByte } DataInputStream.readFully return ( ByteBuffer.wrap )
return ( FutureTask<Object>.isCancelled )
InputStream.read
TreeModel.getRoot TreePath.new
Map.put
Queue<Object>.poll if ( ) { if ( ) { while ( ) { Queue<Object>.add } } } AtomicInteger.incrementAndGet
if ( Collection<Object>.isEmpty ) { return ( ) } if ( ) { Collectors.toList }
StringBuilder.new for ( ) { if ( StringBuilder.length ) { StringBuilder.append } StringBuilder.append } URI.toString HashMap<String,String>.new StringBuilder.toString Map<String,String>.put Map<String,String>.put if ( ) { if ( ) { String.valueOf } }
if ( ) { IllegalArgumentException.new }
return ( Class<>.getSimpleName )
return ( AtomicReference<Object>.get )
if ( ) { NullPointerException.new }
ArrayList.new List<String>.add List<String>.add List<String>.add List<String>.add ProcessBuilder.new ProcessBuilder.redirectErrorStream ProcessBuilder.command String.join ProcessBuilder.start ByteArrayOutputStream.new Process.getInputStream ByteArrayOutputStream.toString String.trim if ( String.startsWith ) { String.lastIndexOf String.substring String.replace String.trim IOException.new } else { DocumentBuilderFactory.newInstance DocumentBuilderFactory.newDocumentBuilder StringReader.new InputSource.new DocumentBuilder.parse }
String.length String.length
Map<String,Object>.get
return ( Matcher.group )
return ( Float.new )
return ( Long.toString )
return ( String.length )
MBeanServerConnection.invoke return ( Boolean.booleanValue )
if ( ) { if ( ) { return ( Boolean.booleanValue ) } return ( String.equals ) }
return ( Math.max )
LinkedList.new if ( ) { for ( ) { File.new File.toURI URI.toURL List<URL>.add URL.toString } }
HashSet<String>.new HashSet<String>.add HashSet<String>.add HashSet<String>.add HashSet<String>.add Map<String,String>.size
PrintStream.println IOException.getMessage PrintStream.println
if ( String.equals ) { }
return ( String.isEmpty )
Collection<Object>.add
Exception.getMessage if ( ) { return ( URI.toString ) }
return ( Collection<Object>.size )
Switch ( ) { case : ComponentListener.componentHidden break case : ComponentListener.componentMoved break case : ComponentListener.componentResized break case : ComponentListener.componentShown break }
return ( Integer.toString Double.toString )
HashMap<String,Object>.new
if ( ) { Integer.toHexString }
PrintStream.printf PrintStream.println for ( ; ; ) { PrintStream.println } PrintStream.printf PrintStream.printf PrintStream.printf
if ( ) { StringBuffer.append for ( ; ; ) { StringBuffer.append } StringBuffer.append } else { for ( ; ; ) { StringBuffer.append for ( ; ; ) { StringBuffer.append } StringBuffer.append } }
StringBuilder.new while ( StringBuilder.length ) { StringBuilder.lastIndexOf if ( ) { StringBuilder.replace String.length } else { StringBuilder.insert String.length } } StringBuilder.insert return ( StringBuilder.toString )
if ( ) { NullPointerException.new } ArrayList<Object>.add
StringBuilder.new for ( ) { if ( ) { StringBuilder.append System.getProperty StringBuilder.append } } return ( StringBuilder.toString )
if ( ) { NullPointerException.new }
Math.atan2
return ( Reader.markSupported )
PrintStream.println PrintStream.println PrintStream.println
UUID.randomUUID UUID.toString
List<Object>.add
for ( ) { if ( String.contains ) { return ( ) } }
List<Object>.add
Thread.currentThread if ( ) { CancellationException.new } if ( ) { ExecutionException.new }
if ( ) { Locale.getDefault Locale.setDefault Locale.setDefault }
if ( ) { return ( Collections.unmodifiableSortedSet ) } else { if ( ) { return ( Collections.unmodifiableSet ) } else { if ( ) { return ( Collections.unmodifiableList ) } } } return ( Collections.unmodifiableCollection )
return ( HttpURLConnection.getHeaderField )
return ( Integer.intValue )
List<Object>.get List<Object>.get List<Object>.set List<Object>.set
if ( Float.floatToIntBits ) { return ( ) }
if ( ) { NoSuchElementException.new } return ( List.get )
if ( ) { NullPointerException.new } OutputStreamWriter.new
if ( ) { return ( String.length ) }
for ( ; ; ) { if ( ) { RuntimeException.new } }
while ( Iterator<Object>.hasNext ) { Iterator<Object>.next if ( ) { Iterator<Object>.remove } }
if ( ) { LinkedList.new } if ( ) { while ( Iterator<Object>.hasNext ) { Iterator<Object>.next Iterator<Object>.next } } else { LinkedList.new }
if ( Map<String,Object>.get ) { if ( Map<String,Object>.get ) { Map<String,Object>.get } Map<String,Object>.get }
Switch ( ) { case : Map<Object,Map<Long,Object>>.get if ( ) { FileChannel.close return ( ) } ByteBuffer.wrap FileChannel.write return ( ) } ByteBuffer.wrap
Exception.getMessage PrintStream.println
ArrayList<Object>.new if ( ) { URI.create } for ( ; ; ) { List<Object>.add } List<Object>.addAll
return ( Math.round )
for ( ) { if ( String.equals ) { return ( ) } } if ( ) { if ( File.isFile ) { if ( File.isDirectory ) { File.listFiles return ( ) } } }
if ( ) { NullPointerException.new }
JTextField.getText String.equalsIgnoreCase JTextField.getText
for ( ) { if ( String.equals ) { String.split UUID.fromString Map<String,UUID>.put } }
return ( Long.toString )
return ( SocketChannel.socket )
Map<Object,Object>.get
Objects.requireNonNull
ObjectStreamClass.getField if ( ) { IllegalArgumentException.new } return ( ObjectStreamField.getOffset )
ArrayList<Object>.new while ( ) { Switch ( ) { case : if ( ) { while ( ) { Collection<Object>.add } break } } }
return ( CopyOnWriteArrayList<Object>.removeAll )
return ( String.length )
ArrayList<Object>.new for ( ) { if ( ) { ArrayList<Object>.add } else { if ( ) { ArrayList<Object>.addAll } } } if ( ArrayList<Object>.contains ArrayList<Object>.contains ) { return ( ) }
if ( ) { if ( ) { Number.longValue } for ( ; ; ) { if ( System.currentTimeMillis ) { continue } } }
return ( Properties.getProperty Integer.parseInt )
if ( ) { IllegalArgumentException.new }
if ( ) { Map<Integer,Object>.clear Map<Integer,Object>.clear }
if ( ) { IllegalArgumentException.new }
Properties.new
return ( List.getSelectedItem )
ConcurrentHashMap.new
return ( Map<String,Object>.remove )
if ( ByteBuffer.remaining ) { return ( ) } if ( ByteBuffer.isDirect ) { ByteBuffer.position } else { ByteBuffer.position } if ( ) { ByteBuffer.position ByteBuffer.position }
QName.getNamespaceURI if ( ) { XMLStreamWriter.getPrefix if ( ) { XMLStreamWriter.writeNamespace XMLStreamWriter.setPrefix } if ( String.trim String.length ) { XMLStreamWriter.writeCharacters } else { XMLStreamWriter.writeCharacters } } else { XMLStreamWriter.writeCharacters }
OutputStreamWriter.new Writer.write
return ( Map<String,Object>.hashCode )
return ( Collection<Object>.size )
if ( String.equals ) { } System.currentTimeMillis System.currentTimeMillis
IllegalArgumentException.new
EventListenerList.add
HashSet<Object>.new Set<Object>.retainAll
if ( String.indexOf ) { return ( ) }
return ( Map<String,String>.get )
Switch ( ) { case : if ( ) { UnsupportedOperationException.new } return ( ) default : IllegalArgumentException.new }
return ( String.indexOf )
if ( ) { if ( String.trim String.equals ) { PrintStream.println return ( ) } } if ( ) { File.getAbsolutePath }
if ( Thread.interrupted ) { return ( ) }
RuntimeException.new
if ( String.length ) { IllegalArgumentException.new } for ( ) { CertStore.getCertificates if ( Collection<>.size ) { Collection<>.iterator Iterator.next if ( ) { if ( ) { ArrayList<Object>.new } Collection<Object>.add } } } if ( ) { return ( Collections.emptyList ) }
System.identityHashCode
File.isFile return ( File.getCanonicalPath )
ProcessBuilder.new ProcessBuilder.new ProcessBuilder.new ByteArrayOutputStream.new ByteArrayOutputStream.toByteArray for ( ) { Arrays.copyOf ByteArrayOutputStream.reset ByteArrayInputStream.new ByteArrayOutputStream.toByteArray }
return ( Pattern.quote String.matches )
for ( ; ; ) { HashMap<String,Object>.put }
ArrayList<Object>.get
Locale.getDefault Calendar.getInstance Calendar.get Calendar.get Calendar.get
HashSet.new if ( Map<Object,String>.get Map<Object,String>.get ) { Set<Object>.add }
if ( ) { LockSupport.unpark }
PrintWriter.new
return ( Collections.unmodifiableSet )
ByteArrayOutputStream.new ByteArrayOutputStream.toByteArray for ( ; ; ) { ByteArrayOutputStream.new ByteArrayOutputStream.toByteArray }
MARSHAL.new
return ( IllegalStateException.new IllegalStateException.new )
return ( Math.abs )
if ( ) { IOException.getMessage }
if ( ) { PrintStream.println }
LinkedBlockingDeque.new for ( ; ; ) { for ( ; ; ) { Integer.new LinkedBlockingDeque.offer } ArrayList.new LinkedBlockingDeque.drainTo ArrayList.size LinkedBlockingDeque.size for ( ; ; ) { ArrayList.get Integer.new } while ( LinkedBlockingDeque.poll ) { } }
while ( ) { while ( ) { if ( ) { CharSequence.charAt } else { if ( ) { if ( ) { CharSequence.charAt } } } } }
return ( List<Object>.get )
GregorianCalendar.new
HashMap.new Map<String,Object>.putAll
return ( Map<Object,String>.get )
if ( List<Object>.size ) { return ( ) } return ( List<Object>.subList ArrayList.new )
return ( Optional.ofNullable )
return ( Integer.intValue )
return ( return ( Enumeration<Object>.hasMoreElements ) return ( Enumeration<Object>.nextElement ) )
Class.getDeclaredMethods HashSet.new for ( ) { Method.getName Set.add } Long.new Set.remove Set.remove Set.remove String.lastIndexOf String.substring Set.remove Set.remove Set.remove Set.remove Set.remove Integer.new if ( ) { Integer.new } Set.remove if ( ) { Float.new } else { Float.new } for ( ) { Set.remove } Set.remove Set.remove Set.remove Set.remove Set.remove
for ( ) { do { break String.format if ( Iterator<String>.hasNext ) { Iterator<String>.next } } while ( ) ; if ( ) { List<URI>.add } }
StringBuilder.append
return ( JAXBElement<Object>.new )
for ( ) { if ( ) { if ( ) { List<Object>.get Object.toString } } }
if ( ) { IllegalArgumentException.new } HashMap<String,Package>.put
if ( ) { NullPointerException.new } ArrayList<Object>.remove
Map<Object,Object>.clear
if ( Map<String,String>.containsKey ) { } Map<String,String>.put
if ( ) { Integer.valueOf }
Double.new if ( ) { Double.setFrame } else { Double.setFrame }
return ( URI.getAuthority )
String.trim String.toUpperCase if ( String.equals ) { if ( String.equals ) { if ( String.equals ) { } } }
HashSet.new for ( HashMap.values ) { if ( ) { if ( ) { for ( ) { Entry.getValue Set<Object>.add } } } else { if ( ) { Set<Object>.add Set<Object>.addAll } } }
Calendar.set if ( Calendar.get ) { Calendar.set }
ArrayList<Object>.get Rectangle.new ArrayList<Object>.new while ( ArrayList<Object>.isEmpty ) { ArrayList<Object>.remove ArrayList.new ArrayList<Object>.add for ( ArrayList<Object>.iterator ; Iterator<Object>.hasNext ; ) { Iterator<Object>.next if ( ) { if ( ArrayList<Object>.contains ) { ArrayList<Object>.add } Iterator<Object>.remove } } ArrayList<Object>.size ArrayList<Object>.toArray Arrays.sort }
InetAddress.getAddress
Runnable.new
ReentrantReadWriteLock.readLock Lock.lock ByteBuffer.position System.nanoTime ByteBuffer.limit System.nanoTime AtomicReference<Object>.get RuntimeException.new ByteBuffer.position Lock.unlock
Integer.intValue Integer.intValue Boolean.booleanValue if ( ) { if ( ) { HashMap.new for ( ; ; ) { if ( ) { if ( ) { Integer.new HashMap.put } } } } }
return ( Integer.intValue )
if ( ) { IllegalArgumentException.new }
Vector.removeAllElements
ArrayList<Object>.size for ( ; ; ) { ArrayList<Object>.get if ( ) { if ( ) { if ( ) { HashMap<String,Object>.new } HashMap<String,Object>.put } } }
Collator.compare Collator.getCollationKey Collator.getCollationKey CollationKey.compareTo Integer.signum Integer.signum
File.getAbsolutePath File.new File.getAbsolutePath File.new
ByteArrayOutputStream.new GZIPOutputStream.new String.getBytes GZIPOutputStream.write IOException.printStackTrace if ( ) { GZIPOutputStream.close } return ( ByteArrayOutputStream.toByteArray )
if ( ) { ArithmeticException.new }
if ( String.isEmpty ) { IllegalStateException.new } if ( ) { IllegalStateException.new } if ( ) { IOException.new } String.split for ( ) { if ( ) { IOException.new } } if ( ) { IOException.new } ByteArrayOutputStream.new ByteArrayOutputStream.toByteArray Writer.close if ( ) { IOException.new }
if ( ) { PrintStream.println }
for ( ArrayList<Object>.new ) { }
ArrayList.new for ( ) { if ( ) { List<Object>.add } }
Runtime.getRuntime Runtime.exit
List<Object>.isEmpty
PrintStream.println
if ( ) { Statement.close }
Insets.new
Console.new Console.setVisible
return ( return ( ) Callable<Float>.new )
Switch ( ) { case : RuntimeException.new break }
if ( BlockingQueue<Object>.offer ) { }
Mac.getInstance Mac.getInstance SecretKeySpec.new Mac.init return ( Mac.doFinal )
if ( ) { RuntimeException.new }
LinkedList.new
List<Provider>.size List<Provider>.add Provider.getName Map<String,Provider>.put
return ( StringBuilder.new StringBuilder.append )
Map<Class,Object>.put Map<String,Object>.put
Arrays.sort TableModel.getRowCount for ( ; ; ) { if ( ) { System.arraycopy return ( ) } }
Paths.get if ( Files.exists ) { Files.createDirectory } if ( Files.exists ) { return ( ) } SimpleDateFormat.new Files.getLastModifiedTime DateFormat.format Path.getFileName Path.resolve if ( Files.exists ) { Path.getFileName Path.toString } IOException.getMessage
ThreadLocal.get if ( ) { ThreadLocal.set }
for ( LinkedHashMap<String,Object>.values ) { }
for ( ; ; ) { Integer.toString } String.length String.substring for ( ; ; ) { Integer.toString } String.length String.substring
List<Object>.size for ( ; List<Object>.size ; ) { List<Object>.get }
EnumSet.noneOf
for ( ; ; ) { if ( Predicate<Object>.test ) { return ( ) } Thread.sleep } RuntimeException.new
ArrayIndexOutOfBoundsException.new
if ( ) { List<Object>.remove }
File.delete File.getAbsolutePath File.getAbsolutePath
Integer.valueOf
List<Object>.add
Switch ( ) { case : if ( ) { if ( ) { Runnable.new } } return ( ) } Runnable.new
Class<Object>.getName
return ( Double.compare )
Collection<Object>.iterator while ( Iterator<Object>.hasNext ) { Iterator<Object>.next Iterator<Object>.remove }
Set<Object>.add
Boolean.valueOf
if ( String.equalsIgnoreCase ) { if ( String.equalsIgnoreCase ) { if ( String.equalsIgnoreCase ) { } } }
Point2D.getY Point2D.getX Point2D.getY Point2D.getX Point2D.getY Point2D.getX Math.max Double.new Double.new Point2D.getY Point2D.getY Math.abs Point2D.getX Point2D.getX Math.abs if ( ) { BufferedImage.new }
List<Object>.add
AtomicLong.new
List<Object>.size List<Object>.size if ( ) { List<Object>.clear List<Object>.addAll List<Object>.forEach List<Object>.forEach }
return ( HashSet<Object>.new )
ArrayList<Object>.new HashMap<Object,List<Object>>.new Map<Object,List<Object>>.remove Map<Object,List<Object>>.remove Map<Object,List<Object>>.values for ( ) { List<Object>.addAll } if ( List<Object>.isEmpty ) { StringBuilder.new StringBuilder.append List<Object>.size Integer.valueOf StringBuilder.append List<Object>.size StringBuilder.append StringBuilder.toString }
List<Object>.remove
if ( Double.isNaN ) { if ( Double.isNaN Double.isNaN ) { } }
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } if ( ColorModel.isCompatibleSampleModel ) { IllegalArgumentException.new }
Frame.new FileDialog.new FileDialog.show FileDialog.getFile if ( ) { FileDialog.getDirectory }
Vector<Object>.elementAt
Class<>.getModifiers Modifier.isFinal Class<>.getDeclaredConstructors Class<>.getDeclaredConstructor if ( Constructor<>.isAccessible Constructor<>.getModifiers Modifier.isPrivate ) { } Constructor<>.setAccessible Constructor<>.newInstance Constructor<>.setAccessible for ( Class<>.getMethods ) { if ( Method.getModifiers Modifier.isStatic Method.getDeclaringClass Class.equals ) { } }
return ( ArrayList.new )
Exception.toString
StringBuffer.new for ( ; ; ) { do { if ( ) { StringBuffer.append } else { StringBuffer.append } } while ( ) ; } return ( StringBuffer.toString )
ArrayList.new List<Object>.addAll ArrayList.new List<Object>.addAll ArrayList.new List<String>.addAll ArrayList.new List<Object>.addAll List<Object>.size Comparator.comparingInt List<Object>.stream Collectors.toList Collections.max
FileOutputStream.new BufferedOutputStream.new OutputStreamWriter.new
if ( List<Object>.isEmpty ) { return ( ) } ArrayList<Object>.new for ( ) { List<Object>.add }
return ( Math.min Math.min Math.min )
System.currentTimeMillis
TreeSet.new for ( ) { SortedSet<Object>.add } for ( ) { SortedSet<Object>.add }
if ( ) { ConcurrentLinkedQueue<Object>.new } ConcurrentLinkedQueue<Object>.add
if ( ) { String.length String.indexOf String.length String.substring if ( String.equals String.equals String.equals String.equals String.equals ) { PrintStream.println } } else { PrintStream.println }
Set<Object>.add
ArrayList.add
if ( ) { ListResourceBundle.getString } if ( ) { ListResourceBundle.getString } if ( ) { MessageFormat.format ListResourceBundle.getString } if ( ) { RuntimeException.new }
Exception.getMessage
for ( ; ; ) { if ( ArrayList<Object>.get ) { return ( ArrayList<Object>.get ) } }
if ( ) { IllegalArgumentException.new } ArrayList.new List<Object>.size List<Object>.size for ( ; ; ) { ArrayList.new for ( ; ; ) { List<Object>.get List<Object>.add } List<List<Object>>.add }
AtomicBoolean.set while ( ) { Thread.sleep return ( ) if ( Thread.currentThread Thread.isInterrupted ) { return ( ) } }
Thread.currentThread Thread.getContextClassLoader Class.forName Class.newInstance
if ( ) { return ( Collections.emptyList ) }
Double.new Rectangle2D.setRect
Thread.interrupt Thread.join
if ( ) { return ( Map.values ) }
if ( ) { Integer.valueOf }
for ( ) { if ( ) { List<Object>.remove return ( ) } }
String.getBytes String.new String.replace String.replace
StringReader.new
File.new if ( File.exists ) { return ( ) } if ( ) { String.valueOf String.new }
return ( return ( Class<>.getName ) )
if ( Desktop.isSupported ) { JTextField.setEnabled JButton.setEnabled } if ( Desktop.isSupported ) { JTextField.setEnabled JButton.setEnabled } if ( Desktop.isSupported ) { JRadioButton.setEnabled } if ( Desktop.isSupported ) { JRadioButton.setEnabled } if ( Desktop.isSupported ) { JRadioButton.setEnabled } if ( JRadioButton.isEnabled JRadioButton.isEnabled JRadioButton.isEnabled ) { JTextField.setEnabled JButton.setEnabled JButton.setEnabled }
if ( ) { if ( ) { Throwable.new } }
if ( ) { Arrays.fill }
ByteArrayOutputStream.new DataOutputStream.new DataOutputStream.writeFloat ByteArrayOutputStream.toByteArray AssertionError.new
if ( ) { Thread.currentThread Thread.getId } if ( ) { RuntimeException.new } if ( ) { RuntimeException.new } if ( ) { RuntimeException.new } WeakReference<Object>.get
String.replaceAll
List<Object>.get List<Object>.get List<Object>.get
return ( String.valueOf )
if ( Object.equals String.equalsIgnoreCase ) { if ( Object.equals String.equalsIgnoreCase ) { return ( ) } }
if ( ) { IndexOutOfBoundsException.new } while ( ) { InputStream.read if ( ) { EOFException.new } }
Map<String,String>.put
if ( ) { RuntimeException.new } if ( ) { RuntimeException.new }
Properties.new Properties.setProperty for ( ; ; ) { ArrayList<Long>.new for ( ; ; ) { ArrayList<Long>.add } } Thread.currentThread Thread.sleep
if ( List<Object>.size ) { List<Object>.get List<Object>.get HashMap<Integer,Object>.put }
while ( Iterator<Object>.hasNext ) { StringBuilder.append Iterator<Object>.next StringBuilder.append StringBuilder.append StringBuilder.append Iterator<String>.next StringBuilder.append StringBuilder.append StringBuilder.append }
LinkedList<Object>.new if ( ) { Map<String,Object>.values List<Object>.addAll } if ( ) { Map<String,Object>.values List<Object>.addAll }
while ( ConcurrentSkipListMap<Long,Object<Object,Object,Object>Object>.putIfAbsent ) { } ConcurrentMap<Object<Object,Object,Object>Object,Object>.merge
for ( ConcurrentHashMap<String,AtomicLong>.values ) { AtomicLong.get }
for ( ; ; ) { if ( ) { StringBuffer.new StringBuffer.append StringBuffer.append StringBuffer.append if ( ) { StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append } StringBuffer.append StringBuffer.append StringTokenizer.new while ( StringTokenizer.hasMoreTokens ) { StringTokenizer.nextToken if ( String.equals ) { } } StringBuffer.toString } }
List<Object>.clear
Vector.removeAllElements JList.setListData
if ( ) { Collections.emptyList }
if ( HashMap<Integer,Double>.containsKey ) { return ( HashMap<Integer,Double>.get ) } if ( HashMap<Integer,Double>.size ) { HashMap<Integer,Double>.put }
if ( ) { return ( DecimalFormat.format ) }
Map<String,Object>.putAll JPanel.setBorder JLabel.getFont Font.getSize BorderFactory.createEmptyBorder JLabel.setBorder
return ( PopupFactory.getSharedInstance JPopupMenu.getInvoker PopupFactory.getPopup )
InetAddress.getLocalHost InetSocketAddress.new Socket.new Socket.connect Object.wait Socket.close
Set<URI>.size if ( Set<URI>.isEmpty ) { return ( ) } ArrayList<Object>.new while ( ) { if ( Set<URI>.contains ) { List<Object>.add if ( List<Object>.size ) { List<Object>.clear } } } List<Object>.size if ( List<Object>.isEmpty ) { }
if ( ) { IllegalArgumentException.new }
Vector<Object>.size Vector<Object>.copyInto
ArrayList<MediaSize>.add
if ( ) { HashMap<String,Object>.new for ( ) { Map<String,Object>.put } for ( ) { if ( String.startsWith ) { } if ( Map<String,Object>.containsKey ) { Map<String,Object>.put Map<String,Object>.get Map<String,Object>.put } } }
PrintWriter.println PrintWriter.flush
if ( ) { Class.getResource ImageIcon.new }
String[].clone
return ( List<String>.get )
if ( JRadioButton.isSelected ) { JTextField.getText Double.parseDouble } else { JTextField.getText Double.parseDouble }
ArrayList.new for ( ) { System.getProperty } return ( List<URL>.size List<URL>.toArray URLClassLoader.new )
UUID.fromString
return ( Package.packageEquals )
String[].clone
for ( Map<Object,Integer>.entrySet ) { Entry<Object,Integer>.getValue Entry<Object,Integer>.getKey Map<Object,Integer>.remove if ( ) { Math.min Math.max } } for ( Map<Object,Integer>.entrySet ) { Entry<Object,Integer>.getValue }
if ( ) { IllegalArgumentException.new }
ObjectStreamClass.getLoadFields ObjectStreamClass.fields
if ( ) { ArrayList<Object>.new }
Logger.log if ( ) { System.getProperty File.new File.getAbsolutePath Logger.log File.getAbsolutePath RuntimeException.new }
if ( ) { IllegalArgumentException.new } for ( ) { if ( ) { IllegalArgumentException.new } } if ( ) { IllegalArgumentException.new }
InputStreamReader.new
MARSHAL.new
Toolkit.getDefaultToolkit Toolkit.getBestCursorSize BufferedImage.new BufferedImage.createGraphics Collections.singletonMap Graphics2D.addRenderingHints Color.new Graphics2D.setColor Graphics2D.fillRect Graphics2D.setColor BasicStroke.new Graphics2D.setStroke Graphics2D.drawLine Graphics2D.drawLine Graphics2D.drawLine Graphics2D.drawLine Graphics2D.drawLine Graphics2D.drawLine Graphics2D.drawLine Graphics2D.drawLine Graphics2D.setColor BasicStroke.new Graphics2D.setStroke Graphics2D.drawLine Graphics2D.drawLine Graphics2D.drawLine Graphics2D.drawLine Graphics2D.drawLine Graphics2D.drawLine Graphics2D.drawLine Graphics2D.drawLine Graphics2D.dispose Toolkit.getDefaultToolkit Point.new Toolkit.createCustomCursor
StringBuffer.new StringBuffer.append AtomicInteger.new if ( ) { StringBuffer.append } else { if ( ) { AtomicInteger.set StringBuffer.append Throwable.toString StringBuffer.append return ( ) AtomicInteger.set } } AtomicInteger.get
if ( ) { IllegalArgumentException.new } if ( ) { if ( ) { return ( Calendar.getTime ) } else { Object.getClass ClassCastException.new } }
if ( HashSet<String>.contains ) { } Switch ( ) { case : DataInputStream.readBoolean return ( ) case : DataInputStream.readLong return ( ) case : DataInputStream.readFloat return ( ) case : DataInputStream.readInt return ( ) case : DataInputStream.readUTF return ( ) }
return ( Map<String,Object>.containsKey HashMap<Object,Object>.containsValue )
if ( ) { InputStream.close }
LookAndFeel.installColorsAndFont LookAndFeel.installBorder JSpinner.getEditor if ( ) { DefaultEditor.getTextField JFormattedTextField.setBorder } JSpinner.setLayout JSpinner.setOpaque
return ( SimpleDateFormat.new HashMap<String,Map<String,String>>.new for ( ) { HashMap<String,String>.new Number.toString Map<String,String>.put SimpleDateFormat.format Map<String,Map<String,String>>.put } for ( ) { SimpleDateFormat.format Map<String,Map<String,String>>.get if ( ) { HashMap<String,String>.new SimpleDateFormat.format Map<String,Map<String,String>>.put } Number.toString Map<String,String>.put } return ( ) )
if ( ) { for ( ) { Entry<String,Object>.getValue if ( ) { Map<String,Object>.put } } } for ( Map<String,Object>.values ) { }
Vector.elements while ( Enumeration.hasMoreElements ) { Enumeration.nextElement if ( Driver.acceptsURL ) { return ( ) } } SQLException.new
List<Object>.size
HashMap.new HashMap.put HashMap.put
if ( ) { IllegalStateException.new }
LinkedList<Long>.new
if ( String.trim String.equalsIgnoreCase ) { if ( String.trim String.equalsIgnoreCase ) { if ( String.trim String.equalsIgnoreCase ) { if ( String.trim String.equalsIgnoreCase ) { if ( String.trim String.equalsIgnoreCase ) { } } } } }
return ( Integer.intValue )
return ( ClassLoader.getResources )
if ( SSLEngineResult.getStatus SSLEngine.getHandshakeStatus ) { } do { ByteBuffer.remaining SSLEngine.unwrap } while ( SSLEngineResult.getStatus ByteBuffer.remaining SSLEngine.getHandshakeStatus ) ; ByteBuffer.flip
Graphics2D.setPaint Graphics2D.setStroke if ( ) { for ( ) { Number.doubleValue Number.doubleValue Number.doubleValue Number.doubleValue GeneralPath.new GeneralPath.moveTo GeneralPath.lineTo Graphics2D.draw } } else { for ( ; ; ) { Number.doubleValue Number.doubleValue Number.doubleValue Number.doubleValue GeneralPath.new GeneralPath.moveTo GeneralPath.lineTo Graphics2D.draw } }
ByteArrayOutputStream.new DataOutputStream.new Exception.printStackTrace return ( ByteArrayOutputStream.toByteArray String.new )
if ( ) { IndexOutOfBoundsException.new }
Constructor.getParameterTypes for ( ; ; ) { Class.getName }
BigInteger.new BigInteger.toByteArray BigInteger.signum
if ( List<CharSequence>.contains ) { List<CharSequence>.add }
if ( ) { NullPointerException.new }
Integer.valueOf
Vector<String>.new while ( ) { Vector<String>.addElement }
Pattern.matcher Matcher.matches return ( Pattern.matcher return ( return ( Matcher.find Matcher.start ) return ( Matcher.end ) ) )
if ( ) { FileNotFoundException.new }
BeanContextChildSupport.firePropertyChange
if ( ) { Map<Integer,Object>.remove } if ( Map<Integer,Object>.isEmpty ) { }
if ( ) { String.valueOf IllegalArgumentException.new }
if ( Class<Object>.isInstance ) { if ( ) { Array.newInstance for ( ) { if ( Class<Object>.isInstance ) { } } return ( ) } }
ArrayList<Object>.new if ( ) { ArrayList<String>.new if ( ) { List<String>.addAll } List<Object>.add for ( ) { URI.create List<Object>.add } }
return ( Date.getTime Date.new )
System.arraycopy
if ( ) { PrintStream.println }
ArrayList<Integer>.new for ( ; ; ) { ArrayList<Integer>.add return ( ) } ArrayList<Integer>.get ArrayList<Integer>.get if ( ) { return ( ArrayList<Integer>.get ) }
ArrayList<Object>.new if ( ) { List<Object>.add } if ( ) { List<Object>.add } UnsupportedEncodingException.printStackTrace
if ( ) { Toolkit.getDefaultToolkit Toolkit.createImage }
Pattern.quote String.split return ( Map<String,Object>.get )
String.indexOf if ( ) { String.substring String.substring } return ( Locale.adjustLanguageCode )
return ( List<String>.get Collections.singletonMap )
Integer.valueOf
if ( ) { NullPointerException.new }
if ( ) { IllegalStateException.new }
if ( ArrayList<Object>.equals ) { return ( ) } ArrayList<Object>.add ArrayList<Object>.size for ( ; ; ) { ArrayList<Object>.get ArrayList<Object>.add }
Object.getClass Class<>.getFields for ( ; ; ) { Field.getName }
Document.getElementsByTagName ArrayList<Object>.new for ( ; NodeList.getLength ; ) { NodeList.item List<Object>.add }
return ( QName.getLocalPart )
Class<>.getMethod if ( Method.getModifiers Modifier.isStatic ) { } Thread.currentThread Thread.getContextClassLoader Thread.currentThread Thread.setContextClassLoader return ( Method.invoke ) IllegalArgumentException.toString NullPointerException.toString InvocationTargetException.getTargetException if ( ) { InvocationTargetException.toString InvocationTargetException.getTargetException Throwable.printStackTrace } Thread.currentThread Thread.setContextClassLoader
return ( SSLSocketFactory.createSocket )
if ( ) { for ( ; Iterator<Object>.hasNext ; ) { if ( Iterator<Object>.next ) { return ( ) } } return ( ) }
if ( ) { if ( ) { return ( Boolean.booleanValue ) } return ( String.equals ) }
Properties.clone Properties.put Properties.put InitialDirContext.new if ( Logger.isLoggable ) { Logger.finest Exception.toString Logger.finest } if ( ) { DirContext.close NamingException.toString Logger.finest }
return ( Security.getProperty ) PrivilegedAction.new AccessController.doPrivileged
StringBuilder.new StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append if ( ) { StringBuilder.append StringBuilder.append } StringBuilder.toString
OutputStream.write_string
if ( ) { while ( ) { String.format if ( List<String>.contains ) { return ( ) } } }
LinkedList.new Collections.addAll List<String>.remove Pattern.compile Pattern.compile List<String>.size ArrayList.new for ( ) { Pattern.matcher if ( Matcher.matches ) { Matcher.group List<String>.add Matcher.group Pattern.matcher if ( Matcher.matches ) { Matcher.group List<String>.add } else { List<String>.add } } else { List<String>.add } } return ( List<String>.size List<String>.toArray )
ArrayList<String>.new while ( List<String>.size ) { List<String>.get Pattern.matcher if ( Matcher.matches ) { Matcher.group String.trim if ( String.isEmpty ) { List<String>.add } List<String>.remove } }
if ( List<Object>.size ) { } LinkedList<Object>.new for ( ) { List<Object>.add }
while ( ) { Switch ( ) { case : if ( ) { if ( ByteBuffer.remaining ByteBuffer.remaining ) { ByteBuffer.remaining if ( ByteBuffer.hasRemaining ) { } } else { ByteBuffer.remaining if ( ByteBuffer.remaining ) { return ( ) } } } break case : IllegalStateException.new } }
Objects.requireNonNull
JTabbedPane.setEnabledAt JTabbedPane.setEnabledAt
POA.create_POA POA.the_POAManager POAManager.activate
String.indexOf if ( ) { String.substring }
if ( ) { MalformedURLException.new } MalformedURLException.new MalformedURLException.initCause
ThreadLocalRandom.current ThreadLocalRandom.nextInt Map<InetSocketAddress,Integer>.put
if ( String.equalsIgnoreCase ) { SQLException.new }
Properties.getProperty Boolean.parseBoolean Properties.getProperty Integer.parseInt Properties.getProperty Double.parseDouble Properties.getProperty Double.parseDouble Properties.getProperty Integer.parseInt Properties.getProperty Integer.parseInt Properties.getProperty Double.parseDouble Properties.getProperty Integer.parseInt Properties.getProperty Double.parseDouble Properties.getProperty Double.parseDouble Properties.getProperty Double.parseDouble Properties.getProperty Double.parseDouble Properties.getProperty Double.parseDouble Properties.getProperty Double.parseDouble Properties.getProperty Double.parseDouble
if ( ) { IllegalArgumentException.new }
ArrayList<Object>.new
return ( GregorianCalendar.getInstance )
String.length for ( ; ; ) { String.charAt } return ( String.new )
if ( ) { IllegalArgumentException.new }
if ( List<>.isEmpty ) { return ( ) }
return ( Rectangle.new )
StringBuffer.insert
return ( Properties.new )
if ( ) { IllegalArgumentException.new } return ( Calendar.get Calendar.get Calendar.get Calendar.get Calendar.get Calendar.get )
return ( HashSet.contains )
Connection.prepareCall for ( ; ; ) { PreparedStatement.setString PreparedStatement.executeUpdate } PreparedStatement.close Connection.commit
List<Object>.remove
UnsupportedOperationException.new
HashMap<String,Object>.get
while ( Math.min ) { }
Error.new
IllegalArgumentException.new
if ( ) { Runnable.new } SwingWorker<Void,Void>.new SwingWorker<Void,Void>.execute
return ( HashSet<Object>.size HashSet<Object>.toArray )
DOMTestFramework.assertNotEqualsIgnoreCase
GregorianCalendar.new TimeZone.getTimeZone GregorianCalendar.setTimeZone GregorianCalendar.set return ( GregorianCalendar.getTimeInMillis )
while ( Iterator<Object>.hasNext ) { Iterator<Object>.next }
Map<String,Object>.get if ( ) { if ( ) { Map<String,Object>.put AtomicLong.addAndGet } }
for ( ; List<Object>.size List<Object>.size ; ) { }
return ( DataInputStream.readUnsignedByte )
Locale.toString
LinkedHashMap<String,Object>.new for ( ) { LinkedHashMap<String,Object>.put if ( ) { for ( ) { LinkedHashMap<String,Object>.put } } } return ( LinkedHashMap<String,Object>.values ArrayList<Object>.new )
return ( HashMap<String,Object>.get )
if ( List.isEmpty ) { return ( ) } Short.new Short.new Short.new Short.new Short.new
ByteArrayInputStream.new if ( ) { ObjectInputStream.new } else { ObjectStreamClass.getName Class.forName return ( ) ObjectInputStream.new } ObjectInputStream.readObject if ( ) { ByteArrayInputStream.close } if ( ) { ObjectInputStream.close }
if ( Float.floatToIntBits ) { return ( ) }
Thread.new Thread.start
Switch ( ) { default : IllegalArgumentException.new }
return ( UnmodifiableMap<Object,Object>.new )
Properties.new Properties.setProperty if ( ) { Properties.setProperty } if ( ) { Properties.setProperty } Properties.setProperty Properties.setProperty if ( ) { Properties.setProperty }
for ( ; List<Object>.size ; ) { List<Object>.get }
if ( String.trim String.length ) { if ( String.trim String.length ) { } } if ( ) { for ( ) { if ( ) { if ( String.equalsIgnoreCase ) { break } } else { Object.getClass Class.getSimpleName } } }
if ( ) { List<Object>.remove }
if ( ) { IllegalStateException.new } return ( Set<Class<Object>>.remove )
QName.getNamespaceURI if ( ) { XMLStreamWriter.getPrefix if ( ) { XMLStreamWriter.writeNamespace XMLStreamWriter.setPrefix } if ( String.trim String.length ) { XMLStreamWriter.writeCharacters } else { XMLStreamWriter.writeCharacters } } else { XMLStreamWriter.writeCharacters }
for ( ; ; ) { if ( ) { if ( ) { return ( LinkedTransferQueue.cast ) } } }
if ( String.trim String.isEmpty ) { }
if ( ) { InterruptedIOException.new } System.arraycopy
return ( Map<,>.entrySet )
MARSHAL.new
if ( ) { IllegalArgumentException.new }
if ( String.endsWith ) { String.length String.substring } String.length
PrintStream.new StringBuilder.new
if ( ) { IllegalArgumentException.new } Arrays.asList
File.new if ( File.length ) { File.length IOException.new } File.length FileInputStream.new BufferedInputStream.new System.arraycopy
ArrayList<Object>.size ArrayList<Object>.toArray
String.indexOf if ( ) { String.substring }
if ( List<Object>.isEmpty ) { if ( List<Object>.size ) { return ( ) } } List<Object>.get List<Object>.get
return ( Collection<X509Certificate>.size )
Arrays.binarySearch
return ( Math.abs Math.abs )
String.toLowerCase
Statement.executeQuery Exception.getMessage
if ( ) { IllegalArgumentException.new } IllegalStateException.new
if ( ) { System.arraycopy }
return ( ThreadLocal<Object>.get )
for ( ) { ArrayList<Object>.remove ArrayList<Object>.add ArrayList<Object>.add } for ( ) { ArrayList<Object>.remove ArrayList<Object>.add ArrayList<Object>.add }
Map<String,String>.putAll
ArrayList<Object>.size ArrayList<Object>.get ArrayList<Object>.size if ( ) { if ( ) { Math.log } } else { if ( ) { ArrayList<Object>.new if ( List<Object>.size ) { return ( ) } List<Object>.size List<Object>.get Math.log } } if ( Double.isInfinite ) { Math.log }
UIManager.getColor
if ( HashMap<Character,Integer>.containsKey ) { return ( HashMap<Character,Integer>.get ) }
DecimalFormat.new HashMap<Long,AtomicLong>.new HashMap<Object,AtomicLong>.new HashMap<Object,AtomicLong>.new HashMap<Object,AtomicLong>.new HashMap<Object,AtomicLong>.new HashMap<Object,AtomicLong>.new HashMap<Object,AtomicLong>.new HashMap<Object,AtomicLong>.new HashMap<Object,AtomicLong>.new HashMap<Object,AtomicLong>.new HashMap<String,AtomicLong>.new HashMap<String,AtomicLong>.new HashMap<String,AtomicLong>.new HashMap<String,AtomicLong>.new HashMap<String,AtomicLong>.new HashSet<String>.new LinkedHashMap<Long,AtomicLong>.new LinkedHashMap<Long,AtomicLong>.new LinkedHashMap<Long,AtomicLong>.new LinkedHashMap<Long,AtomicLong>.new LinkedHashMap<Long,AtomicLong>.new LinkedHashMap<Long,AtomicLong>.new LinkedHashMap<Long,AtomicLong>.new LinkedHashMap<Long,AtomicLong>.new
if ( ) { IllegalArgumentException.new } DoubleUnaryOperator.applyAsDouble DoubleUnaryOperator.applyAsDouble DoubleUnaryOperator.applyAsDouble
if ( Math.abs Math.abs Math.abs ) { return ( ) }
return ( Collections.singleton )
if ( ) { InputStream.close } if ( Enumeration.hasMoreElements ) { Enumeration.nextElement if ( ) { NullPointerException.new } }
ArrayList<Object>.new while ( Iterator<URI>.hasNext ) { Iterator<URI>.next UUID.randomUUID UUID.toString ArrayList<Object>.add }
for ( Vector.size ; ; ) { Vector.elementAt }
if ( ) { Calendar.getInstance Calendar.getFirstDayOfWeek } else { Integer.parseInt }
Process.getInputStream Process.getErrorStream ExecutorService.submit ExecutorService.submit PrintWriter.println while ( Future<String>.isDone Future<String>.isDone ) { Thread.sleep } if ( Future<String>.isDone ) { if ( ) { Future<String>.get } } else { Future<String>.get } Class.getName Logger.getLogger Logger.log Class.getName Logger.getLogger Logger.log
if ( ) { System.arraycopy }
CallableStatement.registerOutParameter CallableStatement.setInt CallableStatement.setInt CallableStatement.setInt CallableStatement.setInt CallableStatement.execute CallableStatement.getInt if ( CallableStatement.wasNull ) { IllegalArgumentException.new }
ZipFile.close File.new ZipFile.new ZipFile.close File.exists File.new File.delete ZipFile.new File.new ZipFile.new
if ( ) { NullPointerException.new }
Integer.new return ( Hashtable.get )
InputStreamReader.new
NameValuePairSeqHelper.write
if ( Long.equals ) { }
for ( ; ; ) { if ( Character.isAlphabetic ) { break } while ( Character.isLetterOrDigit ) { } Map<String,Object>.get } if ( ) { PrintStream.println }
List<Object>.size ByteArrayOutputStream.new OutputStreamWriter.new Writer.append Writer.append for ( ) { Writer.append Writer.append Writer.append Writer.append Writer.append Writer.append Writer.append Writer.append Long.toString Writer.append Writer.append Writer.append Writer.append Writer.append Writer.append Writer.append Writer.append Writer.append Writer.append Writer.append } Writer.append Writer.flush return ( ByteArrayOutputStream.toByteArray )
return ( ParameterizedType.getRawType ParameterizedType.getActualTypeArguments )
DataOutput.writeUTF DataOutput.writeUTF DataOutput.writeUTF DataOutput.writeUTF DataOutput.writeUTF DataOutput.writeUTF HashMap<String,String>.size DataOutput.writeInt HashMap<String,String>.entrySet Set.iterator while ( Iterator<Entry<String,String>>.hasNext ) { Iterator<Entry<String,String>>.next Entry<String,String>.getKey DataOutput.writeUTF Entry<String,String>.getValue DataOutput.writeUTF } DataOutput.writeInt
if ( String.equals ) { XMLStreamWriter.writeAttribute } else { XMLStreamWriter.writeAttribute }
if ( String.contains ) { }
if ( ) { JButton.setVisible JButton.setVisible JButton.setVisible JButton.setVisible JButton.setVisible JButton.setVisible } if ( ) { JOptionPane.showMessageDialog }
File.new if ( File.exists ) { return ( ) } if ( File.getParentFile File.exists File.getParentFile File.mkdirs ) { File.getParentFile File.getAbsolutePath IOException.new } FileOutputStream.new while ( InputStream.available ) { InputStream.read FileOutputStream.write } FileOutputStream.flush FileOutputStream.close InputStream.close
if ( ) { String.format }
TreeSet.new if ( ) { StringTokenizer.new if ( StringTokenizer.hasMoreTokens ) { } while ( StringTokenizer.hasMoreTokens ) { StringTokenizer.nextToken Set.add } }
Map<String,String>.put Map<String,String>.put
if ( List<Object>.size ) { List<Object>.add }
List<String>.toString List<String>.size Set<String>.toString Set<String>.size
BigDecimal.new BigDecimal.new BigDecimal.multiply BigDecimal.setScale BigDecimal.doubleValue
Class.getName
Vector<Object>.size Integer.new Map<String,Object>.put for ( ; Vector<Object>.size ; ) { Vector<Object>.get Map<String,Object>.put }
InputSource.new
if ( ) { PrintStream.println } Graphics.setClip
for ( ; List<Object>.size ; ) { List<Object>.get if ( ) { if ( Shape.getBounds2D Rectangle2D.isEmpty ) { continue } if ( ) { for ( ; List<Object>.size ; ) { List<Object>.get if ( ) { Area.new Area.new Area.intersect break } } } } }
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } if ( SortedMap<String,Object>.get ) { SortedMap<String,Object>.size Collections.emptyMap } if ( ) { SortedMap<String,Object>.put } RuntimeException.new
ArrayList<Object>.clear
ArrayList<Object>.size Set<Integer>.add ArrayList<Object>.size Map<Object,Integer>.put
if ( Hashtable<Integer,Object>.containsKey ) { Hashtable<Integer,Object>.put } Hashtable<Integer,Object>.get
for ( ) { Entry<String,Object>.getKey Entry<String,Object>.getValue }
Map<String,Object>.get
if ( ) { IllegalArgumentException.new }
if ( ) { List<String>.size ArrayList<String>.new for ( ) { Math.max if ( ) { ArrayList<String>.add } } if ( ArrayList<String>.size ) { for ( ) { if ( ) { ArrayList<String>.add } } } }
if ( ) { Logger.warning }
Integer.toHexString Integer.toHexString
Pattern.matcher String.length StringBuffer.new while ( Matcher.find ) { Matcher.group String.replaceAll Matcher.appendReplacement } Matcher.appendTail return ( StringBuffer.toString )
if ( Map<Integer,Object>.isEmpty ) { Map<Integer,Object>.values Collection.iterator Iterator<Object>.next Iterator<Object>.remove Map<Integer,Object>.remove }
if ( ) { Integer.valueOf }
if ( ) { NullPointerException.new } Integer.valueOf ConcurrentMap.remove if ( ) { Class.getName Integer.valueOf IllegalArgumentException.new } else { Class.getName ConcurrentMap.remove } ConcurrentHashMap<Integer,Object>.remove ConcurrentHashMap<String,Object>.remove
Set<String>.add List<Object>.add Map<Object,String>.get if ( ) { Set<String>.add Set<String>.add } Map<Object,String>.get if ( ) { Set<String>.add Set<String>.add } Map<Object,String>.get if ( ) { Set<String>.add Set<String>.add } Map<Object,String>.get if ( ) { Set<String>.add Set<String>.add } if ( Map<Object,String>.get ) { Map<Object,String>.get Set<String>.add Map<Object,String>.get Set<String>.add }
PrintStream.println File.new PrintStream.println
Properties.new Properties.new Properties.setProperty Properties.setProperty for ( ; ; ) { Properties.setProperty }
if ( Set<Object>.isEmpty ) { } if ( Set<String>.isEmpty ) { } if ( Set<String>.isEmpty ) { }
ArrayList.new for ( ; ; ) { List<String>.add }
for ( ) { for ( ArrayList.new ) { if ( List<Object>.isEmpty ) { } } } if ( ) { Thread.sleep Runnable.new Thread.new Thread.start }
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new }
if ( ) { if ( ) { return ( Boolean.booleanValue ) } return ( String.equals ) }
ThreadLocal<Class<Object>>.set
Thread.sleep
if ( String.isEmpty ) { System.currentTimeMillis StringBuilder.new Formatter.new Formatter.format StringBuilder.toString return ( ) }
HashMap<URI,Map<URI,Integer>>.new if ( ) { for ( Map<URI,Integer>.keySet ) { if ( ) { if ( Map<URI,Map<URI,Integer>>.get ) { HashMap<URI,Integer>.new Map<URI,Map<URI,Integer>>.put } Map<URI,Map<URI,Integer>>.get Map<URI,Integer>.get } } }
return ( URI.create )
for ( Map<URI,Object>.values ) { } Map<URI,Object>.clear
Locale.getDefault
if ( ) { IllegalArgumentException.new }
for ( ; List<Object>.size ; ) { List<Object>.get Map.put }
InputStream.read if ( ) { EOFException.new }
Collections.sort
if ( String.startsWith ) { String.length String.substring String.length return ( ) }
return ( File.new )
Lock.lock Lock.unlock
ArrayList<Object>.new List<Object>.add
for ( ; ; ) { Document.createTextNode Document.createElement Document.createTextNode Element.appendChild }
if ( ) { Integer.valueOf }
if ( ) { if ( ) { Long.parseLong return ( ) } }
if ( ) { IllegalArgumentException.new }
return ( Arrays.asList )
if ( ) { if ( ) { IllegalArgumentException.new } InetAddress.getByName IllegalArgumentException.new } if ( ) { ServerSocket.new InetSocketAddress.new ServerSocket.bind } else { ServerSocket.new } if ( ) { PrintStream.println } IllegalArgumentException.new
ArrayList<Certificate>.new Collections.addAll CertificateFactory.getInstance CertificateFactory.generateCertPath return ( CertPath.getEncoded ) ResourceBundle.getString
if ( ) { if ( ) { System.arraycopy } }
StringBuilder.new if ( ) { StringBuilder.append } for ( ; ; ) { StringBuilder.append } return ( StringBuilder.toString )
Statement.executeQuery ResultSet.next ResultSet.updateInt ResultSet.updateString ResultSet.deleteRow ResultSet.updateRow ResultSet.updateInt ResultSet.getInt ResultSet.close Statement.executeQuery ResultSet.close Statement.close
if ( ) { Integer.new } return ( NodeList.item )
Runnable.new
return ( Locale.toLanguageTag )
RuntimeException.new RuntimeException.new for ( List<Object>.size ; ; ) { List<Object>.remove }
ConcurrentHashMap<String,Object>.clear
System.currentTimeMillis File.new IOException.printStackTrace
while ( ) { if ( ) { if ( ) { if ( Component.prepareImage ) { Component.checkImage } } } }
JMenu.getPopupMenu
return ( AtomicLong.get )
ByteArrayOutputStream.new PrintWriter.new RuntimeException.new return ( ByteArrayOutputStream.toByteArray String.new )
return ( String.equalsIgnoreCase )
Class.getName List<Object>.add StringBuilder.new StringBuilder.append StringBuilder.append StringBuilder.toString
return ( Math.round )
Object.printStackTrace Runnable.new
Vector.new Hashtable.get if ( ) { Vector.size for ( ; ; ) { Vector.elementAt Vector.size for ( ; ; ) { Vector.elementAt if ( Vector.contains ) { Vector.addElement } } } }
HttpURLConnection.setConnectTimeout
HashSet<Object>.contains HashSet<Object>.remove
if ( List<String>.isEmpty ) { return ( ) }
Set<Object>.clear
Map<String,Object>.put Map<String,Object>.remove Map<String,Object>.put Map<String,Object>.remove Set<String>.add
if ( ) { if ( ) { IllegalStateException.new } String.trim Integer.parseInt }
HashSet.new for ( ; ; ) { HashSet.add } for ( HashSet.iterator ; Iterator.hasNext ; ) { Integer.new Iterator.next } List.size List.size for ( ; ; ) { List.iterator Iterator.next }
if ( File.exists ) { if ( File.isFile ) { File.delete } else { if ( File.isDirectory ) { File.listFiles File.delete } } }
if ( ) { if ( ) { AssertionError.new } Switch ( JavaFileObject.getKind ) { case : Set<String>.add Set<JavaFileObject>.add Set<String>.remove break case : Map<String,JavaFileObject>.put Set<String>.remove break } }
if ( String.equals ) { return ( ) } if ( ) { System.currentTimeMillis } Collections.addAll Collections.addAll Runnable.new Executor.execute
if ( ) { return ( LinkedList.new ) }
return ( Predicate<Object>.negate )
if ( ) { System.exit } System.currentTimeMillis
for ( ) { Set<Object>.add }
SecurityManager.checkPermission
System.arraycopy
if ( ) { NullPointerException.new } if ( ) { NullPointerException.new }
List<Object>.add
if ( Scanner.hasNextLine ) { return ( ) } Scanner.useDelimiter Scanner.next Scanner.useDelimiter
ByteBuffer.limit List<Object>.add List<Object>.add
ArrayList<Integer>.new for ( ; ; ) { for ( ; ; ) { if ( ) { List<Object>.add } else { List<Integer>.add } } } AtomicInteger.new ArrayList<Thread>.new for ( ) { List<Object>.add AtomicInteger.incrementAndGet Runnable.new Thread.new List<Thread>.add Thread.start } for ( ) { Thread.join } return ( AtomicInteger.get )
if ( ) { String.format }
DatabaseMetaData.getSQLKeywords String.trim String.equals Connection.close DatabaseMetaData.getSQLKeywords
if ( ) { Map<String,Object>.get if ( ) { if ( ) { Map<String,Object>.put } } return ( ) } if ( ) { Map<String,Object>.get if ( ) { Map<String,Object>.put return ( ) } } Map<String,Object>.get if ( ) { if ( ) { Map<String,Object>.put } }
if ( ) { PrintStream.println }
if ( Object.getClass Object.getClass Class.equals ) { return ( Comparable.compareTo ) }
return ( Math.log )
if ( ) { Thread.interrupt } AtomicBoolean.set
ByteArrayOutputStream.write ByteArrayOutputStream.write
return ( URL.new ) return ( File.new File.toURI URI.toURL )
if ( ) { for ( ; Vector.size ; ) { Vector.elementAt if ( String.equals ) { return ( ) } } }
ArrayList.new for ( ; ; ) { List<Object>.addAll List<Object>.size List<Object>.get } ArrayList<Object>.addAll
if ( JTree.isEnabled ) { JTree.requestFocus MouseEvent.getX MouseEvent.getY if ( ) { if ( MouseEvent.getY ) { return ( ) } if ( SwingUtilities.isLeftMouseButton ) { MouseEvent.getX MouseEvent.getY } MouseEvent.getX if ( ) { if ( JTree.isEditing ) { if ( JTree.isPathSelected ) { } } } } }
Object.notifyAll
List<String>.get Map<String,Object>.put
if ( ) { IllegalArgumentException.new }
JPanel.removeAll if ( JComboBox<String>.getSelectedIndex ) { JPanel.add JPanel.setPreferredSize } else { JPanel.setPreferredSize MouseAdapter.new BorderFactory.createEmptyBorder JPanel.add JPanel.setPreferredSize } JPanel.revalidate JPanel.repaint
ByteArrayOutputStream.new SOAPMessage.writeTo ByteArrayOutputStream.toString SOAPMessage.getSOAPBody SOAPBody.getTextContent
Class.forName Class.newInstance
if ( ) { Class.getDeclaredMethod Class.getDeclaredMethod } Method.invoke if ( ) { Exception.getCause }
if ( ) { System.exit }
Switch ( ) { case : return ( String.equals ) case : return ( String.equals ) case : return ( String.equals String.equals ) case : return ( String.equals String.equals ) default : return ( String.equals String.equals String.equals ) }
System.arraycopy List<Object>.add List<Object>.add List<Object>.add
if ( ) { ArrayList.new } List<Object>.add
if ( ) { System.currentTimeMillis }
if ( ) { IllegalArgumentException.new }
if ( ) { RuntimeException.new } if ( ) { RuntimeException.new }
UnsupportedOperationException.new
Document.getDoctype DocumentType.getNotations NamedNodeMap.getNamedItem Notation.getPublicId
if ( ) { PrintStream.println } if ( ) { PrintStream.println } if ( ) { PrintStream.println }
Arrays.asList Arrays.asList
if ( ) { if ( ) { HashSet<Object>.new } } else { Collections.emptySet }
Map<String,Set<String>>.get if ( ) { HashSet<String>.new Map<String,Set<String>>.put }
ByteBuffer.remaining if ( ByteBuffer.isDirect ) { if ( ByteBuffer.hasArray ) { return ( ByteBuffer.array ByteBuffer.position ByteBuffer.arrayOffset ) } else { ByteBuffer.get return ( ) } } ByteBuffer.position
Lock.lock if ( ) { ByteBuffer.clear ByteBuffer.put ByteBuffer.flip Pipe.sink SinkChannel.write if ( ) { PrintStream.println } } IOException.getLocalizedMessage IOException.getStackTrace StackTraceElement[].toString PrintStream.println Lock.unlock
StringBuilder.new StringBuilder.toString
Integer.valueOf Integer.valueOf
ArrayList<Object>.new if ( ) { ArrayList<Object>.new for ( ; ; ) { if ( ) { List<Object>.add } } List<Object>.toArray } if ( ) { for ( ; ; ) { if ( ) { Arrays.asList List<Object>.addAll } } } return ( List<Object>.toArray )
return ( File.equals )
if ( String.equals ) { }
String.replace String.replace return ( String.matches )
Long.reverseBytes
RuntimeException.new RuntimeException.new
System.nanoTime System.nanoTime
return ( HashMap<String,Object>.size )
if ( BigDecimal.compareTo ) { }
if ( ) { List<String>.get return ( ) }
return ( String.format )
List<Diagnostic<Object>>.clear
ArrayList<URI>.new for ( ) { URI.create List<URI>.add } ArrayList<URI>.new for ( ) { URI.create List<URI>.add } String.format
if ( ) { LinkedBlockingQueue<Object>.add if ( ) { RuntimeException.new } }
LinkedList<Object>.new DocumentBuilderFactory.newInstance DocumentBuilderFactory.newDocumentBuilder PrintStream.printf TransformerFactory.newInstance TransformerFactory.newTransformer PrintStream.printf
ArrayList.new Pattern.matcher while ( Matcher.find ) { Matcher.group List<String>.add }
if ( ) { RuntimeException.toString SQLException.initCause }
String.toCharArray String.toCharArray StringBuffer.new StringBuffer.append for ( ; ; ) { if ( ) { StringBuffer.append StringBuffer.append StringBuffer.append if ( ) { StringBuffer.append StringBuffer.append StringBuffer.append } } else { StringBuffer.append StringBuffer.append StringBuffer.append } } StringBuffer.append return ( StringBuffer.toString )
return ( Integer.intValue )
return ( String.split )
AtomicBoolean.set ExecutorService.shutdown ThreadPoolExecutor.shutdown
return ( List<Object>.size )
SynthContext.getComponent SynthContext.getRegion
List.add List.size List.toArray
PrintStream.println
return ( Random.nextInt Random.nextInt Random.nextInt )
if ( ) { if ( ) { return ( Boolean.booleanValue ) } return ( String.equals ) }
Process.myUserHandle
File.getName if ( ) { if ( String.endsWith String.endsWith ) { String.length String.substring JOptionPane.showOptionDialog if ( ) { File.getParent File.new if ( File.exists ) { return ( ) } if ( File.mkdirs ) { return ( ) } File.getName File.new return ( ) File.delete } } }
return ( Set<Entry<Object,Object>>.size )
ThreadLocal<Object>.get
return ( String.toUpperCase )
System.nanoTime ConcurrentSkipListMap<Long,Object<Object,Object,Object>Object>.headMap while ( Iterator<Entry<Long,Object<Object,Object,Object>Object>>.hasNext ) { Iterator<Entry<Long,Object<Object,Object,Object>Object>>.next Entry<Long,Object<Object,Object,Object>Object>.getValue Entry<Long,Object<Object,Object,Object>Object>.getKey Iterator<Entry<Long,Object<Object,Object,Object>Object>>.remove ConcurrentMap<Object<Object,Object,Object>Object,Object>.get if ( AtomicLong.get ) { if ( AtomicLong.get ) { ConcurrentMap<Object<Object,Object,Object>Object,Object>.remove } } }
return ( HashMap.containsKey )
ArrayList.new Map<UUID,>.entrySet Set.iterator while ( Iterator.hasNext ) { Iterator.next Entry<UUID,>.getValue if ( ) { Class.cast List<Object>.add } } return ( Collections.unmodifiableList )
if ( ) { return ( HashMap<String,Object>.new ) } HashMap<String,Object>.new for ( ; ; ) { String.indexOf String.indexOf Map<String,Object>.put }
if ( ) { List<Object>.size }
OutputStream.write
System.nanoTime
Math.max Math.min
if ( ) { SAXParseException.new } else { SAXParseException.new } if ( ) { ErrorHandler.fatalError }
InetAddress.getByName DatagramSocket.new
Executor.new
StringBuffer.new SecureRandom.nextBytes StringBuffer.append if ( ) { StringBuffer.append } if ( ) { IllegalArgumentException.new } Integer.toString StringBuffer.append StringBuffer.append StringBuffer.append return ( StringBuffer.toString )
OutputStream.flush
Map<String,Object>.get
return ( List<Object>.equals List<Integer>.equals )
File.new ImageIO.read BufferedImage.getWidth BufferedImage.getHeight BufferedImage.new BufferedImage.getGraphics Graphics.drawImage
if ( String.equals String.endsWith ) { Double.parseDouble } if ( StringBuilder.length StringBuilder.charAt ) { StringBuilder.append } StringBuilder.append StringBuilder.append if ( ) { StringBuilder.append } else { StringBuilder.append }
ThreadLocal<Boolean>.get ThreadLocal<Boolean>.set return ( ThreadLocal<Boolean>.set )
File.getAbsolutePath FileInputStream.new InputStreamReader.new IOException.getMessage Logger.severe
for ( ; List<Object>.size ; ) { List<Object>.get if ( ) { List<Object>.remove List<Object>.remove return ( ) } }
Arrays.asList
Class.forName Class<>.getDeclaredConstructor Constructor.setAccessible return ( Constructor.newInstance )
List<Object>.clear NullPointerException.getMessage
return ( TimeUnit.toNanos Sync.tryAcquireSharedNanos )
if ( String.length ) { return ( ) } String.charAt Character.toUpperCase String.substring
return ( Collections.unmodifiableMap )
if ( String.equals ) { return ( ) }
return ( AtomicInteger.incrementAndGet )
if ( String.isEmpty ) { return ( ) } String.split return ( String.replaceAll )
if ( ) { Properties.new Properties.load InputStream.close }
Writer.flush
String.new
StringBuilder.append StringBuilder.append
if ( Map.containsKey ) { } if ( ) { if ( ) { if ( ) { Set.add } else { if ( ) { Set.remove } } } } if ( Map.containsKey ) { Integer.parseInt }
JTextField.setText
return ( String[].clone )
return ( Long.parseLong )
for ( ; ; ) { Thread.interrupted while ( ) { Object.wait } break if ( ) { Thread.currentThread Thread.interrupt } }
PrintStream.println for ( ) { PrintStream.println for ( ) { if ( ) { PrintStream.println } for ( ) { PrintStream.println for ( ) { PrintStream.println } } } PrintStream.println }
Switch ( ) { default : Error.new }
if ( ) { IllegalStateException.new }
for ( ; ; ) { Arrays.fill Math.floor Math.abs Math.pow Math.pow }
StringBuffer.new StringBuffer.append StringBuffer.append return ( StringBuffer.toString )
Hashtable.put
HashMap.new HashMap<String,>.size HashMap<String,>.toString ArrayList.new ArrayList<Object>.size ArrayList<Object>.toString HashMap.new HashMap<String,>.size HashMap<String,>.toString
OutputStream.write OutputStream.write OutputStream.write IOException.printStackTrace
Map<String,Object>.putAll
for ( ) { Graphics2D.getFontMetrics Dimension.getHeight } for ( ; List<Object>.size ; ) { List<Object>.size List<Object>.get Graphics2D.getFontMetrics Dimension.getHeight }
if ( List<Object>.isEmpty ) { }
StringBuffer.new Thread.getStackTrace StringBuffer.append Thread.toString StringBuffer.append StringBuffer.append if ( ) { for ( ; ; ) { StringBuffer.append StackTraceElement.toString StringBuffer.append StringBuffer.append } } else { StringBuffer.append }
NamedNodeMap.getLength
for ( ; ; ) { if ( Object.equals Node<Object>.casItem ) { if ( ) { Node<Object>.casNext } return ( ) } }
ArrayList.new ArrayList.add ArrayList.add for ( List.iterator ; Iterator.hasNext ; ) { Iterator.next Boolean.booleanValue }
return ( String.split )
if ( Set<Object>.isEmpty ) { return ( ) }
StringBuilder.new StringBuilder.append StringBuilder.append for ( ) { StringBuilder.append } return ( StringBuilder.toString )
ArrayList<Object>.size Math.min HashMap<Object,Object>.new for ( ; ; ) { ArrayList<Object>.get HashMap<Object,Object>.put }
return ( Map<String,Object>.get )
if ( ) { if ( List<>.size ) { return ( List<>.get ) } }
if ( ) { if ( ) { return ( Boolean.booleanValue ) } return ( String.equals ) }
if ( ) { IllegalStateException.new }
Integer.toString for ( String.length ; ; ) { StringBuilder.append } StringBuilder.append
return ( Integer.intValue )
return ( StringBuffer.toString )
if ( String.equals ) { TreeMap<String,Object>.new Map<String,Object>.putAll Map<String,Object>.put }
return ( Locale.getDefault )
System.currentTimeMillis String.valueOf return ( return ( ) )
if ( String.isEmpty ) { return ( ) } if ( String.contains ) { if ( String.equals ) { } }
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new }
Sync.acquireSharedInterruptibly
HashSet.new
Math.min
DataInput.readByte DataInput.readInt if ( ) { DataInput.readInt return ( ) } if ( ) { DataInput.readInt }
if ( String.indexOf ) { String.substring } if ( String.indexOf ) { String.substring } String.indexOf if ( ) { String.substring }
for ( ; Vector.size ; ) { Vector.elementAt PrintStream.print for ( ; Vector.size ; ) { Vector.elementAt PrintStream.print } PrintStream.println }
return ( Map<Object,Object>.keySet Set.contains )
return ( Optional.ofNullable )
UnsupportedOperationException.new
JTextField.new JScrollPane.getPreferredSize JTextField.getPreferredSize JScrollPane.getPreferredSize JTextField.getPreferredSize JScrollPane.getViewport JViewport.add Dimension.new JScrollPane.setPreferredSize JScrollPane.setVisible JPanel.new BoxLayout.new JPanel.setLayout JPanel.add
UnsupportedOperationException.new
if ( ) { ArrayList<Long>.new } if ( ) { List<Object>.size ArrayList<Object>.new for ( ) { List<Object>.add } }
if ( ) { String.length String.substring String.format } Runnable.new
if ( List<Object>.size ) { return ( ) }
return ( UUID.randomUUID )
Objects.requireNonNull return ( Map<String,Object>.remove )
if ( ) { NullPointerException.new }
for ( ; Iterator.hasNext ; ) { Iterator.next }
Map<Character,Boolean>.put
CardLayout.new
String.length StringBuilder.new String.toCharArray for ( ; ; ) { for ( ; ; ) { if ( ) { if ( ) { StringBuilder.append StringBuilder.append StringBuilder.append continue } } } StringBuilder.append } return ( StringBuilder.toString )
while ( ) { String.charAt }
if ( ) { if ( String.endsWith ) { return ( ) } }
return ( Integer.intValue )
return ( Optional.ofNullable )
if ( ) { PrintStream.println }
Objects.requireNonNull Objects.requireNonNull Objects.requireNonNull
if ( Set.size ) { for ( Set.iterator ; Iterator.hasNext ; ) { Iterator.next if ( Map.containsKey ) { if ( Set.contains ) { Map.get if ( Integer.intValue ) { return ( ) } } } } }
System.arraycopy
if ( ) { List<Object>.remove if ( List<Object>.size ) { } }
if ( ) { InternalError.new }
if ( ) { ArrayList<Object>.new }
return ( KeyboardFocusManager.postProcessKeyEvent )
Calendar.add
Lock.lock Long.valueOf Map<Object,Long>.put Lock.unlock
Calendar.getInstance Calendar.setTimeInMillis Calendar.add return ( Calendar.getTimeInMillis )
ArrayList<String>.add
ArrayList<X509Certificate>.new Collection<X509Certificate>.add
StringBuilder.new return ( StringBuilder.toString )
Properties.new Properties.setProperty Properties.setProperty Properties.setProperty return ( DriverManager.getConnection )
LinkedList<FutureTask<Void>>.new for ( ) { List<FutureTask<Void>>.add } for ( ) { Executor.execute } for ( ) { if ( ) { FutureTask<Void>.get } } for ( ) { FutureTask<Void>.cancel }
Signature.getInstance Signature.initVerify String.getBytes Signature.update if ( Signature.verify ) { return ( ) }
ByteArrayOutputStream.new
if ( ) { RuntimeException.new } if ( Arrays.equals ) { Arrays.toString Arrays.toString RuntimeException.new } if ( ) { RuntimeException.new }
Collection<Object>.add
String.indexOf if ( ) { IllegalArgumentException.new } String.indexOf if ( ) { IllegalArgumentException.new } String.substring String.length String.substring String.trim String.split if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new }
if ( ) { JOptionPane.showConfirmDialog }
Integer.toHexString Integer.toHexString
while ( Object.equals Object.equals Object.equals Object.equals ) { } if ( ) { if ( Object.equals ) { } }
return ( Double.compare Math.abs Math.max Math.abs )
if ( ) { if ( ) { if ( ) { if ( ) { if ( ) { BigDecimal.add } } } } }
ArrayList.new ClassLoader.getSystemClassLoader RuntimeException.new for ( ) { if ( ) { if ( Class<>.getSuperclass Class<>.getSuperclass ) { for ( Class<>.getAnnotations ) { if ( Annotation.annotationType ) { List<Object>.add } } } } }
String.getBytes String.getBytes
Map<Object,Object>.clear
Attributes.getValue if ( String.equals String.equals ) { if ( String.equals String.equals ) { if ( String.equals String.equals ) { if ( String.equals ) { } } } }
if ( ) { PrintStream.println }
StringBuilder.new StringBuilder.append StringBuilder.append for ( Map<String,Object>.keySet Set.iterator ; Iterator.hasNext ; ) { if ( ) { StringBuilder.append } if ( ) { StringBuilder.append break } Iterator.next StringBuilder.append StringBuilder.append } if ( ) { StringBuilder.append } StringBuilder.append return ( StringBuilder.toString )
String.equals
StringBuffer.new StringBuffer.append StringBuffer.append for ( ; ; ) { StringBuffer.append StringBuffer.append } StringBuffer.append return ( StringBuffer.toString )
StringBuilder.new
Switch ( ) { default : IllegalArgumentException.new }
File.new File.getAbsolutePath Charset.defaultCharset Class.getName
if ( ) { Thread.currentThread }
if ( ) { IllegalArgumentException.new }
WeakHashMap<Object,WeakReference<Object>>.get if ( ) { WeakReference<Object>.get } WeakReference<Object>.new WeakHashMap<Object,WeakReference<Object>>.put
Arrays.asList for ( ; ; ) { List<Integer>.add }
AtomicBoolean.new
StringBuilder.new if ( String.equals ) { return ( ) } for ( ; String.length ; ) { String.charAt if ( ) { StringBuilder.append } } return ( StringBuilder.toString )
return ( System.getProperty )
if ( ) { ArrayList<Object>.new }
if ( String.trim String.toUpperCase String.startsWith String.trim String.equals ) { if ( String.trim String.toUpperCase String.startsWith String.trim String.equals ) { return ( ) } }
JTextField.getText if ( String.length String.equals String.equals ) { JComboBox.getSelectedItem if ( JTextArea.getText String.length ) { JTextArea.append } if ( String.equals String.trim String.startsWith ) { if ( String.length ) { if ( Map<String,Boolean>.containsKey String.trim String.startsWith ) { } } } JTextArea.append if ( String.length ) { JTextArea.append } } JTextField.setText
return ( Arrays.copyOfRange )
if ( ) { Map<String,Object>.get if ( ) { Map<String,Object>.remove } } for ( Map<ClassLoader,String>.entrySet ) { Entry<ClassLoader,String>.getKey ClassLoader.loadClass Class.newInstance if ( ) { Class.getCanonicalName } if ( ClassLoader.equals ) { } break continue } if ( ) { Map<String,Object>.put }
if ( ) { List<Object>.size List<Object>.add }
if ( ) { IllegalArgumentException.new } for ( ; ; ) { if ( ) { IllegalArgumentException.new } } if ( ) { IllegalArgumentException.new }
LifespanPolicyValue.value
if ( Character.toLowerCase Character.toLowerCase ) { return ( ) }
if ( ) { if ( ) { NoSuchElementException.new } }
Class<>.getName StringBuilder.new StringBuilder.append StringBuilder.append StringBuilder.toString
Map<InetAddress,String>.get if ( ) { InetAddress.getHostName Map<InetAddress,String>.put }
Switch ( ) { case : IOException.getLocalizedMessage IllegalArgumentException.new break default : IllegalArgumentException.new }
XMLStreamWriter.getPrefix if ( ) { while ( XMLStreamWriter.getNamespaceContext NamespaceContext.getNamespaceURI ) { } XMLStreamWriter.writeNamespace XMLStreamWriter.setPrefix }
BufferedImage.getColorModel return ( BufferedImage.getWidth BufferedImage.getHeight ColorModel.createCompatibleWritableRaster ColorModel.isAlphaPremultiplied BufferedImage.new )
Math.max String.substring String.substring if ( ) { if ( ) { String.substring } }
if ( ) { Thread.currentThread Thread.toString return ( ) } Exception.printStackTrace Thread.currentThread Thread.toString
for ( ) { List<Object>.iterator while ( Iterator<Object>.hasNext ) { Iterator<Object>.next Map<String,BigInteger>.put } }
return ( ArrayList<Object>.new )
return ( Class.getName )
List<Object>.clear for ( ; ; ) { for ( ; ; ) { List<Object>.add } }
TreeSet<Object>.first TreeSet<Object>.last TreeSet<Object>.last TreeSet<Object>.last TreeSet<Object>.first TreeSet<Object>.last TreeSet<Object>.higher TreeSet<Object>.higher TreeSet<Object>.removeAll TreeSet<Object>.removeAll TreeSet<Object>.addAll TreeSet<Object>.addAll
IllegalArgumentException.new
StringBuilder.new if ( ) { StringBuilder.append } for ( ; ArrayList<Object>.size ; ) { ArrayList<Object>.get StringBuilder.append } return ( StringBuilder.toString )
BigInteger.bitLength return ( BigInteger.new )
if ( ) { IndexOutOfBoundsException.new } if ( ) { IndexOutOfBoundsException.new } if ( ) { IndexOutOfBoundsException.new }
if ( ) { IllegalArgumentException.new }
Class.getName Class.getName if ( ) { if ( ) { for ( ) { if ( String.contains ) { } } } } if ( ) { if ( String.equalsIgnoreCase ) { } }
if ( ) { return ( Collections.unmodifiableList ) }
if ( String.isEmpty ) { Integer.parseInt }
if ( ) { JOptionPane.showMessageDialog return ( ) }
Pattern.matcher if ( Matcher.matches ) { return ( Matcher.group ) }
ArrayList<String>.new if ( Set<String>.isEmpty ) { ArrayList<String>.addAll }
Set<Integer>.addAll
BlockingQueue<Object>.add
return ( String.valueOf )
StringBuffer.new for ( ) { String.format StringBuffer.append } return ( StringBuffer.toString )
ArrayList<Object>.new for ( ; ; ) { ByteBuffer.get for ( ; ; ) { if ( ) { ByteBuffer.position if ( ) { IOException.new } List<Object>.add if ( List<Object>.size ) { ByteBuffer.position ByteBuffer.get } } } } ByteBuffer.getInt ByteBuffer.getInt ByteBuffer.getInt
if ( Set<Object>.contains ) { } Set<Object>.add
ArrayList<String>.new for ( Map<String,Object>.values ) { for ( ) { if ( List<String>.contains ) { List<String>.add } } }
return ( Integer.intValue )
Map<,>.entrySet Set.iterator for ( Map<,>.size ; ; ) { Iterator<>.next Entry<,>.getKey Entry<,>.getValue }
return ( LinkedHashMap<String,Object>.containsKey )
if ( Map<String,Object>.isEmpty ) { IllegalArgumentException.new } ArrayList.new for ( Map<String,Object>.keySet ) { Map<String,Object>.get List<Object>.add } ArrayList.new List<Object>.clear for ( ) { List<Object>.add } StringBuffer.new StringBuffer.append StringBuffer.toString
return ( ThreadLocal<AtomicInteger>.get )
if ( ) { List<String>.add }
OutputStream.write
ArrayList<Object>.new for ( ; Element.getChildNodes NodeList.getLength ; ) { Element.getChildNodes NodeList.item List<Object>.add }
if ( ) { IllegalArgumentException.new }
if ( ) { IllegalStateException.new } return ( CipherSpi.engineDoFinal )
return ( Class.getClassLoader JAXBContext.newInstance ) RuntimeException.new
Collection<Object>.stream Function.identity Collectors.toMap Stream.collect return ( Collection<Object>.stream Stream.map Collectors.toList )
if ( ) { IllegalArgumentException.new }
for ( NavigableMap<Object,Object>.entrySet ) { Entry<Object,Object>.getKey if ( ) { NavigableMap<Object,Object>.size return ( Entry<Object,Object>.getValue ) } else { if ( ) { Entry<Object,Object>.getValue Entry<Object,Object>.getValue } else { if ( ) { Entry<Object,Object>.getValue Entry<Object,Object>.getValue } else { Entry<Object,Object>.getValue Entry<Object,Object>.getValue } } } } for ( Map<Object,Object>.keySet ) { }
Set<Object>.add Stack<Object>.push
RuntimeException.new
return ( Integer.intValue )
NavigableMap<Object,Object>.clear
if ( String.length ) { return ( String.charAt Character.toUpperCase String.substring ) }
if ( ) { IllegalArgumentException.new }
ArrayList.size for ( ; ; ) { ArrayList.get }
Map.put
PrintStream.printf PrintStream.printf PrintStream.printf PrintStream.printf PrintStream.printf PrintStream.printf PrintStream.printf PrintStream.printf PrintStream.printf PrintStream.printf PrintStream.printf PrintStream.printf PrintStream.printf PrintStream.printf PrintStream.printf PrintStream.printf PrintStream.printf PrintStream.printf PrintStream.printf PrintStream.printf PrintStream.printf PrintStream.printf PrintStream.printf PrintStream.printf PrintStream.printf PrintStream.printf PrintStream.printf PrintStream.printf PrintStream.printf PrintStream.printf PrintStream.printf PrintStream.printf PrintStream.printf PrintStream.printf PrintStream.printf PrintStream.printf PrintStream.printf PrintStream.printf PrintStream.printf PrintStream.printf
ArrayList<String>.new ArrayList<String>.add ArrayList<String>.add ArrayList<String>.add ArrayList<String>.add ArrayList<String>.add ArrayList<String>.add ArrayList<String>.add ArrayList<String>.add ArrayList<String>.add ArrayList<String>.add if ( ) { Arrays.asList ArrayList<String>.addAll } ArrayList<String>.size ArrayList<String>.toArray LinkedHashMap<String[],String>.put
WeakHashMap<Object,Object>.clear
Switch ( ) { default : IllegalArgumentException.new }
ArrayList.new if ( ) { ArrayList.new } for ( ; ; ) { Integer.valueOf ArrayList.add if ( ) { ArrayList.add } } Collections.sort for ( ; ArrayList.size ; ) { ArrayList.get } if ( ) { Collections.sort }
if ( ) { IllegalArgumentException.new }
List<Object>.clear if ( String.length ) { List<Object>.add } else { HashMap.new for ( ) { Map<String,Object>.get if ( ) { Map<String,Object>.put List<Object>.add } } }
for ( Map<Pattern,Integer>.entrySet ) { Entry<Pattern,Integer>.getKey Pattern.matcher while ( Matcher.find ) { for ( Matcher.start Matcher.end ) { if ( Matcher.start Matcher.end ) { } } if ( ) { Entry<Pattern,Integer>.getValue Matcher.start Matcher.end } } }
Dictionary<String,>.size ArrayList<String>.new for ( Dictionary<String,>.keys ; Enumeration<>.hasMoreElements ; ) { Enumeration<>.nextElement if ( ) { for ( ) { if ( String.equalsIgnoreCase ) { IllegalArgumentException.new } } List<String>.add } } List<String>.size List<String>.toArray
do { StringBuffer.charAt } while ( ) ; if ( ) { return ( StringBuffer.substring ) } else { return ( StringBuffer.substring ) }
WeakReference<Object>.new
ConcurrentMap<Integer,Object>.remove
HashMap<String,String>.new Map<String,String>.put
if ( ) { IllegalArgumentException.new } ByteArrayInputStream.new KeyStore.getInstance String.toCharArray KeyStore.load KeyStore.aliases if ( Enumeration<String>.hasMoreElements ) { Enumeration<String>.nextElement KeyStore.getCertificate String.toCharArray KeyStore.getKey } if ( ) { ByteArrayInputStream.reset ByteArrayInputStream.new CertificateFactory.getInstance CertificateFactory.generateCertificate } ByteArrayInputStream.close
UUID.randomUUID UUID.toString Arrays.asList
if ( ) { System.arraycopy }
return ( LongBuffer.position LongBuffer.get )
ArrayList.new for ( ) { Optional<Object>.ifPresent }
if ( Set<String>.contains ) { Set<String>.add } else { Set<String>.add } Set<String>.add Set<String>.remove
while ( Compiler.getOp ) { Switch ( ) { case : Compiler.getStepLocalName if ( String.equals ) { } break default : Integer.toString RuntimeException.new } Compiler.getNextStepPos }
BigInteger.new BigInteger.bitCount
if ( ) { AssertionError.new }
if ( ) { StringIndexOutOfBoundsException.new } System.arraycopy
Collection<Object>.add
Map<Object,Object>.put
Boolean.toString
CompletableFuture.new
return ( AtomicReferenceFieldUpdater.newUpdater )
ArrayList<Object>.new for ( ) { Collection<Object>.size ArrayList<Object>.new for ( ) { List<Object>.add } List<Object>.addAll }
if ( ) { IllegalArgumentException.new } if ( String.length ) { IllegalArgumentException.new } return ( String.new ) return ( String.new )
if ( System.currentTimeMillis ) { return ( ) }
if ( ) { IllegalArgumentException.new }
String.hashCode Math.abs
ArrayList<String>.new ArrayList<String>.new String.toCharArray String.length return ( ArrayList<String>.size ArrayList<String>.toArray )
if ( List<Class>.contains ) { IllegalArgumentException.new } List<Object>.add
if ( ) { IndexOutOfBoundsException.new } System.arraycopy
PrintStream.println
InetAddress.getByName Socket.new Socket.getInputStream Socket.getOutputStream
ArrayList<Object>.new if ( String.isEmpty ) { return ( ) } String.split for ( ) { if ( ) { List<Object>.add } }
Integer.parseInt if ( String.equals String.equals ) { if ( String.equals String.equals ) { if ( String.equals ) { } } } String.new
List<Object>.remove
if ( ) { if ( Float.isNaN Float.isNaN ) { } }
ArrayList<Object>.new if ( String.length String.length ) { StringTokenizer.new while ( StringTokenizer.hasMoreTokens ) { StringTokenizer.nextToken String.trim ArrayList<Object>.add } StringTokenizer.new while ( StringTokenizer.hasMoreTokens ) { StringTokenizer.nextToken String.trim ArrayList<Object>.indexOf if ( ) { ArrayList<Object>.get } else { ArrayList<Object>.add } } if ( ) { ArrayList<Object>.clear } } else { SQLException.new }
if ( ) { return ( List<Object>.size ) }
for ( ) { Map<String,String>.get Double.toString Double.toString Map<String,String>.get Double.toString Double.toString Map<String,String>.get Double.toString Double.toString }
if ( ) { JTable.new JTable.setModel }
if ( ) { String.format } List<Object>.iterator ArrayList<Object>.new while ( Iterator<Object>.hasNext ) { Iterator<Object>.next if ( ) { URI.equals Set<String>.contains if ( ) { List<Object>.add } else { if ( ) { List<Object>.add } } } } if ( List<Object>.isEmpty ) { }
if ( ) { String.format NullPointerException.new }
StringBuilder.new StringBuilder.append String.charAt StringBuilder.append StringBuilder.append String.charAt StringBuilder.append StringBuilder.append String.charAt StringBuilder.append StringBuilder.append String.charAt StringBuilder.append if ( ) { StringBuilder.append String.charAt StringBuilder.append StringBuilder.append String.charAt StringBuilder.append } return ( StringBuilder.toString )
StringBuilder.new StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.toString URI.create URI.toString if ( ) { String.format } Exception.getMessage String.format
DynAnyFactoryHelper.not_applicable MARSHAL.new
return ( System.currentTimeMillis )
return ( HashMap<String,String>.get )
System.arraycopy System.arraycopy
for ( ; ; ) { PrintWriter.println PrintWriter.println PrintWriter.println PrintWriter.println }
if ( ) { SecurityException.new } Element.setAttribute
if ( ) { IllegalArgumentException.new } return ( Appendable.append )
ArrayList<Object>.new if ( ) { Arrays.asList if ( ) { if ( ) { Collection<Object>.add if ( ) { StringBuilder.new for ( ) { StringBuilder.append if ( Collection<Object>.size ) { StringBuilder.append } } StringBuilder.toString Collection<Object>.add } } } }
return ( Math.round )
String.indexOf String.substring String.trim if ( ) { if ( ) { if ( ) { if ( String.equals ) { return ( ) } } } }
if ( ) { Timer.cancel } Timer.new if ( ) { Timer.cancel } Runnable.new TimerTask.new Timer.schedule
Logger.fine
Math.max Math.max Math.max Math.max
String.new
Future<Object>.get Future<Object>.get Thread.sleep
return ( Math.max Math.max )
List<Object>.indexOf for ( List<Object>.size ; ; ) { List<Object>.get } StringBuilder.new StringBuilder.append StringBuilder.append if ( ) { StringBuilder.append for ( ; ; ) { StringBuilder.append List<Object>.get StringBuilder.append } StringBuilder.append } StringBuilder.append for ( List<Object>.size ; ; ) { StringBuilder.append List<Object>.get StringBuilder.append } StringBuilder.toString IllegalArgumentException.new
if ( ) { Math.max }
Pattern.compile Pattern.matcher if ( Matcher.matches ) { } for ( ; Matcher.groupCount ; ) { Matcher.group Map<Integer,String>.put } Map<Integer,String>.getOrDefault Map<Integer,String>.getOrDefault Map<Integer,String>.getOrDefault Map<Integer,String>.getOrDefault Map<Integer,String>.getOrDefault
String.trim
if ( ) { if ( ) { System.currentTimeMillis } return ( ) }
BitSet.new
Collections.singletonMap HashSet<Object>.new while ( ) { if ( Collection<Object>.contains ) { if ( ) { List<Object>.add } Collection<Object>.add } if ( ) { if ( Collection<Object>.contains ) { if ( ) { List<Object>.add } Collection<Object>.add } } } List<Object>.add
IdentityHashMap<Object,Object>.get
if ( SwingUtilities.isEventDispatchThread ) { DocumentEvent.getLength } else { if ( SwingUtilities.isEventDispatchThread ) { DocumentEvent.getDocument Document.getLength } }
if ( ) { IllegalArgumentException.new }
ActionEvent.getSource
ArrayList.new for ( ) { for ( ) { if ( ) { List<Object>.add } } }
for ( ) { for ( ArrayList<Object>.size ; ; ) { ArrayList<Object>.get for ( ArrayList<Object>.size ; ; ) { if ( ArrayList<Object>.get ) { return ( ArrayList<Object>.get ) } } } }
return ( SingleSelectionModel.getSelectedIndex )
if ( ) { if ( ) { if ( ) { if ( ) { ArrayList<Object>.new if ( ) { for ( ) { List<Object>.add } } } if ( List<Object>.isEmpty ) { } } } }
Vector.iterator if ( Iterator.hasNext ) { Iterator.next ComponentUI.getMaximumSize } while ( Iterator.hasNext ) { Iterator.next ComponentUI.getMaximumSize }
for ( ; String.length ; ) { if ( String.charAt Character.isLetter ) { String.charAt } }
Object.getClass if ( Class.isArray ) { } if ( ) { Class.getName }
ArrayList<String>.new HashSet<String>.new if ( String.equals String.equals ) { if ( ) { PrintStream.println return ( ) } HashSet<String>.addAll HashSet<String>.addAll } else { if ( ) { HashSet<String>.addAll } HashSet<String>.addAll } ArrayList<String>.addAll
Switch ( ) { default : if ( String.equals ) { return ( ) } } IllegalArgumentException.new
return ( String.isEmpty String.charAt )
List<Object>.stream Stream.map Collectors.toList Stream.collect
ArrayList<String>.new
URL.toString if ( ) { HashMap.new Map.put Map.put } if ( ) { Document.getImplementation }
Switch ( ) { case : return ( DeflaterOutputStream.new ) default : UnsupportedOperationException.new }
if ( List<Object>.isEmpty ) { return ( ) } return ( List<Object>.get )
if ( ) { if ( ) { return ( Boolean.booleanValue ) } return ( String.equals ) }
if ( ) { SQLException.new } DriverManager.setLoginTimeout Properties.put if ( String.isEmpty ) { Properties.put String.new Properties.put } DriverManager.getConnection Connection.setAutoCommit
if ( String.startsWith ) { return ( String.substring URL.new ) return ( ) } if ( String.startsWith ) { return ( URL.new ) return ( ) } String.split if ( String.equals ) { return ( URL.new ) } else { return ( URL.new ) } MalformedURLException.getMessage
String[].clone
JComboBox<Object>.setEnabled JTextField.setEnabled JTextField.setEnabled JButton.requestFocusInWindow
return ( Arrays.asList )
if ( List<Object>.size ) { List<Object>.add }
ArrayList<Object>.add
LinkedHashMap.new for ( ) { String.length String.substring Pattern.matcher Matcher.matches Pattern.pattern String.format ArrayList.new List<String>.add List<String>.addAll for ( ; Matcher.groupCount ; ) { Matcher.group List<String>.add } String.replaceAll LinkedHashMap<List<String>,Object>.get if ( ) { String.format } else { LinkedHashMap<List<String>,Object>.put } } ArrayList.new LinkedHashMap<List<String>,Object>.values List<Object>.addAll
if ( Double.isNaN ) { }
return ( String.format )
HashMap<String,Object>.new
ThreadGroup.addThread
ArrayList<Object>.new for ( ) { for ( ) { if ( ) { List<Object>.add break } } if ( ) { List<Object>.add } }
TreeMap.values Collection.size Collection.iterator while ( Iterator.hasNext ) { Iterator.next Integer.intValue }
if ( CharSequence.length ) { return ( ) } Math.min while ( ) { Math.max } if ( ) { if ( ) { if ( ) { while ( ) { CharSequence.subSequence CharSequence.toString } CharSequence.subSequence } } }
List<Object>.add
JPanel.new JLabel.new JButton.new JButton.new JLabel.new JButton.new JButton.new JPanel.new JLabel.new JLabel.new JLabel.new JLabel.new Font.new JLabel.setFont JLabel.setText BorderFactory.createEtchedBorder JScrollPane.setBorder JButton.setText ActionListener.new JButton.addActionListener JButton.setText ActionListener.new JButton.addActionListener JLabel.setHorizontalAlignment BorderFactory.createEtchedBorder JLabel.setBorder JButton.setText ActionListener.new JButton.addActionListener JButton.setText ActionListener.new JButton.addActionListener JPanel.setLayout JLabel.setText JLabel.setText JPanel.setLayout
PrintStream.println PrintStream.println ArrayList.new PrintStream.println ArrayList<Object>.add PrintStream.println ArrayList<Object>.add ArrayList<Object>.size ArrayList<Object>.toArray
for ( ; ; ) { List<Object>.size List<Object>.get BigDecimal.new BigDecimal.multiply List<Object>.get } if ( ) { List<Object>.size List<Object>.get } Callable<Void>.new List<Object>.size List<Object>.get if ( ) { List<Object>.get List<Object>.get } else { List<Object>.get List<Object>.get } if ( ) { List<Object>.get BigDecimal.new BigDecimal.multiply List<Object>.get List<Object>.get }
UnsatisfiedLinkError.getMessage NoClassDefFoundError.getMessage
if ( ) { if ( ) { if ( String.equals ) { } } } return ( Long.intValue )
Switch ( ) { case : return ( DataBufferByte.new ) case : return ( DataBufferShort.new ) case : return ( DataBufferUShort.new ) case : return ( DataBufferInt.new ) case : return ( DataBufferFloat.new ) case : return ( DataBufferDouble.new ) default : UnsupportedOperationException.new }
Element.getTextContent String.trim Element.getTextContent String.trim Class.forName if ( Class.isAssignableFrom ) { return ( ) } Class<>.newInstance HashMap.new for ( ) { Element.getAttribute if ( String.trim String.isEmpty ) { continue } Element.getTextContent String.trim Map<String,String>.put } Map<String,String>.get return ( Collections.unmodifiableMap )
return ( ResultSet.getBytes )
return ( String.hashCode )
return ( Map<Object,Double>.get )
ReentrantReadWriteLock.readLock Lock.lock Lock.unlock
for ( Properties.entrySet ) { Entry<Object,Object>.getValue Object.toString String.split Locale.getDefault Map<String,Object>.put }
return ( Integer.intValue )
KeyStroke.getKeyStroke InputMap.put ActionMap.put KeyStroke.getKeyStroke InputMap.put if ( List<Object>.size ) { List<Object>.get } AbstractAction.new ActionMap.put KeyStroke.getKeyStroke InputMap.put if ( List<Object>.size ) { List<Object>.get } AbstractAction.new ActionMap.put if ( KeyEvent.getModifiersEx ) { } KeyListener.new
OutputStream.write
for ( ; ; ) { IntFunction<Object>.apply if ( ) { IllegalArgumentException.new } }
return ( Math.exp )
BitSet.and return ( Math.max )
RandomAccessFile.read if ( ) { EOFException.new }
if ( ) { IllegalArgumentException.new } if ( String.isEmpty ) { IllegalArgumentException.new } if ( String.length ) { String.length IllegalArgumentException.new }
Date.new
JTextArea.setEditable
if ( ) { JTable.getSelectedRow } JTable.getSelectedColumn if ( ) { if ( ) { JOptionPane.showOptionDialog } }
Elements.getTypeElement TypeElement.asType ProcessingEnvironment.getTypeUtils TypeElement.asType
if ( ) { if ( String.length ) { } }
Process.resume
if ( ) { IllegalStateException.new } String.charAt
return ( String.new )
return ( Arrays.asList )
if ( String.length ) { Integer.parseInt } else { if ( String.length ) { } }
Boolean.valueOf
Statement.executeQuery ResultSet.next ResultSet.getString String.split Integer.parseInt
return ( Character.toLowerCase Character.toLowerCase )
for ( ) { continue BiConsumer<Object,Object>.accept break }
Field.getAnnotation Field.getAnnotation if ( ) { if ( ) { Field.getName } if ( ) { Field.getName } } if ( ) { if ( ) { Field.getType } } Field.getName Field.getType
Class.getName Logger.getLogger Logger.log
StringBuffer.new StringBuffer.append return ( StringBuffer.toString )
if ( ) { if ( ) { Thread.currentThread Thread.interrupt } }
ArrayList.new Map<String,Object>.get if ( Set<String>.isEmpty ) { for ( ) { List<Object>.add } } JAXBException.getCause
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } return ( File.getAbsolutePath )
for ( Map<String,String>.keySet ) { }
File.createTempFile Random.new for ( ; Random.nextInt ; ) { FileOutputStream.new Random.nextInt Random.nextBytes FileOutputStream.write System.gc FileOutputStream.close FileInputStream.new FileInputStream.read Arrays.sort FileInputStream.close FileOutputStream.new FileOutputStream.write FileOutputStream.write FileOutputStream.close }
Class.getName CPStringBuilder.append CPStringBuilder.append CPStringBuilder.append CPStringBuilder.append CPStringBuilder.append CPStringBuilder.append return ( CPStringBuilder.toString )
Double.isNaN Math.pow Math.pow Math.pow
Map<Object,Double>.put
List<Object>.clear List<Object>.clear Set<Object<Object>>.clear Set<Object<Object>>.clear if ( ) { Set<Object<Object>>.remove } if ( ) { Set<Object<Object>>.remove }
if ( ) { Integer.valueOf }
ManagementFactory.getRuntimeMXBean RuntimeMXBean.getInputArguments ArrayList.new if ( List<String>.contains ) { List<String>.add } if ( List<String>.contains ) { List<String>.add }
InputStream.read
System.getProperty System.getProperty System.getProperty System.getProperty System.getProperty System.getProperty
if ( ) { if ( ) { Class.getName } }
if ( ) { IllegalStateException.new }
TreeMap.new for ( ) { Map.put Map.put }
InvocationTargetException.getCause Runnable.new Executor.execute
ArrayList.new ArrayList.new if ( ) { QName.new ArrayList.add if ( ) { ArrayList.add } } if ( ) { QName.new ArrayList.add if ( ) { ArrayList.add } } if ( ) { QName.new ArrayList.add ArrayList.add } return ( ArrayList.toArray ArrayList.toArray )
if ( ) { String.new Writer.write }
if ( String.equals ) { return ( ) }
ObjectStreamClass.forClass if ( ) { ObjectStreamClass.fields } DataOutputStream.writeShort for ( ; ; ) { ObjectStreamField.writeField if ( ) { ObjectStreamField.getTypeString } }
SynthContext.getComponent Component.getComponentOrientation ComponentOrientation.isLeftToRight if ( SynthContext.getComponent ) { } if ( ) { AffineTransform.new AffineTransform.scale Math.toRadians AffineTransform.rotate } else { if ( ) { AffineTransform.new Math.toRadians AffineTransform.rotate AffineTransform.translate } else { if ( ) { AffineTransform.new AffineTransform.translate AffineTransform.scale AffineTransform.translate } } }
HashMap<Object,Integer>.remove
if ( ) { TimeUnit.toString String.toLowerCase String.format TimeoutException.new }
for ( ) { if ( ) { StringBuilder.append if ( ) { StringBuilder.append } return ( ) } StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append Integer.toString Map<String,Object>.put }
return ( Set.iterator )
if ( String.startsWith ) { File.new } else { File.new }
BorderLayout.new
Collections.emptySet Collections.emptySet
DataSource.getConnection Connection.close
StringBuilder.new Charset.defaultCharset InputStreamReader.new BufferedReader.new BufferedReader.readLine while ( ) { StringBuilder.append System.getProperty StringBuilder.append BufferedReader.readLine } BufferedReader.close return ( StringBuilder.toString )
if ( ) { System.currentTimeMillis }
if ( ) { if ( ) { PrintStream.println } return ( ) } if ( ) { if ( ) { PrintStream.println } return ( ) }
Logger.log if ( ) { Logger.log if ( ) { Logger.log if ( ) { Logger.log } else { Logger.log } } else { Logger.log } } else { Logger.log }
if ( ) { NullPointerException.new }
ConcurrentHashMap<Object,Object>.remove
Error.new
ArrayList<Object>.add
ArrayList.new for ( ) { List<Object>.add }
for ( ; List<Object>.size ; ) { List<Object>.get }
if ( String.indexOf ) { if ( String.equals ) { } } Exception.getMessage
if ( ) { if ( ) { if ( ) { ArrayList<Object>.size for ( ; ; ) { ArrayList<Object>.get } } } }
if ( List<Integer>.contains ) { BufferedOutputStream.write BufferedOutputStream.write for ( ) { if ( ) { BufferedOutputStream.write } else { BufferedOutputStream.write BufferedOutputStream.write BufferedOutputStream.write BufferedOutputStream.write } } BufferedOutputStream.flush }
StringBuilder.new StringBuilder.append for ( ; ; ) { if ( ) { StringBuilder.append } Integer.toHexString StringBuilder.append } StringBuilder.append return ( StringBuilder.toString )
String.valueOf File.getAbsolutePath
Properties.setProperty Properties.setProperty Properties.setProperty if ( ) { List<String>.size for ( ; List<String>.size ; ) { List<String>.get List<String>.get String.indexOf } } Arrays.asList
Path.toAbsolutePath Path.toString Path.toAbsolutePath Path.toString String.replace
if ( ) { IllegalArgumentException.new }
if ( ) { NullPointerException.new }
Document.getElementsByTagName NodeList.item Element.getAttributeNode Attr.setPrefix
Vector<Object>.new if ( ) { Vector<Object>.addElement }
Switch ( ) { default : Switch ( ) { case : Long.parseLong } if ( ) { Integer.new } } Switch ( ) { case : if ( String.equalsIgnoreCase ) { return ( ) } default : Integer.new }
RuntimeException.new
if ( ) { IllegalArgumentException.new } InetAddress.getAddress System.arraycopy Arrays.sort
return ( Map.size )
if ( ) { IllegalArgumentException.new } if ( ) { ProfileDataException.new }
StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append if ( ) { StringBuilder.append StringBuilder.append } if ( ) { StringBuilder.append StringBuilder.append }
MARSHAL.new
ByteArrayOutputStream.reset ByteArrayOutputStream.toByteArray
return ( Integer.intValue )
System.currentTimeMillis
String.length String.length StringBuilder.new while ( ) { if ( String.charAt String.charAt ) { if ( ) { String.substring } } } return ( StringBuilder.toString )
StringBuilder.new Math.sqrt for ( ; ; ) { StringBuilder.append for ( ; ; ) { for ( ; ; ) { Iterator<Object>.next if ( ) { StringBuilder.append } StringBuilder.append StringBuilder.append } StringBuilder.append } StringBuilder.append } return ( StringBuilder.toString )
if ( ) { Integer.valueOf }
for ( ) { if ( Class<>.isInstance ) { return ( ) } }
if ( ) { IOException.new } List<>.size
return ( String.valueOf )
return ( String.isEmpty String.charAt )
if ( File.isDirectory ) { File.list for ( ) { File.new } } return ( File.delete )
Map<String,Object>.get Map<String,String>.get Class.forName Class<>.getDeclaredMethod return ( Method.invoke )
ArrayList<Object<Object>Object>.new
if ( ) { IllegalArgumentException.new }
if ( ) { ContentHandler.startPrefixMapping }
Date.new Date.getTime if ( ) { ArrayList<Object>.new } if ( ) { for ( ) { if ( ) { if ( String.length ) { } } ArrayDeque<Object>.add } }
if ( ) { IllegalArgumentException.new }
return ( String.equals )
if ( Double.isNaN ) { return ( ) } return ( Double.new )
System.setProperty System.currentTimeMillis String.equals System.currentTimeMillis String.equals System.currentTimeMillis String.equals String.equals String.equals System.getProperties Properties.remove
HashSet.new for ( ) { Set<Object>.add }
RandomAccessFile.close
RuntimeException.new Runnable.new ExecutorService.submit for ( ) { if ( List<String>.contains ) { if ( Set<String>.remove ) { } } } for ( ) { if ( Set<String>.add ) { } }
System.getProperty if ( ) { File.new if ( File.exists ) { return ( ) } } File.createTempFile File.getParentFile File.delete
if ( ) { Thread.new Thread.start }
JTextField.getText Double.parseDouble JTextField.getText Double.parseDouble JTextField.getText Double.parseDouble JTextField.getText Double.parseDouble
StringBuffer.new while ( String.length ) { String.charAt if ( ) { StringBuffer.append while ( String.length String.charAt ) { } } else { StringBuffer.append } } return ( StringBuffer.toString )
return ( JAXBElement<Object>.new )
Boolean.valueOf
Class.getSimpleName UnsupportedOperationException.new
return ( List<Object>.get )
if ( ) { Integer.new } if ( ) { Integer.new } return ( Exception.getMessage )
HashSet<Object>.new for ( ) { Set<Object>.addAll }
if ( ) { IllegalArgumentException.new }
HashSet.new if ( Collection.size ) { Collection.iterator while ( Iterator.hasNext ) { Iterator.next Collection.size if ( ) { Collection.iterator while ( Iterator.hasNext ) { Iterator.next Set.add } if ( Collection.isEmpty ) { } } } }
if ( ) { if ( Double.isNaN ) { } } ActionListener.new if ( ) { if ( Double.isNaN ) { } } ActionListener.new
Hashtable.get if ( ) { Hashtable.put }
if ( List<Object>.size ) { List<Object>.size } else { if ( List<Object>.get List<Object>.get List<Object>.get ) { } }
if ( ) { Vector.insertElementAt } else { Vector.addElement }
Map<Object,Object>.put
ArrayList<Object>.new for ( ; ArrayList<Object>.size ; ) { if ( ArrayList<Object>.get ) { ArrayList<Object>.get ArrayList<Object>.add } } ArrayList<Object>.new for ( ; ArrayList<Object>.size ; ) { if ( ArrayList<Object>.get ) { ArrayList<Object>.get ArrayList<Object>.add } }
InputStream.read InputStream.read InputStream.read InputStream.read
LinkedList<Object>.new do { List<Object>.addAll if ( ) { Thread.sleep } } while ( Map<String,List<Object>>.get ) ; if ( ) { Thread.currentThread Thread.interrupt }
Object.getMessage
System.currentTimeMillis
if ( ) { HttpURLConnection.setRequestProperty } if ( ) { HttpURLConnection.setRequestProperty } HttpURLConnection.getResponseCode HttpURLConnection.getResponseMessage
if ( ) { IllegalArgumentException.new } IllegalStateException.new
ThreadLocal<Object>.get if ( ) { Thread.currentThread ConcurrentHashMap.get } if ( ) { Thread.currentThread Thread.getContextClassLoader }
if ( String.indexOf ) { return ( ) } StringBuffer.new StringTokenizer.new while ( StringTokenizer.hasMoreTokens ) { StringTokenizer.nextToken if ( String.indexOf ) { String.indexOf String.substring String.indexOf String.substring if ( ) { StringBuffer.append StringBuffer.append } } else { StringBuffer.append StringBuffer.append } } return ( StringBuffer.toString )
for ( List.iterator ; Iterator.hasNext ; ) { Iterator.next for ( List.iterator ; Iterator.hasNext ; ) { Iterator.next if ( String.equals ) { } } }
if ( ) { if ( ) { List.iterator while ( Iterator.hasNext ) { Iterator.next } } } Integer.parseInt
while ( Iterator<URI>.hasNext ) { Iterator<URI>.next }
Map<String,Object>.put Map<String,Object>.get if ( List<Object>.isEmpty ) { System.currentTimeMillis String.valueOf List<Object>.add }
return ( String.startsWith )
ArrayList.new return ( List<Class<Object>>.size List<Class<Object>>.toArray )
if ( ) { for ( ) { if ( BitSet.get ) { } } }
for ( ) { Class<>.newInstance if ( String.equals ) { return ( ) } }
String.replaceAll String.replaceAll String.replaceAll
ArrayList<Integer>.new ArrayList<Boolean>.new for ( ; ; ) { Switch ( ) { case : List<Integer>.add List<Boolean>.add break } }
if ( ) { NullPointerException.new } else { if ( ) { NullPointerException.new } } ArrayList<Locale>.new Locale.getLanguage Locale.getCountry Locale.getVariant if ( String.equals ) { Locale.new List<Locale>.add } if ( String.equals ) { Locale.new List<Locale>.add } if ( String.equals ) { Locale.new List<Locale>.add } List<Locale>.add
for ( ; ListIterator<Object>.hasNext ; ) { ListIterator<Object>.next ListIterator<Object>.set }
ArrayList<Object>.new for ( ; ; ) { List<Object>.add }
for ( ) { if ( String.startsWith ) { } }
Math.abs
ArrayList.new if ( ) { for ( ) { Long.parseUnsignedLong List<Long>.add } }
JComponent.getPreferredSize JComponent.getFont JComponent.getFontMetrics FontMetrics.charWidth
PrintStream.print PrintStream.printf PrintStream.println PrintStream.println System.exit
Vector<String>.size ArrayList<Object>.new for ( ) { HashMap<String,Object>.get ArrayList<Object>.add }
Integer.valueOf
if ( ) { if ( ) { Math.min } }
HashSet<Object>.new HashSet<Object>.removeAll HashSet<Object>.removeAll HashSet<Object>.removeAll if ( HashSet<Object>.size ) { if ( System.currentTimeMillis ) { return ( ) } HashSet<Object>.new HashSet<Object>.removeAll HashSet<Object>.removeAll } if ( HashSet<Object>.size ) { if ( ) { HashSet<Object>.iterator } else { if ( ) { ArrayList<Object>.new } } } if ( ) { Set<Object>.add }
ArrayList<String>.new for ( ) { List<String>.add }
List<Object>.add
UnsupportedOperationException.new
if ( ) { List<Object>.add }
CharSequence.length return ( CharSequence.subSequence )
URL.new
return ( Math.round )
OutputStream.write_long OutputStream.write_wchar_array
BitSet.new if ( ) { BitSet.set }
return ( SocketImpl.getOption Boolean.booleanValue )
for ( HashMap<Object,HashSet<Object>>.keySet ) { }
ArrayList<Object>.new if ( ArrayList<Object>.size ) { return ( ) }
return ( Stack.size Node.getNodeType )
Map<String,Object>.entrySet Set<Entry<String,Object>>.size for ( ) { Entry<String,Object>.getKey Entry<String,Object>.getValue }
ArrayList<Object>.new for ( ; ; ) { List<Object>.add } ArrayList<Object>.new List<Object>.add List<Object>.add
return ( Integer.parseInt )
if ( ) { Integer.valueOf IllegalArgumentException.new } if ( ) { Integer.valueOf IllegalArgumentException.new }
if ( ) { IllegalStateException.new } if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } if ( String.equals ) { String.format IllegalArgumentException.new }
Map<String,Object>.clear
Math.sqrt Math.cos Math.sin
StringBuffer.new StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append StringBuffer.append return ( StringBuffer.toString )
NavigableMap<Object,Object>.get if ( ) { NavigableMap<Object,Object>.put }
Calendar.getInstance Calendar.setTime Calendar.add return ( Calendar.getTime )
if ( ) { IllegalArgumentException.new } String.format
Dimension.new
StringBuilder.new StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append return ( StringBuilder.toString )
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } return ( return ( ) )
if ( String.startsWith String.startsWith ) { return ( ) } if ( String.equalsIgnoreCase ) { if ( String.equalsIgnoreCase ) { } }
while ( Enumeration<Object>.hasMoreElements ) { Enumeration<Object>.nextElement }
if ( ) { Integer.valueOf }
for ( String.toCharArray ) { if ( Character.isUpperCase ) { String.format IllegalArgumentException.new } }
if ( String.equals ) { return ( ) }
String.isEmpty
return ( Integer.intValue )
Class.getName
if ( ) { IOException.new } while ( ) { Reader.read if ( ) { String.new String.getBytes } } System.arraycopy
Math.max Math.min for ( ; ; ) { StringBuffer.append } for ( ; ; ) { StringBuffer.append }
PrintStream.println
PrintStream.println PrintStream.println
EventListenerList.add
for ( ; ; ) { StringBuilder.append }
if ( ) { NullPointerException.new } List<Object>.set if ( ) { List<Object>.set }
return ( Arrays.asList )
File.new File.mkdirs Paths.get FileWriter.new IOException.printStackTrace
String.valueOf BigInteger.new BigInteger.new BigInteger.new BigInteger.new PrintStream.println while ( ) { BigInteger.new BigInteger.add if ( BigInteger.remainder BigInteger.compareTo BigInteger.remainder BigInteger.compareTo ) { PrintStream.println } }
String.length
if ( ) { List.size for ( ; ; ) { List.get } }
if ( ) { Map<Class<Object>,NumberFormat>.size Map<Class<Object>,NumberFormat>.remove if ( Map<Class<Object>,NumberFormat>.size ) { if ( Map<Class<Object>,NumberFormat>.size ) { HashMap.new } } }
return ( List<Object>.get )
if ( ) { IllegalArgumentException.new }
RuntimeException.new
return ( return ( NodeList.getLength ) return ( NodeList.item ) UnsupportedOperationException.new Iterator<Node>.new )
Vector.new while ( Vector.size ) { Vector.elementAt while ( String.length ) { if ( String.charAt ) { String.length } else { String.substring } } Vector.addElement }
if ( String.charAt ) { return ( ) } String.length StringBuilder.new String.charAt StringBuilder.append String.substring StringBuilder.append return ( StringBuilder.toString )
if ( ) { Class.getName } Class.getName
return ( Map<Object,Object>.keySet )
List<String>.add
return ( Math.log )
ByteArrayInputStream.new DataInputStream.new DataInputStream.readLong
for ( ) { if ( ) { if ( HashMap<String,Object>.containsKey ) { HashMap<String,Object>.get Map<Object,Object>.put } } }
return ( String.equalsIgnoreCase )
Class<>.getName if ( CopyOnWriteArraySet<String>.contains ) { CopyOnWriteArraySet<String>.add }
List<Object>.size for ( ; ; ) { List<Object>.get }
if ( ) { Entry<String,Object>.getKey Entry<String,Object>.getValue return ( ) }
AtomicReference<Object>.get if ( ) { PrintStream.println return ( ) }
for ( ) { if ( Annotation.annotationType ) { return ( ) } }
List<String>.size ArrayList.new
File.new File.new
Vector<Object>.clear
if ( ) { Integer.intValue }
if ( String.equals ) { }
JLabel.new JLabel.new JButton.new Font.new JLabel.setFont JLabel.setText JLabel.setText JButton.setText ActionListener.new JButton.addActionListener Container.setLayout
ArrayList.new for ( ; Math.max ; ) { System.currentTimeMillis String.getBytes Long.toString if ( ) { PrintStream.println PrintStream.println } List<Object>.add }
Stack<Character>.pop Stack<Integer>.pop Stack<Integer>.pop if ( ) { Stack<Integer>.push } else { if ( ) { Stack<Integer>.push } else { if ( ) { Stack<Integer>.push } else { if ( ) { Stack<Integer>.push } } } }
Collection<String>.size ArrayList<Object>.new for ( ) { List<Object>.add } FileNotFoundException.getMessage IOException.getMessage
return ( Integer.intValue )
for ( ) { if ( Map<Object,Object>.containsKey ) { Map<Object,Object>.put } }
if ( String.isEmpty ) { return ( ) }
Hashtable.new
if ( VariableElement.getKind ) { return ( VariableElement.getEnclosedElements ) }
Properties.getProperty if ( ) { Integer.parseInt Properties.remove } Properties.getProperty if ( ) { Integer.parseInt Properties.remove } if ( Properties.size ) { return ( ) }
if ( ) { Integer.valueOf }
File.new if ( File.length ) { File.length IOException.new } File.length FileInputStream.new BufferedInputStream.new System.arraycopy
HashSet<Object>.new if ( ) { for ( ) { Set<Object>.add } }
Types.isSameType Types.isSubtype if ( ) { if ( ) { if ( ) { if ( ) { if ( Types.isSubtype Types.isSameType ) { } } } } }
Set<Object>.size Callable<Void>.new
for ( ; ; ) { if ( ) { if ( ) { ArrayList.new } ArrayList.add } } if ( ) { for ( ArrayList.size ; ; ) { ArrayList.get } }
Dimension.new if ( ) { if ( ) { Box.createRigidArea Container.add } } for ( ; ; ) { Box.createRigidArea Container.add } for ( ; ; ) { Box.createRigidArea Container.add }
return ( Integer.intValue )
KeyboardFocusManager.setDefaultFocusTraversalPolicy
Component.getBounds if ( ) { Component.validate }
if ( ) { IllegalStateException.new }
StringBuilder.append
ObjectInputStream.defaultReadObject if ( ) { ResourceBundle.getBundle }
if ( ) { StringBuilder.new StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append return ( StringBuilder.toString ) }
return ( Vector<String>.size )
Object.new Object.wait Thread.new Thread.setName Thread.setDaemon Thread.join Thread.new Thread.setName Thread.setDaemon Thread.getState State.equals Thread.getState State.equals Thread.start Thread.start Object.notifyAll
CardLayout.new GridBagLayout.new EmptyBorder.new JLabel.new JLabel.new Insets.new Insets.new JLabel.new JLabel.new JLabel.new
Set<Socket>.add
AffineTransform.getScaleX AffineTransform.getShearY AffineTransform.getScaleY AffineTransform.getTranslateX AffineTransform.getTranslateY AffineTransform.setTransform
for ( ; ; ) { List.add }
if ( ) { return ( Clob.length Clob.getSubString ) } if ( ) { return ( Blob.length Blob.getBytes ) }
Map<String,Object>.get if ( ) { Map<String,Object>.put }
if ( String.indexOf ) { String.substring } if ( String.indexOf ) { String.substring } String.indexOf if ( ) { String.substring }
StringBuilder.new StringBuilder.append StringBuilder.append StringBuilder.append if ( ) { StringBuilder.append } else { StringBuilder.append } StringBuilder.append if ( ) { StringBuilder.append } else { StringBuilder.append } if ( ) { StringBuilder.append StringBuilder.append } return ( StringBuilder.toString )
return ( Stream.of )
if ( ) { if ( Set<String>.contains ) { } if ( Set<String>.contains ) { } return ( ) }
if ( ) { CacheResponse.getHeaders CacheResponse.getBody }
Object.getClass Object.getClass Class.getMethod Method.invoke
if ( ) { TypeVariable<>.getGenericDeclaration Map<TypeVariable<Object>,Type>.get return ( ) } if ( ) { GenericArrayType.getGenericComponentType return ( Array.newInstance Object.getClass ) } IllegalArgumentException.new
BigInteger.new BigInteger.new BigInteger.subtract BigInteger.toByteArray BigInteger.signum
Stack<Object>.pop for ( ; ; ) { if ( ) { Double.floatValue } }
List<Object>.size for ( ; ; ) { List<Object>.get } List<Object>.size for ( ; ; ) { List<Object>.get }
return ( Integer.intValue )
System.exit WindowAdapter.new
if ( ) { ArrayList.new } List.add
Switch ( ) { case : if ( ) { Vector.clear Vector.addAll } break }
if ( ) { String.trim return ( ) } String.indexOf if ( ) { if ( String.length ) { String.substring String.substring } }
if ( ) { IllegalArgumentException.new } X509CRLSelector.getCertificateChecking X509CRLSelector.getDateAndTime X509CRLSelector.getIssuerNames IOException.getMessage IllegalArgumentException.new X509CRLSelector.getIssuers X509CRLSelector.getMaxCRL X509CRLSelector.getMinCRL
List<Object>.size Math.max for ( ) { List<Object>.remove } if ( List<Object>.size ) { List<Object>.size List<Object>.size List<Object>.subList }
Map<String,Object>.get if ( ) { return ( Integer.parseInt ) return ( ) }
if ( ) { IllegalArgumentException.new }
for ( ) { Long.toString RuntimeException.new } List<Object>.clear
Exception.new
return ( return ( ) return ( ) UnsupportedOperationException.new Iterator<Object>.new )
for ( ) { if ( ) { FloatBuffer.rewind } FloatBuffer.rewind IntBuffer.limit IntBuffer.rewind }
ArrayList.new for ( ) { if ( ) { List<String>.add } }
if ( ) { if ( ) { if ( ) { return ( Double.isNaN Double.isNaN ) } } }
for ( ; ; ) { if ( ) { if ( String.equals ) { BigDecimal.intValue } } }
JPanel.new JButton.new JButton.setActionCommand JButton.addActionListener JPanel.add
if ( ) { Exception.new } Stack.new
JPanel.new BorderLayout.new JPanel.setLayout JCheckBox.new JCheckBox.isSelected ChangeListener.new JCheckBox.addChangeListener JCheckBox.setSelected JPanel.add
for ( ; ; ) { Math.pow }
List<Object>.add
LinkedList<Object>.new Map<String,Object>.values LinkedList<Object>.new Comparator<Object>.new Collections.sort for ( ) { for ( ) { for ( ) { if ( String.equals ) { if ( ) { List<Object>.add } } } } }
if ( ) { Integer.valueOf }
KeyStore.getInstance KeyStore.load CertificateFactory.getInstance ByteArrayInputStream.new CertificateFactory.generateCertificate KeyFactory.getInstance if ( String.isEmpty ) { EncryptedPrivateKeyInfo.new String.toCharArray PBEKeySpec.new EncryptedPrivateKeyInfo.getAlgName SecretKeyFactory.getInstance SecretKeyFactory.generateSecret EncryptedPrivateKeyInfo.getKeySpec } else { PKCS8EncodedKeySpec.new } KeyFactory.generatePrivate String.toCharArray KeyStore.setKeyEntry FileOutputStream.new String.toCharArray KeyStore.store Exception.getMessage PrintStream.println Exception.printStackTrace
if ( ) { Integer.valueOf }
File.delete File.delete
String.length for ( ; String.length ; ) { String.charAt }
ReentrantReadWriteLock.readLock Lock.lock Lock.unlock
if ( ) { PrintStream.println }
List<Object<Object>>.add
Objects.requireNonNull
PriorityBlockingQueue<Object>.add
if ( ) { return ( Inet4Address.getCanonicalHostName ) }
for ( ; ; ) { if ( ) { if ( String.equals ) { } } }
ArrayList.new if ( ) { if ( ) { for ( ) { if ( List<Integer>.isEmpty ) { if ( ) { List<Integer>.toString } return ( ) } } } }
HashMap<String,List>.new for ( ) { StringBuilder.new StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.toString Connection.prepareCall ArrayList<Object>.new StringBuilder.toString List<Object>.add StringBuilder.toString List<Object>.add Map<String,List>.put }
if ( ) { if ( ) { RuntimeException.new } }
if ( ) { IllegalArgumentException.new }
Vector<Object>.elements while ( Enumeration<Object>.hasMoreElements ) { Enumeration<Object>.nextElement }
HashMap<String,String>.new for ( Map<String,Object>.keySet ) { Map<String,Object>.get HashMap<String,String>.put }
MessageDigest.getInstance DigestOutputStream.new DigestOutputStream.write DigestOutputStream.write
if ( Optional<String>.isPresent ) { return ( Optional<String>.get Optional.of ) } else { return ( Optional.empty ) }
InputStream.read if ( ) { Checksum.update }
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } Point.new
while ( ByteBuffer.get ) { }
Vector.addElement
if ( ) { IllegalArgumentException.new }
if ( ) { IllegalArgumentException.new } if ( ) { RuntimeException.new }
while ( ) { Switch ( ) { case : String.charAt PrintStream.println } }
if ( ) { if ( ) { if ( ) { Integer.valueOf IllegalStateException.new } } }
while ( RowSet.next ) { RowSet.getInt RowSet.getString if ( RowSet.getInt ) { List<Object>.add JPopupMenu.add } } SQLException.getLocalizedMessage if ( List<Object>.size ) { if ( List<Object>.size ) { List<Object>.get } else { if ( JComponent.isShowing ) { JComponent.getHeight JPopupMenu.show } } }
if ( Map.containsKey ) { return ( ) } Map.get return ( Map.get )
if ( ) { if ( Math.abs Math.abs ) { return ( ) } }
Math.max
Iterable<Object>.iterator return ( Iterator<Object>.hasNext Iterator<Object>.next )
if ( ) { Integer.valueOf }
Set<Object>.add
StringBuffer.new StringBuffer.append return ( StringBuffer.toString )
String.format String.replace String.replace String.replaceAll String.replace
BigDecimal.new BigDecimal.movePointLeft BigDecimal.setScale
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } if ( ) { Map<String,Object>.get Map<String,Object>.get Map<String,Object>.get }
return ( ArrayList<Object>.size )
Socket.getInputStream BufferedInputStream.new Scanner.new Scanner.useLocale PrintStream.println
PropertyChangeSupport.removePropertyChangeListener
if ( List<Object>.contains ) { List<Object>.add }
while ( ) { CharSequence.length }
Logger.log
if ( ) { URI.toString }
if ( ) { IndexOutOfBoundsException.new }
Hashtable.get
File.getName
for ( ; ; ) { String.trim }
if ( ) { return ( String.getBytes ) } StringBuilder.new ConcurrentLinkedQueue<Object>.iterator while ( Iterator<Object>.hasNext ) { Iterator<Object>.next } StringBuilder.append if ( ) { StringBuilder.toString String.getBytes System.arraycopy System.arraycopy } else { StringBuilder.toString String.getBytes }
Calendar.setTime Calendar.get Calendar.get Calendar.get String.new String.getBytes System.arraycopy
if ( ) { Integer.valueOf } else { if ( ) { Long.valueOf } else { if ( ) { Boolean.valueOf } } }
Math.min
return ( return ( ) return ( Integer.valueOf ) Iterator<Integer>.new )
if ( ) { IllegalArgumentException.new }
if ( String.startsWith ) { String.replace } else { if ( String.startsWith ) { String.replace } }
if ( ) { if ( ) { InvalidParameterException.new } }
System.getProperty return ( Properties.getProperty )
if ( ) { NullPointerException.new } return ( NativeDecimalFormat.formatToCharacterIterator )
if ( ) { IllegalArgumentException.new }
for ( ) { if ( Predicate<Object>.test ) { Consumer<Object>.accept } }
Stack.pop
return ( Math.max )
StringReader.new StringBuilder.new while ( ) { if ( ) { String.substring } if ( Set<String>.contains ) { String.substring } else { if ( String.startsWith ) { String.substring } } } if ( ) { String.substring } return ( StringBuilder.toString )
List<Object>.add
Statement.executeUpdate Statement.executeUpdate Statement.executeUpdate Statement.executeQuery ResultSet.next ResultSet.getInt ResultSet.getInt ResultSet.next ResultSet.getInt ResultSet.getInt ResultSet.close Statement.executeQuery ResultSet.next ResultSet.deleteRow ResultSet.next ResultSet.getInt ResultSet.deleteRow ResultSet.close Statement.executeQuery ResultSet.next ResultSet.close Statement.executeUpdate Statement.close
if ( Collection<>.isEmpty ) { return ( ) } if ( ) { Collection<>.iterator }
System.getProperty if ( String.isEmpty ) { } File.new if ( File.exists ) { Properties.new Properties.load for ( Properties.keySet ) { Object.toString System.getProperty if ( String.isEmpty ) { Object.toString Properties.getProperty if ( ) { Object.toString System.setProperty Object.toString Object.toString Map<String,Object>.put } } } }
HashSet<String>.add HashMap<String,HashMap<Integer,Object>>.get if ( ) { HashMap<Integer,Object>.new HashMap<String,HashMap<Integer,Object>>.put } HashMap<Integer,Object>.put
if ( Map<String,String>.isEmpty ) { IllegalArgumentException.new }
Arrays.asList ArrayList.new
String.format System.currentTimeMillis while ( System.currentTimeMillis ) { TimeUnit.sleep } String.format IllegalStateException.new
JTabbedPane.add JTabbedPane.add JTabbedPane.add
return ( Map<Integer,>.get Optional.ofNullable )
Random.new
return ( Charset.forName )
StringBuffer.new while ( ) { if ( ) { Character.toLowerCase StringBuffer.append } } return ( StringBuffer.toString )
return ( ClasspathFontPeer.getMissingGlyphCode )
if ( ) { if ( ) { Math.ceil return ( Color.new ) } }
if ( Collection<Object>.size ) { IllegalArgumentException.new } ByteArrayOutputStream.new ByteArrayOutputStream.flush
if ( ) { HashMap<String,Object>.new } for ( ) { Entry<Object,Object>.getKey String.new Entry<Object,Object>.getValue Map<String,Object>.put }
URI.getPath
return ( List<String>.get )
Double.new
if ( ) { NodeList.getLength } for ( ; ; ) { NodeList.item Node.getAttributes if ( ) { NamedNodeMap.getLength for ( ; ; ) { NamedNodeMap.item Node.getNodeName if ( String.equalsIgnoreCase ) { if ( ) { Node.getNodeValue } else { Node.getNodeValue } } } } }
Map.get if ( ) { Set.iterator while ( Iterator.hasNext ) { Iterator.next } } Map.get if ( ) { Set.iterator while ( Iterator.hasNext ) { Iterator.next } }
CertificateException.new
FileOutputStream.new PrintWriter.new PrintWriter.flush
if ( ) { IllegalArgumentException.new }
Vector<Object>.new
if ( ) { System.arraycopy }
List<Object>.isEmpty List<Object>.isEmpty List<Object>.size List<Object>.get List<Object>.get List<Object>.get List<Object>.get List<Object>.get List<Object>.get List<Object>.get List<Object>.get List<Object>.isEmpty List<Object>.size List<Object>.get List<Object>.get List<Object>.get List<Object>.get List<Object>.get List<Object>.isEmpty
Object[].clone
ArrayList.new if ( ) { for ( ) { ArrayList<Object>.add } } ArrayList.new if ( ) { for ( ) { if ( ) { ArrayList<Object>.add } else { List<Object>.add } } } if ( ArrayList<Object>.isEmpty ) { ArrayList<Object>.size ArrayList<Object>.toArray } List<Object>.isEmpty List<Object>.size List<Object>.toArray
Collections.emptyList List<Object>.isEmpty
ArrayList.new List.add List.size List.toArray
if ( Iterable<>.iterator Iterator.hasNext ) { Iterable<>.toString }
System.arraycopy if ( Logger.isLoggable ) { } Vector<Object>.removeAllElements
if ( ) { IllegalArgumentException.new } else { if ( ) { IllegalArgumentException.new } }
if ( File.exists ) { if ( File.mkdirs ) { File.getAbsolutePath } return ( ) } File.listFiles for ( ) { FileInputStream.new BufferedInputStream.new File.length if ( ) { File.delete } if ( ) { BufferedInputStream.close } }
return ( AttributeSet.containsAttribute )
if ( ) { SecurityManager.checkLink }
Map<Object,EnumSet<Object>>.remove for ( ) { Map<Object,Set<Object>>.get }
return ( EnumSet.of )
for ( ; ; ) { String.charAt }
Collection<Object>.size
if ( ) { IllegalArgumentException.new } RobotPeer.mousePress
return ( Math.pow )
if ( String.equals ) { }
Scanner.new Scanner.useDelimiter while ( Scanner.hasNext ) { Scanner.next } Scanner.close
List<Object>.add
if ( String.equals ) { if ( String.equals String.equals ) { for ( HashMap<String,Object>.values ) { if ( ) { ArrayList<Object>.add } } } else { if ( String.equals ) { ArrayList<Object>.clear } } }
if ( List<Object>.size ) { return ( ) } Collections.binarySearch Collections.binarySearch return ( List<Object>.subList )
if ( List<Integer>.size ) { List<Integer>.subList if ( List<Integer>.size ) { List<Integer>.clear } }
if ( ) { List<String>.add }
HashMap<String,String>.new Map<String,String>.put
String.format
if ( ) { NullPointerException.new } if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } JTabbedPane.removeAll JTabbedPane.add JTabbedPane.add JTabbedPane.add JTabbedPane.add JTabbedPane.setSelectedIndex JTabbedPane.validate
return ( return ( ) Callable<Integer>.new )
HashMap.new String.getBytes Map<String,String>.put
return ( Set.iterator )
for ( ; ; ) { Integer.new LinkedBlockingDeque.contains LinkedBlockingDeque.poll Integer.new LinkedBlockingDeque.contains }
CharSequence.toString
if ( ) { return ( Collections.emptyList ) } ArrayList<Object>.new for ( ) { Map<String,Object>.get if ( ) { if ( ) { if ( ) { if ( ) { List<Object>.add } } } else { List<Object>.add } } }
HashSet<Object>.new for ( ; Iterator<>.hasNext ; ) { Iterator<>.next Set<Object>.addAll }
if ( ) { Runnable.new Thread.new Runnable.new Thread.new Thread.start Thread.start } else { IllegalStateException.new }
List<String>.indexOf if ( ) { IllegalArgumentException.new }
for ( ) { StringBuilder.append } StringBuilder.append for ( ) { StringBuilder.append }
StringBuilder.new StringBuilder.append StringBuilder.append for ( ; ; ) { StringBuilder.append StringBuilder.append } StringBuilder.length StringBuilder.setCharAt StringBuilder.append for ( ; ; ) { if ( ) { StringBuilder.append } } StringBuilder.length StringBuilder.setCharAt StringBuilder.toString PreparedStatement.executeUpdate PreparedStatement.close return ( SQLException.getMessage ) Exception.printStackTrace
if ( ) { return ( Collections.unmodifiableList ) }
if ( ) { IllegalArgumentException.new }
if ( ) { IllegalArgumentException.new } Collections.unmodifiableList
return ( return ( Math.max ) return ( while ( Iterator<Object>.hasNext ) { Iterator<Object>.next } return ( ) ) return ( ) )
System.arraycopy
StringBuilder.append String.length
while ( Iterator<>.hasNext ) { if ( Iterator<>.next Collection<>.contains ) { Iterator<>.remove } }
return ( List<Integer>.get )
while ( ) { if ( String.indexOf ) { return ( ) } }
if ( String.equals ) { }
StringReader.new
for ( Map<Object,>.entrySet ) { Entry<Object,>.getKey Entry<Object,>.getValue }
while ( ) { if ( ) { Arrays.toString continue } }
if ( ) { NullPointerException.new }
InvalidNameHolder.new Any.insert_Streamable
List<Object>.add
if ( ) { Set<OID>.size HashSet<String>.new for ( ) { OID.toString Set<String>.add } return ( ) }
List<Object>.add
File.getName String.toLowerCase if ( String.endsWith String.endsWith ) { } if ( ) { KeyStore.getInstance } else { KeyStore.getInstance } File.getParentFile File.mkdirs if ( File.exists ) { FileInputStream.new String.toCharArray KeyStore.load if ( ) { FileInputStream.close } } else { KeyStore.load } RuntimeException.new
while ( ) { String.charAt String.charAt }
if ( ) { PrintStream.println }
Map<String,String>.get for ( Map<String,String>.keySet ) { if ( String.equals ) { continue } Map<String,String>.get } Principal.getName
ByteBuffer.putInt
while ( Iterator.hasNext ) { Iterator.next }
FileInputStream.new ByteArrayOutputStream.new FileInputStream.close FileOutputStream.new ByteArrayOutputStream.toByteArray ByteArrayInputStream.new FileOutputStream.close
String.valueOf File.getAbsolutePath
if ( Rectangle2D.getWidth FontMetrics.stringWidth ) { return ( ) } if ( FontMetrics.stringWidth Rectangle2D.getWidth ) { return ( ) } if ( FontMetrics.stringWidth Rectangle2D.getWidth ) { return ( ) } if ( FontMetrics.stringWidth Rectangle2D.getWidth ) { return ( ) }
for ( ) { if ( Set<String>.contains ) { continue } }
Math.sqrt
return ( Color.new )
Runnable.new
return ( Integer.intValue )
if ( ) { System.arraycopy }
for ( ; ; ) { if ( ) { if ( String.equals ) { return ( ) } } }
return ( Reader.read )
JDialog.dispose
if ( Class.isAssignableFrom ) { Class.getName } Stack.peek
UUID.randomUUID UUID.toString
Writer.write
String.length StringBuilder.new StringBuilder.append String.toCharArray for ( ) { if ( ) { StringBuilder.append } else { if ( ) { StringBuilder.append } else { if ( ) { StringBuilder.append } else { StringBuilder.append } } } } return ( StringBuilder.append StringBuilder.toString )
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new }
if ( ByteBuffer.get ByteBuffer.get ByteBuffer.get ByteBuffer.get ByteBuffer.get ByteBuffer.get ) { if ( ByteBuffer.get ByteBuffer.get ByteBuffer.get ByteBuffer.get ByteBuffer.get ByteBuffer.get ) { return ( ) } } ByteBuffer.getShort
Integer.valueOf
Math.max
for ( Map<String,Object>.entrySet ) { if ( Entry<String,Object>.getValue ) { Entry<String,Object>.getValue Entry<String,Object>.setValue } }
while ( ) { if ( StringBuilder.length StringBuilder.charAt Character.isWhitespace ) { StringBuilder.deleteCharAt } }
if ( ) { while ( ) { BufferedReader.readLine } }
LinkedList<Object>.new for ( ) { if ( ) { List<Object>.add } }
Comparator<Integer>.new Arrays.sort
if ( ) { Set<Object>.add return ( ) }
Calendar.getInstance Calendar.setTimeInMillis return ( Calendar.get )
if ( String.isEmpty String.isEmpty String.isEmpty ) { return ( ) } Math.ceil Math.pow Math.ceil Math.max Math.ceil Math.pow Math.ceil Math.max for ( ; ; ) { for ( ; ; ) { if ( ) { Math.floor } } } Date.new
BorderLayout.new TableRowSorter<Object>.new JTable.new JTable.setSelectionMode JTable.setRowSorter JScrollPane.new TitledBorder.new JScrollPane.setBorder Dimension.new
ArrayList<Object>.subList
if ( ) { InvalidParameterException.new }
return ( Date.new Date.getTime )
return ( ResourceBundle.getString MessageFormat.format )
if ( List<Object>.size ) { return ( List<Object>.get ) }
if ( ) { IllegalArgumentException.new }
List<Object>.add Collections.binarySearch List<Object>.add
HashMap.keySet Set.iterator while ( Iterator.hasNext ) { Iterator.next PrintStream.println }
return ( String.new )
if ( ) { Math.min Math.max Math.min Math.max } Runnable.new
Arrays.toString Arrays.toString for ( ; ; ) { String.format }
IllegalArgumentException.new
if ( ) { Collections.reverse return ( List<Object>.stream Collectors.joining ) }
LinkedList<Element>.new Element.getChildNodes for ( ; NodeList.getLength ; ) { NodeList.item if ( ) { if ( Node.getNodeName String.equals ) { LinkedList<Element>.add } } }
DatagramPacket.new DatagramSocket.new
UnsupportedOperationException.new
return ( JAXBElement<Object>.new )
if ( ) { for ( ) { if ( ) { List<Object>.add } else { Object.getClass IllegalArgumentException.new } } } if ( ) { for ( ) { if ( ) { List<Object>.add } else { Object.getClass IllegalArgumentException.new } } }
if ( ) { return ( Pattern.compile ) } else { return ( Pattern.compile ) }
while ( Iterator<>.hasNext ) { Iterator<>.next if ( ) { Collection<Object>.add } }
MARSHAL.new
List<Object>.stream Collectors.toList if ( ) { List<Object>.size }
if ( ) { IllegalArgumentException.new }
return ( MBeanServerConnection.invoke ) Arrays.toString
return ( Integer.intValue )
Arrays.asList Arrays.asList
ArrayList<Runnable>.clear
Lock.lock if ( ) { AtomicReference<InetSocketAddress>.get } AtomicReference<Object>.get if ( ) { AtomicReference<Throwable>.set } AtomicReference<InetSocketAddress>.set Lock.unlock
return ( ObjectInputStream.readInt )
if ( ) { ObjectImpl.getClass Class.getName CPStringBuilder.append for ( ; ObjectImpl._ids ; ) { ObjectImpl._ids CPStringBuilder.append CPStringBuilder.append } CPStringBuilder.append return ( CPStringBuilder.toString ) } else { return ( Object.getClass Class.getName ) }
if ( ) { Arrays.copyOf }
return ( Entry<Object,Object>.getKey )
Boolean.valueOf
HashMap<String,Object>.get HashMap<String,Object>.put
AtomicReference<Object>.getAndSet AtomicBoolean.set
return ( String.length String.charAt )
InputStream.read InputStream.read if ( ) { for ( ; ; ) { InputStream.read } }
System.getProperty
Runtime.getRuntime Runtime.runFinalization
if ( ) { IllegalArgumentException.new }
if ( ) { List<Object>.get }
return ( Map.values )
if ( String.length ) { if ( Node.getOwnerDocument ) { } } String.indexOf if ( ) { String.substring String.substring }
ByteArrayOutputStream.new ByteArrayOutputStream.flush ByteArrayOutputStream.toByteArray ByteArrayOutputStream.close
return ( Float.valueOf )
BigDecimal.new BigDecimal.new
Exception.printStackTrace
if ( ) { JButton.setIcon } if ( ) { JToggleButton.setIcon } PropertyChangeSupport.firePropertyChange
ThreadLocal<Object>.get
return ( String.new ) AssertionError.new
Map<String,Object>.remove
Connection.createStatement for ( ; ; ) { Statement.executeUpdate } SQLException.getMessage PrintStream.println RuntimeException.new Statement.close SQLException.getMessage PrintStream.println RuntimeException.new
if ( ) { return ( LinkedList.new LinkedList.listIterator ) }
ArrayList<Object>.new for ( ) { if ( ) { List<Object>.add } }
if ( ) { if ( ) { if ( ) { if ( ) { RuntimeException.new } } } }
while ( Iterator<Object>.hasNext ) { Iterator<Object>.next } while ( Iterator<Object>.hasNext ) { Iterator<Object>.next if ( ) { Iterator<Object>.remove break } else { Iterator<Object>.remove } }
JScrollPane.new JTable.new JLabel.new JLabel.new DefaultTableModel.new JTable.setModel JScrollPane.setViewportView Class.getResource ImageIcon.new JLabel.setIcon Font.new JLabel.setFont JLabel.setText GroupLayout.new GroupLayout.createParallelGroup GroupLayout.createSequentialGroup GroupLayout.createParallelGroup GroupLayout.createSequentialGroup SequentialGroup.addContainerGap SequentialGroup.addComponent ParallelGroup.addGroup GroupLayout.createSequentialGroup SequentialGroup.addGap SequentialGroup.addComponent ParallelGroup.addGroup SequentialGroup.addGroup SequentialGroup.addContainerGap ParallelGroup.addGroup GroupLayout.setHorizontalGroup GroupLayout.createParallelGroup GroupLayout.createSequentialGroup SequentialGroup.addContainerGap SequentialGroup.addComponent SequentialGroup.addGap SequentialGroup.addComponent SequentialGroup.addContainerGap ParallelGroup.addGroup GroupLayout.setVerticalGroup
ArrayList.new for ( ) { Switch ( ) { case : List<Object>.add break case : List<Object>.add break default : return ( ArrayList.new ) } }
if ( ) { Integer.valueOf }
Double.doubleToRawLongBits
Class.getName
if ( ) { if ( ) { String.intern ContentHandler.endElement } return ( ) } if ( ) { ContentHandler.endElement NamespaceSupport.getDeclaredPrefixes while ( Enumeration.hasMoreElements ) { Enumeration.nextElement ContentHandler.endPrefixMapping } } NamespaceSupport.popContext
Double.valueOf Double.valueOf Double[].getClass Double.valueOf Double.valueOf
String.new String.new
if ( String.length ) { return ( ) } String.charAt if ( Character.isWhitespace ) { if ( Character.isLetter ) { if ( Character.isDigit ) { return ( ) } } }
String.trim if ( String.equalsIgnoreCase String.equalsIgnoreCase ) { }
if ( ) { Map.get if ( ) { SoftReference.get if ( Node.getNodeType ) { return ( ) } } }
BigDecimal.new for ( ) { Entry<String,Object>.getKey Entry<String,Object>.getValue } Exception.getMessage
Map<String,AtomicInteger>.get if ( ) { AtomicInteger.new Map<String,AtomicInteger>.put return ( ) } else { return ( AtomicInteger.getAndIncrement ) }
Arrays.sort
if ( ) { PrintStream.println }
for ( ; Vector.size ; ) { Vector.elementAt } for ( ; Vector.size ; ) { Vector.elementAt }
if ( List<String>.size List<String>.get Locale.getLanguage HashSet<String>.contains ) { return ( List<String>.get ) } else { if ( List<String>.size ) { return ( List<String>.get ) } }
while ( ) { Thread.join return ( ) } if ( ) { Thread.currentThread Thread.interrupt }
if ( ) { return ( Collections.unmodifiableList ) }
return ( Integer.intValue )
return ( SortedMap<String,Object>.get )
Map<String,String>.putAll
Class.getDeclaredMethod Method.setAccessible Method.invoke RuntimeException.new
for ( ) { Map<String,Object>.get }
ArrayList.new for ( ) { Class.forName Class.newInstance List<Object>.add PrintStream.println Exception.printStackTrace } Collections.sort for ( ) { if ( ) { if ( String.equals ) { JPopupMenu.addSeparator } } }
URI.new if ( URI.getPort ) { URI.getPort } URI.getHost IllegalArgumentException.new
Vector<Object>.new if ( ) { if ( ) { if ( ) { Vector<Object>.addElement return ( ) } if ( ) { Vector<Object>.addElement } if ( ) { Vector<Object>.addElement } Vector<Object>.addElement } if ( ) { if ( ) { Vector<Object>.addElement return ( ) } Vector<Object>.addAll } }
if ( ) { Object.toString }
return ( Collection<Object>.retainAll )
Calendar.getInstance Calendar.setTimeInMillis Calendar.get Calendar.get Calendar.get Calendar.set Calendar.set return ( Calendar.getTime Date.getTime )
if ( ) { return ( String.valueOf Double.parseDouble ) String.valueOf String.format NumberFormatException.new }
UnsupportedEncodingException.getMessage RuntimeException.new
return ( Arrays.asList )
JTextField.removeActionListener
Class.getClassLoader if ( ) { ClassLoader.getSystemResource } else { ClassLoader.getResource } if ( ) { IOException.new } else { return ( URL.openStream ) }
LockSupport.park return ( Thread.interrupted )
for ( ; List<Object>.size ; ) { List<Object>.get if ( ) { Math.round Math.round } }
if ( String.equals ) { }
Point2D.getX Point2D.getY
CPStringBuilder.append
Math.atan2 Math.atan2 return ( Math.abs Math.abs )
if ( ) { Integer.valueOf }
InetAddress.getByName IllegalArgumentException.new Map.get if ( ) { Map.put }
if ( ) { Properties.propertyNames while ( Enumeration.hasMoreElements ) { Enumeration.nextElement if ( ) { return ( Class.getName ) } } } for ( ) { if ( ) { Properties.getProperty if ( ) { return ( IllegalArgumentException.getMessage ) } } }
if ( String.equalsIgnoreCase ) { return ( ) } if ( String.equalsIgnoreCase ) { return ( ) } if ( String.equals ) { return ( ) } if ( String.equals ) { return ( ) } InputMismatchException.new NoSuchElementException.new
Graphics2D.getRenderingHints Graphics2D.getTransform Graphics2D.getColor Graphics2D.setRenderingHint Graphics2D.setRenderingHint Graphics2D.setRenderingHint Graphics2D.scale if ( ) { Graphics2D.setColor } else { if ( ) { Component.getForeground Graphics2D.setColor } else { Graphics2D.setColor } } Graphics2D.setRenderingHints Graphics2D.setTransform Graphics2D.setColor
if ( ) { SAXException.new } Parser.parse
Class.getClassLoader ArrayList.new List<String>.add List<String>.add List<String>.add List<String>.add List<String>.add List<String>.add
Class.getSimpleName
Vector.elements while ( Enumeration.hasMoreElements ) { Enumeration.nextElement Vector.addElement } Vector.elements while ( Enumeration.hasMoreElements ) { Enumeration.nextElement Vector.elementAt Hashtable.put }
String.split if ( ) { IllegalArgumentException.new }
GregorianCalendar.setLenient TimeZone.getTimeZone GregorianCalendar.setTimeZone GregorianCalendar.set GregorianCalendar.complete GregorianCalendar.get if ( ) { GregorianCalendar.add } GregorianCalendar.get if ( ) { GregorianCalendar.set GregorianCalendar.set GregorianCalendar.complete GregorianCalendar.get if ( ) { GregorianCalendar.add } GregorianCalendar.get }
return ( String.contains )
if ( ) { return ( Collection<Object>.remove ) } else { if ( ) { return ( Collection<Object>.remove ) } }
ThreadMXBean.getCurrentThreadCpuTime do { ThreadMXBean.getCurrentThreadCpuTime } while ( ) ;
System.currentTimeMillis
ImageIO.write
XMLStreamReader.getVersion
String[].clone
if ( ) { ConcurrentMap<Object,Object>.remove } else { ConcurrentMap<Object,Object>.putIfAbsent if ( ) { ConcurrentMap<Object,Object>.put } }
List<Object>.add Collections.sort
if ( ) { if ( ) { return ( Boolean.booleanValue ) } return ( String.equals ) }
return ( String.new )
Objects.requireNonNull Objects.requireNonNull Objects.requireNonNull
if ( ) { IllegalArgumentException.new } if ( ) { IOException.new }
Exception.getMessage Exception.getMessage
Random.new ConcurrentHashMap<UUID,Object>.new InetAddress.getByName InetSocketAddress.new return ( ConcurrentHashMap<UUID,Object>.get ) Executors.newFixedThreadPool ThreadPoolExecutor.prestartAllCoreThreads for ( ; ; ) { UUID.randomUUID ConcurrentHashMap<UUID,Object>.put } LinkedList<Callable<Void>>.new for ( ; ; ) { Random.nextInt ConcurrentHashMap<UUID,Object>.get return ( ) Callable<Void>.new List<Callable<Void>>.add } ExecutorService.invokeAll for ( ) { Future<>.get } ExecutorService.shutdownNow for ( ConcurrentHashMap<UUID,Object>.values ) { }
for ( ; ; ) { ByteBuffer.get if ( ) { PrintStream.println } else { if ( ) { PrintStream.print } else { PrintStream.print } } }
for ( ; ; ) { JPopupMenu.add }
return ( IOException.getClass IOException.getMessage )
Class.getName
if ( String.isEmpty ) { return ( ) }
Arrays.fill
if ( ) { return ( List<Object>.get ) }
if ( ) { Switch ( ) { default : Switch ( ) { case : if ( ) { String.length } return ( ) default : if ( ) { if ( ) { Character.toString } return ( ) } } } }
return ( Map<String,Object>.get )
System.currentTimeMillis Callable<Object>.new ExecutorService.submit Callable<Object>.new ExecutorService.submit Future<Object>.get System.currentTimeMillis Future<Object>.get System.currentTimeMillis Map<String,AtomicInteger>.clear
return ( String.equalsIgnoreCase )
OutputStream.write
if ( Set<String>.isEmpty ) { return ( ) } return ( Set<String>.iterator Iterator.next )
StringBuilder.new for ( ) { if ( ) { StringBuilder.append } StringBuilder.append } return ( StringBuilder.toString )
if ( ) { IOException.new }
for ( ) { if ( ) { if ( ) { if ( ) { IllegalStateException.new } } else { IllegalStateException.new } } }
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new }
Map<Object,Object>.get if ( ) { Map<Object,Object>.put Map<Object,Object>.size Map<Integer,Object>.put }
if ( ) { System.arraycopy }
if ( String.isEmpty ) { } if ( List<String>.size ) { List<String>.iterator while ( Iterator.hasNext ) { Iterator.next } String.replaceAll }
if ( TreeMap<String,Object>.isEmpty ) { return ( ) } ArrayList<String>.new
QName.getNamespaceURI XMLStreamWriter.getPrefix if ( String.trim String.length ) { QName.getLocalPart } else { QName.getLocalPart } if ( String.equals ) { XMLStreamWriter.writeAttribute } else { XMLStreamWriter.writeAttribute }
return ( Long.valueOf )
Rectangle2D.setFrame
AtomicReference.new
if ( List<Object>.contains ) { StringBuilder.new System.lineSeparator StringBuilder.append List<Object>.toString StringBuilder.append StringBuilder.toString }
HashMap.new Map.put
return ( FontUIResource.deriveFont FontUIResource.new )
return ( Map<String,Object>.get )
if ( Iterator<Object>.hasNext ) { return ( Collections.emptyIterator ) } while ( ) { if ( ) { if ( ) { String.format } } if ( ) { List<Object>.add } if ( ) { List<Object>.add } }
if ( ) { IllegalArgumentException.new }
for ( ; ; ) { PrintWriter.print PrintWriter.print }
Arrays.checkOffsetAndCount StringBuffer.append
if ( ) { PrintStream.println return ( ) } if ( ) { Color.getRGB } else { Color.getRGB } if ( ) { Color.getRGB }
return ( Charset.defaultCharset )
if ( ) { Math.abs Math.abs }
HashMap<Object,Integer>.clear
System.getProperty return ( String.isEmpty )
Class.getDeclaredMethod Method.invoke InvocationTargetException.getTargetException
if ( ) { System.arraycopy } if ( ) { System.arraycopy }
return ( Number.intValue Integer.parseInt )
if ( ) { IllegalArgumentException.new }
StringBuilder.new StringBuilder.length String.length String.length String.length while ( StringBuilder.indexOf ) { StringBuilder.indexOf StringBuilder.substring StringBuilder.indexOf StringBuilder.substring StringBuilder.new StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.length StringBuilder.toString StringBuilder.replace StringBuilder.length } return ( StringBuilder.toString )
HashSet.new for ( ; ; ) { Set<String>.add }
return ( return ( ) ) System.exit
OutputStream.close if ( InputStream.available ) { InputStream.close } if ( InputStream.available ) { InputStream.close }
if ( String.indexOf ) { String.substring } if ( String.indexOf ) { String.substring } String.indexOf if ( ) { String.substring }
if ( List<String>.contains ) { List<String>.add LinkedList<Object>.new Map<String,List<Object>>.put } Map<String,List<Object>>.get ArrayList<Object>.add
String.length String.lastIndexOf String.substring String.lastIndexOf String.length String.substring
ArrayBlockingQueue<Object>.clear
if ( ) { IOException.new }
UnsupportedOperationException.new
if ( Iterator<>.hasNext ) { Iterator<>.next while ( Iterator<>.hasNext ) { Iterator<>.next } }
ArrayList<String>.new ArrayList<String>.new while ( Iterator<Object>.hasNext ) { Iterator<Object>.next if ( ) { List<String>.add continue } if ( ) { if ( ) { if ( ) { List<String>.add } } } } List<String>.size List<String>.toString String.format List<String>.size List<String>.toString String.format Exception.getMessage String.format
if ( ) { NullPointerException.new }
return ( Arrays.asList )
if ( ) { Graphics2D.setPaint Graphics2D.draw Graphics2D.setPaint Graphics2D.draw } Graphics2D.setPaint Graphics2D.draw
return ( List<Object>.get )
String.toCharArray ArrayList.new LinkedList.new for ( ) { List<Character>.add } for ( ; ; ) { LinkedList.new List<Character>.remove PrintStream.println for ( ; ; ) { List<String>.add } }
if ( ) { Math.abs Math.abs }
Element.getOwnerDocument Document.createElement String.valueOf Element.setAttribute String.valueOf Element.setAttribute String.valueOf Element.setAttribute String.valueOf Element.setAttribute String.valueOf Element.setAttribute Element.setAttribute String.valueOf Element.setAttribute RuntimeException.new
System.arraycopy
ArrayList<Object>.new ArrayList<Object>.add ArrayList<Object>.add if ( ) { ArrayList<Object>.add } if ( ) { ArrayList<Object>.add }
return ( ZipEntry.isDirectory ) IOException.toString Logger.log
for ( AnnotatedElement.getAnnotations ) { Annotation.annotationType if ( Class<>.isAnnotationPresent ) { HashMap<Class<Object>,Supplier<Object>>.get if ( ) { return ( Supplier<Object>.get ) } else { Class<>.getSimpleName Logger.fine } } }
if ( ) { IllegalStateException.new } Objects.requireNonNull
String.getBytes String.getBytes LinkedBlockingQueue<Object>.poll
return ( Stream<Entry<Object,Object>>.collect )
String.charAt
return ( Sync.getWriteHoldCount )
IllegalArgumentException.new IllegalStateException.new
for ( ; List<Set<String>>.size ; ) { if ( ) { AssertionError.new } if ( ) { AssertionError.new } } if ( List<Set<String>>.size ) { AssertionError.new }
Pattern.matcher if ( ) { Pattern.matcher } Pattern.matcher if ( ) { Pattern.matcher } return ( Matcher.matches Matcher.matches Matcher.matches Matcher.matches )
Switch ( ) { case : return ( Long.numberOfLeadingZeros ) case : return ( Long.numberOfLeadingZeros ) case : Long.numberOfLeadingZeros return ( ) default : AssertionError.new }
MARSHAL.new
if ( String.isEmpty ) { IllegalArgumentException.new } Security.getProvider if ( ) { NoSuchProviderException.new }
JSplitPane.setLeftComponent JPanel.setLayout JScrollPane.setViewportView JToolBar.setFloatable JButton.setText JButton.setEnabled JButton.setText JButton.setEnabled JPanel.setLayout Dimension.new JPanel.setMinimumSize ActionListener.new JButton.addActionListener ActionListener.new JButton.addActionListener JSplitPane.add JSplitPane.add JPanel.add JPanel.add JToolBar.add JToolBar.add
if ( ) { Collection<Object>.size }
URL.openConnection HttpURLConnection.getFollowRedirects HttpURLConnection.setInstanceFollowRedirects
StringBuilder.new StringBuilder.append StringBuilder.append StringBuilder.append if ( String.length ) { StringBuilder.append StringBuilder.append StringBuilder.append } if ( String.length ) { StringBuilder.append StringBuilder.append StringBuilder.append } if ( ) { StringBuilder.append for ( ; ; ) { if ( ) { StringBuilder.append } StringBuilder.append StringBuilder.append StringBuilder.append } StringBuilder.append } return ( StringBuilder.toString )
ArrayList<Object>.new System.getProperty StringTokenizer.new while ( StringTokenizer.hasMoreTokens ) { StringTokenizer.nextToken if ( ) { Arrays.asList List<Object>.addAll } } return ( List<Object>.toArray )
return ( Integer.parseInt )
if ( ) { Float.valueOf return ( ) } if ( ) { Float.valueOf return ( ) }
JFrame.setSize JFrame.repaint
Switch ( ) { default : Integer.valueOf IllegalArgumentException.new }
if ( ) { if ( ) { return ( Boolean.booleanValue ) } return ( String.equals ) }
String[].clone
return ( Enum.valueOf )
ArrayList<String>.new HashMap<String,Integer>.new List<String>.add
Float.valueOf Map<String,Object>.put
Collections.emptySet for ( ; ; ) { if ( String.equalsIgnoreCase ) { continue } if ( Set<String>.isEmpty ) { TreeSet.new } for ( String.split ) { String.trim Set<String>.add } }
Math.sqrt if ( Double.isNaN ) { } if ( ) { if ( Math.abs ) { return ( ) } return ( ) } if ( Math.abs ) { Math.log }
if ( ) { Runnable.new }
if ( ) { NullPointerException.new } if ( ) { IllegalArgumentException.new } if ( ) { IndexOutOfBoundsException.new } if ( CharSequence.length ) { IndexOutOfBoundsException.new }
StringBuilder.new StringBuilder.new for ( ) { StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append } Properties.new StringBuilder.toString Properties.setProperty StringBuilder.toString Properties.setProperty IllegalArgumentException.new
Connection.prepareStatement Connection.prepareStatement PreparedStatement.setString PreparedStatement.executeQuery if ( ResultSet.next ) { return ( ResultSet.getLong ) } PreparedStatement.setString PreparedStatement.executeUpdate PreparedStatement.getGeneratedKeys if ( ResultSet.next ) { } return ( ResultSet.getLong )
if ( ) { Graphics2D.draw }
ThreadLocal<Map<Object,Object>>.get if ( Map<Object,Object>.isEmpty ) { Map<Object,Object>.get } if ( ) { Map<Object,Object>.remove }
ObjectInputStream.readInt
ByteArrayOutputStream.new Exception.getMessage return ( ByteArrayOutputStream.toByteArray )
Math.sin Math.cosFromSin
List<Object>.clear ArrayList<Object>.size for ( ; ; ) { ArrayList<Object>.get } List<Object>.add ArrayList<Object>.add
if ( ) { ArrayList<Object>.new }
if ( ) { IllegalArgumentException.new }
if ( ) { Class.getName Thread.currentThread Thread.getName } while ( AtomicBoolean.get ) { ExecutorService.execute if ( AtomicBoolean.get ) { } } Class.getName Thread.currentThread Thread.getName
if ( String.length ) { }
if ( ) { return ( Arrays.asList ) } if ( Arrays.equals ) { return ( ) } String.new String.new String.getBytes String.getBytes String.length String.length String.length
RuntimeException.new
return ( Date.clone )
Document.getElementsByTagName NodeList.item Element.getAttributeNodeNS Attr.setPrefix
ArrayList<Object>.new for ( Map<String,Object>.entrySet ) { Entry<String,Object>.getKey Entry<String,Object>.getValue List<Object>.add }
ArrayList<Object>.add if ( ) { if ( HashMap<String,String>.containsKey ) { return ( ) } } HashMap<String,String>.put
for ( ; ArrayList<Object>.size ; ) { ArrayList<Object>.get } ArrayList<Object>.clear
if ( String.equals ) { }
return ( URL.openStream )
Arrays.equals
Integer.new Integer.new Integer.new Integer.new
if ( ) { Collections.singletonMap HashMap<String,String>.new if ( String.startsWith ) { } return ( ) }
LinkedList.clear Hashtable.new
ReentrantReadWriteLock.readLock Lock.lock AtomicReference<Object>.set Lock.unlock
FileInputStream.new
if ( ) { if ( ) { if ( ) { Integer.toString } } }
return ( Date.new )
if ( ) { HashSet.new } if ( String.equalsIgnoreCase ) { return ( ) } if ( String.equalsIgnoreCase ) { HashSet<Object>.addAll return ( ) } for ( String.split ) { if ( ) { IllegalStateException.new } HashSet<Object>.add }
if ( ) { String.endsWith Class<>.getConstructor Constructor<>.newInstance }
Boolean.valueOf
AttributeList.new for ( ; ; ) { Attribute.new AttributeList.add }
String.getBytes
return ( UUID.randomUUID UUID.toString )
Locale.getDefault Locale.getDefault
if ( Action.isEnabled ) { }
Arrays.asList Arrays.asList List<Object>.get List<Object>.get List<Object>.get
IllegalArgumentException.new
ClassLoader.getSystemResources ArrayList<URL>.new while ( Enumeration<URL>.hasMoreElements ) { Enumeration<URL>.nextElement List<URL>.add }
ConcurrentHashMap<String,Object>.values if ( ) { ConcurrentHashMap<String,Object>.size } while ( Iterator.hasNext ) { Iterator.next if ( String.equalsIgnoreCase ) { } }
for ( ; ; ) { if ( String.equalsIgnoreCase String.equalsIgnoreCase ) { if ( String.equalsIgnoreCase String.equalsIgnoreCase ) { if ( ) { Paths.get Files.newBufferedReader } } } }
List<Object>.get
JComboBox.new JComboBox<String>.addItem for ( ) { JComboBox<String>.addItem }
if ( ) { Object.getClass Class.getSimpleName }
Runnable.new
if ( Proxy.type ) { URI.getHost } else { Proxy.address if ( ) { SocketAddress.getClass IllegalArgumentException.new } InetSocketAddress.getHostName InetSocketAddress.getPort }
if ( String.endsWith ) { } InetAddress.getByName Exception.getMessage
IllegalArgumentException.new
GridBagLayout.new
Integer.parseInt
if ( ) { IllegalStateException.new }
if ( ) { return ( List<Object>.get ) }
if ( ) { NullPointerException.new } if ( Service.getType String.equals ) { return ( ) } if ( ) { LinkedHashMap<String,Service>.new } LinkedHashMap<String,Service>.put if ( ) { if ( ) { LinkedHashMap<String,Service>.new } for ( Service.getAliases ) { LinkedHashMap<String,Service>.put } }
Logger.getLogger
Double.isNaN SortedMap<Object,Double>.put
if ( ) { PrintStream.println }
for ( ; ; ) { Random.nextBytes if ( Random.nextInt ) { Random.nextBytes } } if ( Random.nextInt ) { if ( ) { AssertionError.new } return ( ) }
Switch ( ) { default : String.format IllegalArgumentException.new }
return ( Map<Object,Object>.get )
if ( ) { Thread.currentThread Thread.getId }
Math.max
JLabel.setIcon JLabel.setToolTipText MouseAdapter.new JLabel.addMouseListener
if ( ) { NumberFormatException.new } Calendar.set Calendar.set Calendar.set Calendar.set Calendar.set Calendar.set
BufferedImage.getWidth BufferedImage.getHeight BufferedImage.new for ( ) { BufferedImage.getRaster WritableRaster.setPixel }
Queue<Object>.add
for ( ; ; ) { Math.pow }
return ( ConcurrentHashMap<Thread,Object>.values )
Map<String,Object>.get if ( ) { Map<String,Object>.put }
if ( ) { return ( ArrayList<Integer>.new ) } Arrays.asList
for ( ; List<Map<String,Object>>.size ; ) { List<Map<String,Object>>.get if ( Map<String,Object>.get Object.toString String.equals ) { List<Map<String,Object>>.get Map<String,Object>.get return ( ArrayList<Map<String,String>>.get Map<String,String>.get ) } }
SelectionKey.attach
ArrayList<Object>.new String.valueOf ArrayList<Object>.add
if ( HashMap.size ) { HashMap.values Collection.size Collection.toArray }
if ( Math.abs ) { }
if ( ) { while ( Iterator.hasNext ) { Iterator.next if ( ) { String.indexOf if ( ) { String.substring } } } }
StringBuilder.new StringBuilder.append StringBuilder.append for ( ; ; ) { StringBuilder.append StringBuilder.append } StringBuilder.append return ( StringBuilder.toString )
Stack<Object>.new if ( List<Object>.size ) { for ( ; List<Object>.size ; ) { List<Object>.get if ( ) { if ( ) { Stack<Object>.push } } if ( ) { if ( Stack<Object>.isEmpty ) { Stack<Object>.pop } } } }
if ( ) { NullPointerException.new }
UnsupportedOperationException.new
ArrayList.new Collection.iterator while ( Iterator.hasNext ) { Iterator.next Collection.addAll }
return ( Map<String,List<Object>>.get )
ReentrantLock.lock
List.iterator while ( Iterator.hasNext ) { Iterator.next }
String.toCharArray LexicalHandler.comment
return ( List<Object>.isEmpty )
Set.add
StringBuilder.new for ( ; String.length ; ) { String.charAt Switch ( ) { case : StringBuilder.append break case : StringBuilder.append break case : StringBuilder.append break case : StringBuilder.append break default : StringBuilder.append } } return ( StringBuilder.toString )
if ( ) { Iterable<>.iterator for ( ) { Iterator<>.next } }
Class<>.getMethod Class<>.getMethod return ( return ( Method.invoke ) )
for ( String.length ; ; ) { String.charAt }
return ( List<Object>.get )
if ( Date.compareTo ) { for ( Date.clone ; Date.compareTo ; ) { } }
Map.put Map.put Map.put Map.put Map.put
Map<String,Object>.get
if ( ) { RuntimeException.new } URI.toString URI.toString
return ( Math.min )
if ( ) { IllegalArgumentException.new } if ( FloatBuffer.remaining ) { IllegalArgumentException.new } for ( ) { FloatBuffer.put }
UnsupportedOperationException.new
for ( ; ; ) { if ( Math.abs Math.abs ) { } } Arrays.copyOf Arrays.sort ArrayList<Object>.new for ( ) { List<Object>.add } if ( ) { List<Object>.add }
String.replace Class.getClassLoader ClassLoader.getResourceAsStream InputStreamReader.new BufferedReader.new StringBuffer.new Pattern.compile while ( BufferedReader.readLine ) { String.replaceFirst if ( ) { Pattern.matcher if ( Matcher.find ) { Matcher.group Map<String,String>.get Matcher.replaceFirst } } StringBuffer.append } BufferedReader.close InputStreamReader.close InputStream.close FileOutputStream.new OutputStreamWriter.new StringBuffer.toString OutputStreamWriter.write OutputStreamWriter.close FileOutputStream.close
String.length StringBuffer.new for ( ; String.length ; ) { String.charAt if ( String.indexOf ) { StringBuffer.append } else { String.new String.getBytes for ( ; ; ) { StringBuffer.append String.charAt StringBuffer.append String.charAt StringBuffer.append } } } return ( StringBuffer.toString )
Collections.sort List<Object>.size for ( ; List<Object>.size ; ) { List<Object>.get }
return ( IntStream.range )
if ( ) { URL.toString }
JCheckBox.setSelected JCheckBox.setSelected
Boolean.valueOf
PrintWriter.println Properties.getProperty Date.new Date.toString
ReentrantReadWriteLock.writeLock WriteLock.lock NavigableMap<Object,Object>.entrySet Set.iterator while ( Iterator<Entry<Object,Object>>.hasNext ) { if ( Iterator<Entry<Object,Object>>.next Entry<Object,Object>.getValue ) { Iterator<Entry<Object,Object>>.remove } } ReentrantReadWriteLock.writeLock WriteLock.unlock
for ( ) { if ( ) { if ( ) { if ( ) { IllegalArgumentException.new } } break } }
Locale.new Locale.getVariant String.equals Locale.new
return ( JTextPane.getText )
Map<String,Object>.get
DatagramSocket.new for ( ; ; ) { DatagramPacket.new DatagramPacket.setAddress DatagramPacket.setPort DatagramSocket.send }
return ( IntStream.range )
StringBuilder.new for ( ConcurrentMap<Object,AtomicInteger>.entrySet ) { Entry<Object,AtomicInteger>.getKey Entry<Object,AtomicInteger>.getValue StringBuilder.append } return ( StringBuilder.toString )
StringBuilder.new while ( ) { if ( StringBuilder.length ) { StringBuilder.insert } StringBuilder.insert } StringBuilder.insert return ( StringBuilder.toString )
if ( ) { Object.getClass }
ThreadLocal<Object>.get if ( ) { IllegalStateException.new }
KeyStore.getInstance KeyStore.load CertificateFactory.getInstance ByteArrayInputStream.new CertificateFactory.generateCertificate InputStream.close KeyFactory.getInstance if ( String.isEmpty ) { EncryptedPrivateKeyInfo.new String.toCharArray PBEKeySpec.new EncryptedPrivateKeyInfo.getAlgName SecretKeyFactory.getInstance SecretKeyFactory.generateSecret EncryptedPrivateKeyInfo.getKeySpec } else { PKCS8EncodedKeySpec.new } KeyFactory.generatePrivate String.toCharArray KeyStore.setKeyEntry FileOutputStream.new String.toCharArray KeyStore.store Exception.getMessage PrintStream.println Exception.printStackTrace if ( ) { FileOutputStream.close } if ( ) { InputStream.close }
LinkedList.new LinkedList.new while ( Iterator<Object>.hasNext ) { Iterator<Object>.next LinkedList<Object>.add }
ArrayList<Object>.new for ( ) { if ( ) { List<Object>.add } }
ArrayList.new List<Object>.forEach
Logger.isLoggable Thread.new Thread.setDaemon Thread.start if ( Logger.isLoggable ) { Logger.finer } Logger.fine
Objects.requireNonNull Objects.requireNonNull
List<Object>.add Collections.binarySearch List<Object>.add
if ( ) { IllegalArgumentException.new }
String.format StringBuilder.new if ( ) { Arrays.asList } if ( ) { if ( ) { StringBuilder.append URI.toString String.format StringBuilder.append } else { String.format StringBuilder.append } } StringBuilder.toString Exception.getMessage
return ( Document.getElementsByTagNameNS )
if ( ) { for ( ; ArrayList<Object>.size ; ) { ArrayList<Object>.get } ArrayList<Object>.clear }
if ( ) { NullPointerException.new }
List.add
if ( String.charAt ) { } String.split ArrayList<Object>.new for ( ) { List<Object>.add }
PrintStream.println PrintStream.println PrintStream.println
if ( ) { if ( String.equals ) { return ( ) } }
return ( Name.toString )
PrintWriter.println
LinkedHashMap.new for ( ArrayList.iterator ; Iterator.hasNext ; ) { Iterator.next if ( ) { LinkedHashMap.put } }
ArrayList.new
ArrayList<Object>.new for ( ; ; ) { if ( String.equalsIgnoreCase ) { continue } while ( String.length ) { String.substring String.trim if ( String.length String.regionMatches ) { break } String.length String.substring List<Object>.add } }
if ( ) { if ( ) { if ( ) { IOException.new } } }
if ( ) { IllegalArgumentException.new } if ( List<Object>.contains ) { IllegalArgumentException.new } Logger.info List<Object>.remove
String.trim if ( String.length ) { if ( String.substring String.equals ) { String.substring } } Integer.decode
StringBuilder.new for ( ; ; ) { StringBuilder.append } return ( StringBuilder.toString )
return ( Set<Object>.contains )
Map<Object,Integer>.get if ( ) { Map<Object,Integer>.put }
return ( Byte.parseByte )
List<Object>.size for ( ; List<Object>.size ; ) { List<Object>.get }
ConcurrentHashMap<String,InetAddress[]>.new
return ( String.valueOf )
List<Object>.add
if ( ) { String.length if ( ) { if ( String.charAt ) { } } }
return ( System.currentTimeMillis )
URL.new
if ( ) { Dimension.new } for ( ) { if ( ) { Color.getRGB Color.getRed Color.getGreen Color.getBlue } }
if ( Long.valueOf Long.equals ) { return ( ) } Long.valueOf if ( Long.equals ) { return ( ) } Long.toString
Math.abs Math.min Math.abs if ( ) { Math.abs Math.round } else { Math.abs } Math.min
Map<Class<Object>,Class<Object>>.get InputStream.close Consumer<Object>.new Function<Consumer<Object>,Object>.apply Map<Class<Object>,Class<Object>>.get
Vector.iterator if ( Iterator.hasNext ) { Iterator.next ComponentUI.getMaximumSize } while ( Iterator.hasNext ) { Iterator.next ComponentUI.getMaximumSize }
LinkedBlockingDeque.toArray
Connection.createStatement Statement.executeQuery ResultSet.next ResultSet.getDouble
if ( String.indexOf ) { return ( ) } ClassNotFoundException.new
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new }
return ( Map<String,Object>.keySet )
Math.abs
return ( Set.iterator )
HashMap<Integer,String>.put
if ( ) { Component.getPreferredSize } else { JTree.isRowSelected TreeModel.isLeaf TreeCellRenderer.getTreeCellRendererComponent CellRendererPane.add Component.validate Component.getPreferredSize } if ( ) { Rectangle.new }
LinkedHashMap<String,Object>.get
if ( TreeNode.getParent ) { IllegalArgumentException.new }
LinkedHashMap<String,Object>.new LinkedList<Object>.new for ( ) { if ( ) { LinkedList<Object>.add } } for ( ) { Map<String,Double>.get for ( ; ; ) { if ( Map<String,Double>.get ) { Map<String,Object>.put } else { Map<String,Object>.put } } }
return ( List<Object>.size )
for ( ; ; ) { if ( ) { Exception.printStackTrace } }
List<Object>.size List<Object>.size for ( ; ; ) { for ( ; ; ) { if ( List<Object>.get List<Object>.get ) { List<Object>.remove List<Object>.size } } } return ( List<Object>.size )
if ( ) { NullPointerException.new }
String.length while ( ) { String.charAt while ( ) { String.charAt } if ( ) { if ( ) { String.charAt } } }
if ( ) { JSlider.getValue JSlider.setValue }
if ( ) { Integer.new }
if ( ) { Math.max Math.min Math.max }
return ( Math.min )
if ( ) { IllegalArgumentException.new } return ( List<Object>.size )
if ( ) { IllegalArgumentException.new }
String.length
if ( ) { List<Object>.add }
for ( ; ; ) { if ( ) { if ( ) { if ( ) { if ( ) { Double.parseDouble } else { if ( ) { Integer.parseInt } else { if ( ) { Integer.parseInt } } } } } } } Date.new
StringBuffer.new URL.openStream while ( ) { InputStream.read for ( ; ; ) { StringBuffer.append } } IOException.getClass Class.getCanonicalName IOException.getMessage if ( ) { StringBuffer.toString if ( String.length ) { } } InterruptedException.printStackTrace ExecutionException.printStackTrace Cursor.getPredefinedCursor SwingWorker<Boolean,Void>.new SwingWorker<Boolean,Void>.execute
return ( Map<String,Object>.get )
if ( ) { Integer.valueOf }
FileOutputStream.new BufferedOutputStream.new OutputStream.write OutputStream.close
String.charAt
if ( ) { if ( ) { return ( Boolean.booleanValue ) } return ( String.equals ) }
for ( ; Iterator<Object>.hasNext ; ) { Iterator<Object>.next }
if ( ) { ByteBuffer.putInt } else { ByteBuffer.putInt }
StringBuilder.new while ( ) { if ( ) { SQLException.getSQLState StringBuilder.append } else { SQLException.getSQLState SQLException.getMessage StringBuilder.append } SQLException.getNextException if ( ) { StringBuilder.append } } StringBuilder.toString
Map<String,Object>.get if ( ) { Map<String,Object>.remove }
return ( String.replace String.replace )
HashMap<String,List<Object>>.get if ( ) { if ( ) { HashMap<String,List<Object>>.put } if ( ) { HashMap<String,List<Object>>.put } } List<Object>.iterator while ( Iterator<Object>.hasNext ) { Iterator<Object>.next Pattern.matcher Matcher.replaceAll }
if ( Double.isNaN Double.isNaN ) { }
if ( MBeanServer.isRegistered ) { MBeanServer.unregisterMBean }
Timer.new Logger.log TimerTask.new Timer.scheduleAtFixedRate Timer.cancel Logger.log Logger.log
Class<>.getSimpleName Class<>.getAnnotation
if ( List<Object>.size ) { if ( List<Object>.size ) { List<Object>.get } else { for ( ; List<Object>.size ; ) { List<Object>.get List<Object>.get } } }
if ( ) { if ( ) { String.lastIndexOf if ( ) { String.substring String.substring } } }
List<Object>.remove
Map<URL,Long>.get URL.openConnection if ( ) { URLConnection.setIfModifiedSince } if ( URLConnection.getLastModified ) { }
String.valueOf
if ( ) { Integer.valueOf }
if ( ) { ArrayList.new } Collections.addAll
if ( String.indexOf String.indexOf ) { } if ( String.endsWith ) { }
String[].clone
InputStream.read
Math.min
return ( String.new )
List<Object>.size for ( ; ; ) { if ( ) { List<Object>.set } else { List<Object>.set } } for ( ; ; ) { if ( ) { List<Object>.add } else { List<Object>.add } } for ( ; ; ) { List<Object>.remove }
if ( ) { File.new } File.listFiles if ( ) { return ( File.getName File.getName ) Comparator<File>.new Arrays.sort }
JButton.setEnabled JComboBox<String>.setEnabled JComboBox<String>.getSelectedItem ResourceBundle.getString JLabel.setText JButton.setEnabled ResourceBundle.getString JButton.setToolTipText
Class<>.newInstance if ( ) { JLabel.setText JLabel.setEnabled JTextField.setEnabled } else { JLabel.setText JLabel.setEnabled JTextField.setText JTextField.setEnabled } if ( ) { JLabel.setText JLabel.setEnabled JTextField.setEnabled } else { JLabel.setText JLabel.setEnabled JTextField.setText JTextField.setEnabled } if ( ) { Class<>.getName }
ArrayList.new for ( ) { for ( ) { if ( String.equals ) { break } } } ArrayList.new for ( ) { for ( ) { for ( ) { if ( String.equals ) { break } } } }
return ( Socket.getSoTimeout )
if ( Set<Object>.isEmpty ) { return ( ) }
return ( MBeanParameterInfo.getDescription )
if ( ) { ResourceBundle.getString IllegalStateException.new }
if ( String.isEmpty ) { for ( ) { if ( ) { String.trim if ( Map<String,String>.containsKey ) { String.trim Map<String,String>.put } } } } if ( Map<String,String>.isEmpty ) { Map<String,String>.put }
if ( ) { if ( ) { Runnable.new } }
if ( ) { return ( OptionalInt.empty ) } else { return ( OptionalInt.of ) }
return ( Hashtable.size )
if ( ) { ReadOnlyBufferException.new } if ( ) { IllegalArgumentException.new } if ( CharBuffer.remaining ) { BufferOverflowException.new } CharBuffer.remaining CharBuffer.get
if ( ) { IllegalArgumentException.new }
while ( ) { DatagramSocket.getLocalPort DatagramSocket.receive DatagramPacket.getAddress InetAddress.getHostAddress DatagramPacket.getPort DatagramSocket.getLocalPort DatagramPacket.getData DatagramPacket.getLength String.new List<Object>.size }
return ( NewInstance.getClassLoader )
ArrayList<Object>.new List<Object>.addAll
StringBuilder.new return ( StringBuilder.toString )
while ( ) { PrintStream.println }
Map<Class<Object>,Object>.get
if ( Stack<Object>.size ) { RuntimeException.new }
return ( List<String>.get )
if ( ) { IllegalArgumentException.new } ArrayList<Object>.new for ( ) { Collection<Object>.add }
File.createTempFile Properties.new Properties.setProperty File.toString Properties.setProperty Properties.setProperty Properties.setProperty
return ( Collections.emptySet )
if ( String.equals ) { return ( ) } return ( Integer.valueOf )
IOException.new
ArrayList<Object>.new HashSet<URI>.new for ( ) { if ( ) { if ( ) { List<Object>.add } } else { Set<URI>.add } } if ( Set<URI>.isEmpty ) { for ( ) { List<Object>.add } }
String.format
Map<Object,Set<Object>>.get if ( ) { return ( HashSet<Object>.new ) } return ( Collections.emptySet )
for ( ; ArrayList<File>.size ; ) { ArrayList.new ArrayList<File>.get Scanner.new while ( Scanner.hasNext ) { Scanner.nextLine if ( String.contains ) { ArrayList<String>.add } else { ArrayList<String>.add } } ArrayList<File>.get PrintWriter.new for ( ; ArrayList<String>.size ; ) { ArrayList<String>.get PrintWriter.println } }
if ( ) { if ( ) { if ( ) { Logger.log } } }
StringWriter.new StringWriter.getBuffer StringBuffer.toString if ( ) { StringBuffer.append } if ( ) { if ( Date.getTime ) { } } if ( ) { if ( Date.getTime ) { } } if ( ) { IOException.printStackTrace }
if ( ) { IllegalArgumentException.new }
URL.openStream InputStreamReader.new BufferedReader.new ArrayList.new while ( ) { BufferedReader.readLine String.trim if ( String.length ) { continue } if ( String.startsWith ) { continue } ArrayList.add }
if ( String.equals ) { }
return ( Float.intBitsToFloat )
if ( ) { URI.create if ( ) { IllegalArgumentException.new } } else { IllegalArgumentException.new }
List<String>.size ArrayList<Object>.new for ( ) { Map<String,Object>.get List<Object>.add }
StringBuilder.new
return ( ResultSet.getInt )
return ( HashMap<Object,HashSet<Object>>.remove )
if ( Field.getType ) { Object.equals String.valueOf String.equalsIgnoreCase Boolean.new } Field.set if ( ) { Method.getParameterTypes if ( Class.isArray ) { Class.getComponentType Collection.size Array.newInstance Collection.toArray } Method.invoke Object.getClass Class.getSimpleName Field.getType Class.getSimpleName Object.getClass Class.getSimpleName PrintStream.println }
for ( ; Iterator<Object>.hasNext ; ) { Iterator<Object>.next } Map<Object,Map<Object,Object>>.clear if ( ) { Collection<Object>.clear }
return ( String.equalsIgnoreCase )
return ( List<Object>.size )
if ( ) { return ( ResourceBundle.getString ) }
Collection<Object>.stream Stream.anyMatch
StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append
if ( ) { SecurityException.new }
Point2D.setLocation
ArrayList<Object>.new while ( ) { ArrayList<Object>.add } ArrayList<Object>.size ArrayList<Object>.toArray
DatabaseMetaData.getSQLStateType Connection.close DatabaseMetaData.getSQLStateType
Collection<>.toArray for ( ; ; ) { Number.byteValue }
LinkedList<Object>.new List<Object>.add List<Object>.add List<Object>.add List<Object>.toArray
return ( Map<Integer,Boolean>.containsKey Map<Integer,Boolean>.containsKey )
if ( ) { Boolean.parseBoolean } else { if ( Class.equals ) { } }
return ( Object.getClass )
if ( ) { ReentrantLock.isHeldByCurrentThread } if ( ) { ConcurrentHashMap<Object,Object>.get } if ( ) { if ( ) { ConcurrentHashMap<Object,Object>.remove } return ( ) }
ArrayList<Object>.new Hashtable<String,ArrayList<Object>>.new for ( ) { if ( ) { List<Object>.add continue } Hashtable<String,ArrayList<Object>>.get if ( ) { ArrayList<Object>.new Hashtable<String,ArrayList<Object>>.put } ArrayList<Object>.add } for ( Hashtable<String,ArrayList<Object>>.values ) { List<Object>.size List<Object>.toArray for ( ) { List<Object>.add } } return ( List<Object>.size List<Object>.toArray )
HashMap.new HashMap.new Collections.unmodifiableMap Collections.unmodifiableMap if ( ) { Throwable.getMessage } else { Collections.emptyMap Collections.emptyMap } HashMap.new HashMap.new Collections.unmodifiableMap Collections.unmodifiableMap if ( ) { Throwable.getMessage } else { Collections.emptyMap Collections.emptyMap } CountDownLatch.await Thread.currentThread Thread.interrupt CountDownLatch.await Thread.currentThread Thread.interrupt
FileOutputStream.new OutputStreamWriter.new JTextPane.write Writer.close
ArrayList<Class<Object>>.new Thread.currentThread Thread.getContextClassLoader String.replace ClassLoader.getResources TreeSet<String>.new while ( Enumeration<URL>.hasMoreElements ) { Enumeration<URL>.nextElement URL.getFile Set<String>.addAll } for ( ) { Class.forName if ( Class.isAssignableFrom ) { List<Class<Object>>.add } }
Callable<Void>.new Callable<Void>.new
return ( BigInteger.pow )
StringBuffer.new for ( ) { if ( ) { StringBuffer.append } if ( ) { StringBuffer.append } else { StringBuffer.append } } StringBuffer.toString
String.indexOf if ( ) { String.indexOf if ( ) { String.substring System.getProperty if ( String.trim String.equals ) { String.substring String.substring } } }
Math.min Math.max if ( ) { Math.abs String.valueOf Graphics2D.create Graphics2D.setStroke Graphics2D.drawLine Graphics2D.dispose } else { Graphics2D.create if ( ) { Graphics2D.setStroke Graphics2D.drawLine } else { Graphics2D.setStroke Graphics2D.drawLine } Graphics2D.dispose }
Map<String,List<Object>>.get if ( ) { ArrayList.new Map<String,List<Object>>.put } List<Object>.add Map<String,List<Object>>.get if ( ) { ArrayList.new Map<String,List<Object>>.put } if ( ) { List<Object>.add }
for ( ; ; Throwable.getCause ) { Set<Throwable>.add }
System.arraycopy
for ( ; List<Object>.size ; ) { List<Object>.get }
Collections.emptyList
if ( ) { return ( String.valueOf ) } return ( String.valueOf String.getBytes )
if ( ) { Integer.valueOf Integer.valueOf IllegalArgumentException.new } if ( ) { Integer.valueOf Integer.valueOf IllegalArgumentException.new } if ( ) { Integer.valueOf Integer.valueOf IllegalArgumentException.new }
ObjectInputStream.defaultReadObject ArrayList<Object<Object>>.new for ( ; ; ) { ArrayList<Object<Object>>.add } for ( ; ; ) { ArrayList<Object<Object>>.set } for ( ; ; ) { ObjectInputStream.readObject if ( ) { for ( ; ; ) { if ( ArrayList<Object<Object>>.size ) { ArrayList<Object<Object>>.get ArrayList<Object<Object>>.set } else { ArrayList<Object<Object>>.add } } } }
StringBuilder.new StringBuilder.append StringBuilder.toString if ( ResultSet.next ) { RuntimeException.new } return ( ResultSet.getLong ) RuntimeException.new
HashMap.new HashMap.put Integer.valueOf HashMap.put Integer.valueOf HashMap.put System.arraycopy HashMap.put
if ( ) { return ( ) IllegalArgumentException.new }
return ( Integer.intValue )
if ( ) { Element.getElementsByTagName if ( NodeList.getLength ) { NodeList.item Element.getFirstChild Node.setNodeValue } else { Document.createTextNode Document.createElement Node.appendChild Element.appendChild } } else { String.getBytes ByteArrayInputStream.new DocumentBuilder.parse Document.getDocumentElement }
if ( ) { String.indexOf if ( ) { String.substring } }
List<String>.add
RandomAccessFile.setLength RandomAccessFile.getChannel FileChannel.force
return ( CopyOnWriteArrayList<Object>.size )
List.size List.get
if ( ) { PreparedStatement.close }
if ( XMLStreamWriter.getPrefix ) { XMLStreamWriter.writeNamespace XMLStreamWriter.setPrefix } XMLStreamWriter.writeAttribute
if ( ) { RuntimeException.new }
Connection.prepareStatement if ( ) { Date.new PreparedStatement.setDate } PreparedStatement.execute PreparedStatement.getResultSet while ( ResultSet.next ) { ResultSet.getInt }
Document.getElementsByTagNameNS NodeList.item Node.getAttributes NamedNodeMap.removeNamedItemNS NamedNodeMap.getNamedItemNS
if ( ) { HashMap.new for ( ) { for ( Map<Object,Object>.entrySet ) { Entry<Object,Object>.getKey Entry<Object,Object>.getValue Map<Object,Object>.put } } return ( ) } AssertionError.new
if ( ) { ArrayList<Object>.add }
Vector<String>.clone Vector<String>.size
ArrayList.new ConcurrentLinkedQueue.new List<Object>.size Math.min CountDownLatch.new AtomicBoolean.new AtomicInteger.new AtomicInteger.new AtomicLong.new List<Object>.size for ( ; ; ) { ExecutorService.submit } CountDownLatch.await Thread.interrupted AtomicBoolean.set if ( AtomicBoolean.get ) { List<Object>.size AtomicInteger.get List<Object>.size return ( ) } List<Object>.size AtomicLong.get
ByteArrayOutputStream.new ByteArrayOutputStream.flush return ( ByteArrayOutputStream.toByteArray )
LinkedList.new
if ( ) { IllegalArgumentException.new } for ( ; ; ) { if ( Double.isNaN Double.isNaN ) { continue } Math.abs }
ArrayList.new
List<Object>.size ArrayList<Object>.new
return ( Map<String,Object>.entrySet )
return ( Vector.contains )
DefaultListModel<String>.removeAllElements for ( ) { DefaultListModel<String>.addElement }
RuntimeException.new
OutputStreamWriter.new
return ( Math.sqrt )
LinkedList.new
if ( ) { AssertionError.new } Switch ( ) { case : Object.wait break default : AssertionError.new }
for ( ; ; ) { if ( Component.isVisible ) { continue } if ( ) { Container.findComponentAt } else { if ( Component.contains ) { return ( ) } } }
if ( ) { MessageFormat.format } if ( String.endsWith ) { }
if ( ) { Integer.valueOf }
String.indexOf if ( String.length ) { String.trim } else { if ( ) { for ( ; ; ) { while ( String.charAt ) { } while ( String.charAt ) { } String.substring String.indexOf if ( ) { String.length } } } }
if ( String.equals String.equals String.equals String.equals ) { IllegalArgumentException.new }
if ( JRadioButton.isSelected JComboBox.getSelectedItem ) { }
if ( ) { NullPointerException.new }
Math.abs Math.abs return ( Math.abs )
return ( Adjustable.getValue Adjustable.getVisibleAmount Adjustable.getMaximum )
if ( ArrayList<Object>.contains ) { ArrayList<Object>.remove return ( ) }
Collections.addAll
if ( ) { IOException.new } if ( String.equals String.equals String.equals ) { IOException.new }
if ( ) { IllegalArgumentException.new }
if ( ) { IllegalArgumentException.new }
if ( String.startsWith ) { String.substring }
return ( Collection<Object>.size )
ObjectInputStream.defaultReadObject ObjectInputStream.readInt ObjectInputStream.readInt for ( ; ; ) { ObjectInputStream.readObject ObjectInputStream.readObject }
Boolean.toString Boolean.toString
if ( ) { if ( ) { NullPointerException.new } }
return ( Float.isInfinite )
ArrayList<String>.new String.indexOf while ( ) { String.indexOf if ( ) { String.substring } else { String.substring } ArrayList<String>.add } ArrayList<String>.size return ( ArrayList<String>.toArray )
if ( Arrays.equals ) { return ( ) }
if ( ) { IllegalArgumentException.new } do { FileChannel.read } while ( ByteBuffer.hasRemaining ) ;
if ( ) { IllegalArgumentException.new } if ( ) { return ( List<>.size ) }
if ( ) { ContentHandler.endPrefixMapping }
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } ArrayList<Object>.new Collection<Object>.add
return ( MacSpi.engineGetMacLength )
return ( Arrays.asList )
List<Object>.size List<Object>.size for ( ; ; ) { for ( ; ; ) { if ( List<Object>.get List<Object>.get ) { List<Object>.remove List<Object>.size } } } return ( List<Object>.size )
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new }
return ( EnumSet.of )
Arrays.asList String.equals if ( Map<String,String>.isEmpty ) { IllegalArgumentException.new }
for ( ; ; ) { if ( HashMap<String,String>.containsKey ) { HashMap<String,String>.get HashMap<String,String>.put } else { if ( String.startsWith ) { HashSet<String>.add } else { ArrayList<String>.add } } }
return ( HashSet.iterator )
String.valueOf return ( String.length String.substring )
if ( ) { ArrayList<Object>.new }
for ( ; Iterator.hasNext ; ) { Iterator.next }
for ( ) { Entry<Object,Object>.getKey if ( Class<Object>.isAssignableFrom ) { Entry<Object,Object>.getValue Set<Object>.add } }
List<Object>.add
if ( ) { URI.create ProxySelector.getDefault ProxySelector.select if ( List<Proxy>.size ) { return ( List<Proxy>.get ) } }
String.new
return ( Properties.remove )
if ( List<>.isEmpty ) { IllegalArgumentException.new }
Set<Object>.size HashMap<String,Object>.new for ( ) { Map<String,Object>.put } Map<String,Object>.values
if ( ) { return ( String.charAt Character.toUpperCase String.substring ) } else { if ( String.equals ) { return ( ) } }
Math.abs
if ( ) { if ( ) { if ( ) { if ( ) { if ( ) { if ( ) { System.arraycopy } } } } } }
Math.abs
return ( ObjectName.new ) RuntimeException.new
if ( ) { IllegalArgumentException.new }
ThreadLocal.set
String.valueOf JTextField.setText String.valueOf JTextField.setText String.valueOf JTextField.setText String.valueOf JTextField.setText String.valueOf JTextField.setText String.valueOf JTextField.setText String.valueOf JTextField.setText String.valueOf JTextField.setText String.valueOf JTextField.setText String.valueOf JTextField.setText String.valueOf JTextField.setText
if ( ) { NullPointerException.new } Class.getResourceAsStream if ( ) { IOException.new }
Pattern.compile HashMap.new
return ( if ( ) { while ( Iterator.hasNext ) { Iterator.next } } return ( ) return ( ) UnsupportedOperationException.new Iterator.new )
if ( ) { return ( Rectangle2D.getX Rectangle2D.getX Rectangle2D.getWidth Rectangle2D.getY Rectangle2D.getY Rectangle2D.getHeight Rectangle2D.getWidth Rectangle2D.getWidth Rectangle2D.getHeight Rectangle2D.getHeight Double.new ) } else { return ( Double.new ) }
Throwable.printStackTrace
return ( Date.clone )
ChangeEvent.new for ( ) { ChangeListener.stateChanged }
Integer.new
Collection<Object>.contains Collection<Object>.stream if ( Collection<Object>.size ) { return ( ) } List<Object>.retainAll
return ( String.equalsIgnoreCase )
Math.floor Executors.newFixedThreadPool ArrayList<Callable<Boolean>>.new for ( ; ; ) { return ( ) Callable<Boolean>.new Collection<Callable<Boolean>>.add } ExecutorService.invokeAll List<Future<Boolean>>.isEmpty InterruptedException.printStackTrace ExecutorService.shutdown
List<Object>.add
Graphics2D.create if ( ) { Graphics2D.setRenderingHint Graphics2D.setRenderingHint } if ( ) { Graphics2D.setStroke }
UnsupportedOperationException.new
System.getSecurityManager if ( ) { SecurityManager.checkPermission }
return ( Class<Object>.cast )
return ( Map<String,Object>.get )
if ( ) { NullPointerException.new } ByteArrayOutputStream.new if ( ) { GZIPOutputStream.new ObjectOutputStream.new } else { ObjectOutputStream.new } ObjectOutputStream.writeObject ObjectOutputStream.close GZIPOutputStream.close OutputStream.close ByteArrayOutputStream.close return ( ByteArrayOutputStream.toByteArray String.new ) return ( ByteArrayOutputStream.toByteArray String.new )
Hashtable.elements Hashtable.size while ( Enumeration.hasMoreElements ) { Enumeration.nextElement }
if ( ) { Throwable.new }
String.format
if ( ) { IOException.new } if ( ) { if ( ) { IOException.new } }
if ( List<Object>.isEmpty ) { return ( ) } List<Object>.remove
if ( ) { for ( ; List.size ; ) { List.get } }
Hashtable.get
if ( ) { NullPointerException.new } if ( ) { NullPointerException.new }
UnsupportedOperationException.new
HashMap<Object,Object>.new for ( ) { if ( Map<Object,Object>.put ) { IllegalArgumentException.new } } return ( Map<Object,Object>.values )
Map<Integer,Object>.put
System.arraycopy
PrintWriter.new
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new }
return ( Integer.intValue )
if ( ) { return ( XmlElementWrapper.nillable ) } if ( ) { return ( XmlElement.nillable ) }
for ( ; ; ) { Math.random } PrintStream.println for ( ; ; ) { PrintStream.println }
if ( ) { ArrayList<Object>.new }
if ( ) { IllegalArgumentException.new } StringBuffer.new StringBuffer.append StringBuffer.append Switch ( ) { case : StringBuffer.append break case : StringBuffer.append break case : StringBuffer.append break } StringBuffer.toString Math.max
return ( ArrayList.new )
if ( ) { Level.toString }
if ( ) { Integer.valueOf }
if ( ) { if ( ) { if ( ) { Map<Integer,Object>.put } } }
Map.put Map.put Container.add BorderFactory.createEtchedBorder BorderFactory.createTitledBorder FlowLayout.new JPanel.new JPanel.add JPanel.add Container.add WindowAdapter.new
Class.getSimpleName Thread.currentThread Thread.getStackTrace StackTraceElement.getMethodName
for ( ; ; ) { Integer.new List.add }
return ( Long.longValue Date.new DateFormat.format )
if ( List<Object>.isEmpty ) { } String.indexOf if ( ) { if ( ) { String.substring } } if ( ) { String.length String.substring } else { if ( ) { List<Object>.size ArrayList<String>.new for ( ) { ArrayList<String>.add } } }
return ( ArrayList<Object>.get )
HashMap<Locale,SoftReference<Object>>.new
URI.create
if ( ) { Class<>.getDeclaredMethods } if ( ) { Class<>.getMethods } for ( ; ; ) { if ( Method.getDeclaringClass Method.getModifiers Modifier.isPublic ) { } }
if ( String.isEmpty ) { IllegalArgumentException.new }
if ( ) { Vector<Object>.new } Vector<Object>.add
for ( ) { Entry<String,String>.getKey Entry<String,String>.getValue } if ( ) { for ( Properties.keySet ) { Properties.getProperty } } for ( ) { Entry<String,String>.getKey Entry<String,String>.getValue } ConcurrentHashMap<Object,Object>.new
List<Object>.add
if ( ) { NullPointerException.new }
StringBuilder.new StringBuilder.append return ( StringBuilder.toString )
return ( String.length String.endsWith String.charAt String.charAt String.charAt )
IntBuffer.get IntBuffer.get IntBuffer.get IntBuffer.get IntBuffer.get
for ( ) { Map<String,Object>.get if ( ) { if ( ) { if ( String.equals ) { return ( ) } } } }
if ( ) { Collections.emptyList }
for ( List<Object>.size ; ; ) { List<Object>.get if ( String.equals ) { return ( ) } }
ArrayList<String>.new return ( ArrayList<String>.toArray )
OutputStream.write
if ( String.charAt String.charAt String.charAt ) { return ( ) } for ( ; String.length ; ) { if ( String.charAt ) { } } if ( ) { String.substring Integer.valueOf Integer.intValue return ( ) } else { String.length String.substring Integer.parseInt return ( ) }
return ( Integer.intValue )
Class.getResourceAsStream InputStream.close
return ( AttributedString.new AttributedString.getIterator )
if ( String.isEmpty ) { } Map<String,Object>.size if ( Map<String,Object>.containsKey ) { } Map<String,Object>.put
if ( String.charAt ) { } String.split ArrayList<Object>.new for ( ) { List<Object>.add }
for ( ; ; ) { List.add }
HashSet<Object>.isEmpty
Objects.requireNonNull List<Object>.add
if ( String.length String.charAt Character.isDigit String.charAt Character.isDigit String.charAt ) { return ( ) }
Integer.parseInt Random.new do { Random.nextInt Random.nextInt } while ( ) ; Date.new
return ( Callable<Object>.getClass Class.getSimpleName )
StringBuffer.new StringBuffer.append StringBuffer.append if ( ) { StringBuffer.append } return ( StringBuffer.toString )
if ( List<Object>.isEmpty ) { return ( ) }
if ( ) { Window.addWindowListener } else { if ( HierarchyEvent.getChangeFlags ) { SwingUtilities.getWindowAncestor Window.addWindowListener } HierarchyListener.new Component.addHierarchyListener }
if ( ) { IllegalArgumentException.new }
return ( DataInputStream.readLine )
return ( LinkedHashSet.isEmpty )
for ( ; ; ) { Class.forName Class.newInstance }
if ( ) { return ( List<Object>.get ) }
return ( Integer.intValue )
if ( ) { NullPointerException.new } if ( ) { NullPointerException.new } Date.getTime Date.new
if ( ) { IllegalArgumentException.new } return ( Math.log Math.log Math.floor Math.pow )
if ( ) { return ( Collections.unmodifiableList ) }
Float.new
ActionListenerProxy.new InputMap.put ActionMap.put
Properties.getProperty if ( Properties.getProperty ) { Map.get if ( ) { String.valueOf Properties.setProperty } }
if ( ) { PrintStream.println }
Boolean.valueOf
NamingContextExt.bind_new_context Hashtable.new Hashtable.putAll NameAlreadyBoundException.new InvalidNameException.new Exception.toString NamingException.new
return ( String.trim String.length )
UnsupportedOperationException.new
if ( String.isEmpty ) { return ( ) } if ( ) { String.split StringBuilder.new for ( ) { String.substring StringBuilder.append } StringBuilder.toString } else { String.replaceAll String.valueOf } String.length String.length String.substring String.toUpperCase
if ( ) { Timer.stop }
while ( List<Object>.size List<Object>.get ) { List<Object>.get }
ObjectInputStream.new return ( ObjectInputStream.readObject ) RuntimeException.new
System.currentTimeMillis if ( ) { System.currentTimeMillis }
return ( SSLContext.getSocketFactory )
if ( ) { Double.valueOf Double.valueOf }
if ( AtomicBoolean.get ) { }
for ( ) { Map<UUID,UUID>.get Map<UUID,UUID>.get if ( UUID.equals ) { Map<UUID,Integer>.get Map<UUID,Integer>.get return ( ) } } Comparator<Object>.new Collections.sort
if ( AtomicInteger.get ) { RuntimeException.new } if ( AtomicInteger.decrementAndGet ) { }
ArrayList<Object>.new for ( ) { if ( ) { if ( ) { List<Object>.add } } else { List<Object>.add } }
if ( ) { return ( Files.newOutputStream ) } else { if ( ) { return ( FileSystem.create ) } else { return ( FileOutputStream.new ) } } IOException.getMessage
Entry.getKey Object.hashCode
Object.new
if ( ) { IndexOutOfBoundsException.new }
PrintStream.println
if ( Class.isAssignableFrom ) { URL.new return ( ) } rpc.new Class.getName rpc.new
FileNameExtensionFilter.new FileNameExtensionFilter.new JFileChooser.addChoosableFileFilter FileNameExtensionFilter.new JFileChooser.addChoosableFileFilter JFileChooser.addChoosableFileFilter JFileChooser.setFileFilter
Action.setEnabled Action.setEnabled
JComboBox<String>.getSelectedItem JComboBox<Object>.getSelectedItem Object.toString for ( ) { if ( ) { if ( String.startsWith ) { String.length String.substring } String.format } } if ( ) { String.format }
LinkedHashMap<Object,Object>.new
if ( List.contains ) { List.add }
JMenuBar.new HashMap<String,Object>.new
SwingUtilities.getAncestorOfClass
return ( NumberFormat.format )
if ( ) { IllegalStateException.new } System.nanoTime Map<Object,Object>.get Map<Object,Object>.get Map<Object,Object>.get
HashMap<String,HashMap<String,HashMap<String,Object>>>.get HashMap<String,HashMap<String,Object>>.get
if ( ) { GridBagConstraints.new GridBagConstraints.new JLabel.new GridBagConstraints.new GridBagConstraints.new JPanel.new GridBagLayout.new JPanel.setLayout JPanel.setPreferredSize JPanel.setMinimumSize Insets.new Insets.new Insets.new Insets.new JPanel.add JPanel.add JPanel.add JPanel.add }
BigDecimal.new BigDecimal.new Callable<Void>.new BigDecimal.toPlainString BigDecimal.toPlainString for ( ; NodeList.getLength ; ) { NodeList.item Node.getAttributes NamedNodeMap.getNamedItem Node.getAttributes NamedNodeMap.getNamedItem if ( ) { BigDecimal.toPlainString BigDecimal.toPlainString } }
if ( ) { IllegalStateException.new }
if ( ) { IllegalArgumentException.new } Math.sqrt Math.ceil
if ( ) { IllegalArgumentException.new }
Double.new
if ( ) { String.valueOf IllegalArgumentException.new }
IOException.new
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } if ( File.exists ) { FileWriter.new BufferedWriter.new return ( ) } File.mkdirs
System.getProperty if ( String.isEmpty ) { }
ArrayList.new ArrayList.new HashSet.new HashSet.new HashSet.new HashSet.new
ArrayList.new for ( ) { for ( ; ; ) { if ( ) { List<Object>.add } } }
if ( ) { PrintStream.println }
Compiler.errorQueue IOException.getMessage
if ( Collection<Object>.isEmpty ) { IllegalArgumentException.new } Integer.numberOfLeadingZeros Collection<Object>.size Integer.numberOfLeadingZeros if ( ) { Integer.numberOfLeadingZeros } Collection<Object>.iterator for ( ; ; ) { if ( Iterator<Object>.hasNext ) { Iterator<Object>.next } else { Collection<Object>.iterator Iterator<Object>.next } }
ArrayList.new Collections.addAll
if ( AtomicBoolean.get AtomicBoolean.get ) { return ( ) } while ( PriorityQueue<Object>.isEmpty PriorityQueue<Object>.peek ) { PriorityQueue<Object>.poll if ( ) { PriorityQueue<Object>.add } }
return ( Map<String,Object>.get )
Properties.getProperty StringTokenizer.new StringTokenizer.nextToken StringTokenizer.nextToken StringTokenizer.nextToken ArrayList<Object>.new Collections.emptyList List<Object>.add
if ( ) { IllegalStateException.new } if ( ) { Context.declarePrefix } else { Context.new Context.declarePrefix }
Pattern.matcher if ( Matcher.matches ) { if ( Matcher.group ) { Matcher.group } Matcher.group Matcher.group }
if ( ) { Object[].getClass Class.getComponentType Array.newInstance }
for ( Map<String,Object>.values ) { } for ( Map<String,Object>.values ) { }
ArrayList.new if ( ) { List<Object>.addAll } if ( List<Object>.size ) { } List<Object>.addAll if ( List<Object>.isEmpty ) { List<Object>.size List<Object>.get List<Object>.size List<Object>.remove } List<Object>.size List<Object>.toArray
for ( ; ; ) { Math.pow }
Date.new SimpleDateFormat.format if ( String.equals ) { return ( ) }
if ( String.equals ) { return ( ) } Runtime.getRuntime Runtime.totalMemory Runtime.freeMemory Runtime.totalMemory Runtime.freeMemory Runtime.maxMemory
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } if ( ) { RuntimeException.new }
if ( List<Object>.isEmpty List<Object>.size ) { List<Object>.size } List<Object>.get
return ( FloatBuffer.position )
return ( Integer.intValue )
return ( List<Object>.isEmpty )
ArrayList.new for ( ) { if ( ) { List<Object>.add } }
Switch ( ) { default : IndexOutOfBoundsException.new }
ByteArrayOutputStream.new ByteArrayOutputStream.flush ByteArrayOutputStream.toByteArray
return ( MultiLookAndFeel.uisToArray )
MBeanInfo.getAttributes for ( ) { if ( MBeanAttributeInfo.getName String.equals ) { return ( ) } }
ArrayList.new for ( ) { if ( ) { List<Object>.add } }
if ( ) { NullPointerException.new }
String.length StringBuilder.new for ( ; ; ) { String.charAt if ( ) { if ( ) { String.charAt String.charAt } } StringBuilder.append } return ( StringBuilder.toString )
URL.getFile if ( ) { if ( String.startsWith ) { return ( ) } }
String.indexOf if ( ) { IllegalArgumentException.new } return ( String.substring String.trim String.substring )
return ( Object.toString Charset.defaultCharset String.getBytes ByteBuffer.wrap )
SimpleDateFormat.getDateTimeInstance DateFormat.format
return ( EnumSet.noneOf )
if ( ) { Integer.valueOf }
Hashtable<String,Object>.put Hashtable<String,Object>.size
ByteArrayOutputStream.new return ( ByteArrayOutputStream.toByteArray ) IOException.getMessage RuntimeException.new
return ( Collector.of )
HashMap.new for ( ) { Map<String,Integer>.size Map<String,Integer>.put } return ( Map<String,Integer>.get Map<String,Integer>.get return ( ) )
if ( ) { JTextField.new JTextField.setColumns }
Runnable.new
if ( ) { if ( ) { return ( Boolean.booleanValue ) } return ( String.equals ) }
for ( ) { if ( ) { IllegalStateException.new } if ( ) { List<Object<Object>>.add } }
if ( ) { if ( String.isEmpty ) { String.split for ( ; ; ) { String.trim } return ( ) } }
HashMap.new for ( ; ; ) { HashMap<String,Integer>.put } for ( ; ; ) { if ( HashMap<String,Integer>.containsKey ) { HashMap<String,Integer>.get } } return ( Arrays.copyOf Arrays.copyOf )
if ( ) { if ( Thread.getState State.equals ) { Thread.interrupt } }
String.format String.format
ObjectName.new
for ( ) { if ( ) { List<Object>.add } else { if ( ) { List<Object>.add } else { List<Object>.add } } }
HashSet.new while ( ) { Set<String>.add } HashMap.new for ( ) { Map<String,Object>.put } Map<String,Object>.keySet for ( ) { Map<String,Object>.get }
if ( String.isEmpty ) { IllegalArgumentException.new }
return ( List<Object>.size )
Collectors.toList Optional.of return ( Optional<Object>.isPresent Optional<Object>.get )
List<Object>.size for ( ; ; ) { List<Object>.get if ( ) { Math.min } }
for ( ) { Collection<Object>.add }
for ( ; ; ) { if ( ) { IllegalArgumentException.new } }
DataOutputStream.new DataOutputStream.writeByte
return ( BigInteger.valueOf )
HashSet<Object>.new HashSet<Object>.new Set<Object>.retainAll return ( Set<Object>.size )
if ( ) { Math.max }
if ( Set<Object>.contains ) { return ( ) }
WeakReference<Object>.new
ArrayList<X509Certificate>.new Collection<X509Certificate>.add
String.trim String.length String.charAt if ( Character.isDigit ) { return ( Long.parseLong ) } else { String.substring Long.parseLong if ( ) { IllegalArgumentException.new } return ( ) }
HashMap.new if ( Files.exists ) { Files.createDirectories } Files.exists String.valueOf Map<String,String>.put Path.toUri URI.getScheme URI.getPath URI.new FileSystems.newFileSystem FileSystem.getPath Path.toString Path.toString Paths.get Files.copy Path.toString Path.toString Paths.get if ( Files.exists ) { Files.createDirectory } SimpleFileVisitor<Path>.new Files.walkFileTree Exception.getMessage
String.replace String.replace String.replace String.replace return ( String.compareTo )
return ( Iterable<>.iterator )
Map<Object,Object>.remove if ( Map<Object,Object>.isEmpty ) { }
return ( Integer.intValue )
if ( ) { IllegalArgumentException.new } Sync.releaseShared
if ( ) { if ( ) { IOException.new } }
if ( ) { SecurityException.new } File.getPath
Statement.executeQuery HashSet<Object>.new while ( ResultSet.next ) { ResultSet.getInt if ( ) { IllegalArgumentException.new } Set<Object>.add } if ( Set<Object>.isEmpty ) { IllegalArgumentException.new } ResultSet.close
JTextField.setText JTextField.setText JTextField.setText JTextField.setText JTextField.setText JTextArea.setText JLabel.setText JLabel.setText JTextArea.setText DateFormat.getDateTimeInstance DateFormat.format JLabel.setText Double.new Double.doubleValue JSpinner.setValue JSpinner.getValue
PropertyChangeListener.new
return ( String.equals )
Long.parseLong
WeakReference<Object>.get
if ( String.equals ) { }
if ( List<Object>.isEmpty ) { return ( List<Object>.get ) }
ArrayList<File>.new for ( ) { File.new ArrayList<File>.add }
ByteOrder.nativeOrder ByteBuffer.order
ArrayList.new if ( ) { List<Object>.addAll } else { List<Object>.add }
String.valueOf
Math.pow Math.round for ( ; ; ) { Runnable.new } Exception.toString
for ( ; ; ) { Vector.addElement }
Runnable.new
ArrayList<Object>.new for ( ) { if ( ) { List<Object>.add } }
InetAddress.getLocalHost InetAddress.getHostAddress
return ( HashSet<String>.contains )
if ( ) { while ( ) { Thread.sleep Exception.getMessage } } else { while ( ) { Integer.intValue Thread.sleep Exception.getMessage } } System.currentTimeMillis System.currentTimeMillis Thread.sleep InterruptedException.getMessage if ( ) { Integer.intValue Integer.intValue }
String.format String.format
if ( ) { if ( ) { Error.text PrintStream.printf return ( ) } }
return ( Preferences.getInt )
Long.parseLong
System.nanoTime for ( HashMap<Object,Object>.entrySet ) { Entry<Object,Object>.getValue } String.equals if ( ) { System.nanoTime }
StringBuilder.new for ( ) { StringBuilder.append } return ( StringBuilder.toString )
return ( SecretKeyFactorySpi.engineGenerateSecret )
if ( AtomicBoolean.get ) { AtomicBoolean.set return ( ) } HashSet.new for ( ) { if ( ) { Date.new Set<Object>.add } } if ( Set<Object>.isEmpty ) { }
while ( ) { Thread.sleep }
return ( List<InputStream>.stream Stream.map Collectors.toMap )
HashSet.new Set<Object>.add Set<Object>.add HashSet.new while ( ) { Set<Object>.add }
QName.getNamespaceURI if ( ) { XMLStreamWriter.getPrefix if ( ) { XMLStreamWriter.writeNamespace XMLStreamWriter.setPrefix } if ( String.trim String.length ) { XMLStreamWriter.writeCharacters } else { XMLStreamWriter.writeCharacters } } else { XMLStreamWriter.writeCharacters }
return ( Integer.intValue )
if ( ) { Math.max return ( ) }
return ( ReentrantLock.hasQueuedThreads )
return ( Integer.intValue )
for ( Map<String,Object>.entrySet ) { Entry<String,Object>.getValue } Map<String,Object>.clear Map<String,Long>.clear
return ( Optional.ofNullable )
return ( Integer.intValue )
if ( ) { ArrayList<Object>.new } List<Object>.add
if ( ) { IllegalArgumentException.new }
UnsupportedOperationException.new
if ( ) { IllegalArgumentException.new }
if ( ) { Integer.valueOf }
if ( ) { IllegalArgumentException.new } System.arraycopy
FileOutputStream.new String.getBytes
return ( PriorityQueue<Object>.size )
for ( ) { for ( ) { for ( Map<String,List<String>>.get ) { } } }
return ( Math.sin Math.cos )
if ( ) { System.arraycopy } return ( Arrays.asList List.iterator )
for ( LinkedHashMap<String,Object>.values ) { LinkedHashMap<String,Object>.get }
Map<String,Object>.put
if ( ) { System.arraycopy }
for ( ; ; ) { Math.max Math.min }
if ( ) { MouseEvent.getX MouseEvent.getY }
if ( ) { if ( ) { IllegalStateException.new } }
Collectors.summingLong Collectors.groupingBy
if ( List<Object>.isEmpty ) { return ( ) } ArrayList<Object>.new for ( ) { Collection<Object>.add }
String.format if ( ) { return ( ) String.format IOException.new }
Any.insert_Object
return ( AnnotationTypeMismatchException.new )
if ( ) { List<Object>.remove }
StringBuilder.new String.format StringBuilder.append for ( ) { if ( ) { String.format StringBuilder.append } else { String.format StringBuilder.append } if ( Set<Object>.size ) { StringBuilder.append } else { StringBuilder.append } } return ( StringBuilder.toString )
String.getBytes
for ( ; ; ) { return ( ) return ( ) List<Object>.add } HashSet<String>.new ArrayList<Object>.new
if ( ) { if ( Collection<Object>.size ) { } }
return ( String.new ) AssertionError.new
DataInputStream.readUnsignedByte if ( ) { DataInputStream.readUnsignedByte HashSet<Integer>.new HashSet<Integer>.add return ( ) } DataInputStream.readFully String.new IDN.toUnicode if ( String.length ) { }
StringBuilder.append StringBuilder.append StringBuilder.append String.length StringBuilder.append
Map.size
return ( Map.containsKey )
if ( ConcurrentMap<String,Object>.putIfAbsent ) { String.format IllegalStateException.new }
AtomicReference<Object>.get AtomicReference<Collection<Object>>.get if ( Collection<Object>.isEmpty ) { String.format return ( ) } if ( ) { String.format }
System.currentTimeMillis do { System.currentTimeMillis } while ( ) ;
BufferedImage.getWidth BufferedImage.getHeight BufferedImage.new BufferedImage.getWidth BufferedImage.getHeight BufferedImage.getWidth BufferedImage.getRGB BufferedImage.setRGB
return ( Math.pow )
return ( return ( ) Callable<Boolean>.new )
if ( ) { Integer.valueOf }
String.substring
String.valueOf
if ( ) { Math.abs Math.abs if ( ) { Math.sqrt Math.sqrt Math.sqrt } else { Math.sqrt Math.sqrt Math.sqrt } }
if ( ) { IllegalArgumentException.new } IllegalStateException.new
return ( HashMap<Object,Object>.size )
if ( ) { NullPointerException.new }
return ( Arrays.asList )
if ( ) { String.valueOf } if ( Collections.emptyMap Map<String,String>.equals ) { HashMap.new }
List<Object>.add List<Object>.add List<Object>.add
if ( ) { IllegalArgumentException.new }
ArrayList<Object>.new for ( ; ; ) { ArrayList<Object>.add } Collections.sort
ImageIO.read RuntimeException.new BufferedImage.getWidth BufferedImage.getHeight BufferedImage.new BufferedImage.new BufferedImage.flush BufferedImage.flush BufferedImage.getGraphics Graphics2D.drawImage Graphics2D.dispose
Socket.close Exception.getLocalizedMessage
System.getenv if ( ) { StringBuilder.append }
BigDecimal.valueOf List<Object>.size List<Object>.get
OutputStream.write OutputStream.write OutputStream.write HashMap.values Collection.iterator while ( Iterator.hasNext ) { Iterator.next } OutputStream.write
for ( Map<String,Object>.values ) { }
Class.getName Logger.fine Logger.fine
return ( Thread.currentThread Thread.getContextClassLoader ClassLoader.loadClass )
Runnable.new
StringBuffer.length if ( ) { StringBuffer.charAt return ( Character.toString ) } else { return ( StringBuffer.substring ) }
Math.toRadians if ( ) { Math.cos Math.sin Math.cos Math.sin }
if ( ) { PrintStream.println System.exit } Paths.get if ( Files.isReadable ) { Path.toAbsolutePath PrintStream.println System.exit } Path.toAbsolutePath PrintStream.println Files.newBufferedReader Exception.printStackTrace System.exit PrintStream.println PrintStream.println Exception.getMessage PrintStream.println Exception.printStackTrace PrintStream.println PrintStream.println PrintStream.println
Exception.getMessage PrintStream.println PrintStream.println
if ( ) { NullPointerException.new }
LinkedList.new for ( Map<String,Deque<Object>>.entrySet ) { Entry<String,Deque<Object>>.getKey Entry<String,Deque<Object>>.getValue if ( Deque<Object>.isEmpty ) { Deque<Object>.peekLast if ( ) { List<String>.add } } }
Class<>.getMethod Method.invoke
if ( ) { PrintStream.println }
InternalError.new
if ( String.indexOf ) { StringBuilder.new for ( ; String.length ; ) { String.charAt Switch ( ) { case : StringBuilder.append break default : StringBuilder.append break } } }
BigInteger.new BigInteger.toByteArray BigInteger.signum
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new }
if ( ) { IllegalArgumentException.new }
if ( ) { PrintStream.println }
if ( ) { return ( Number.doubleValue Number.doubleValue ) } else { return ( Number.longValue Number.longValue ) }
if ( ) { for ( ) { URI.create if ( ) { Set<Object>.add } } }
System.arraycopy System.arraycopy System.arraycopy
if ( String.equals ) { return ( ) }
ExecutorService.submit Future<Object>.get return ( Collections.singletonList )
return ( RandomAccessFile.getFD )
if ( Class.getName ) { return ( ) }
Pattern.matcher if ( Matcher.find ) { } Matcher.group Long.parseLong if ( Matcher.group ) { return ( ) } Switch ( Matcher.group String.toLowerCase ) { }
for ( ; ; ) { if ( BigDecimal.compareTo ) { } BigDecimal.subtract if ( BigDecimal.signum ) { break } } BigDecimal.new
JDialog.setVisible if ( ) { JFrame.requestFocus }
if ( ) { if ( ) { String.trim } } else { if ( ) { String.trim } }
if ( ) { IllegalArgumentException.new }
for ( ; ; ) { Math.round }
if ( ) { ObjectName.getCanonicalName }
DecimalFormatSymbols.new if ( String.equals ) { DecimalFormat.new BigDecimal.new BigDecimal.divide } else { DecimalFormat.new } return ( NumberFormat.format )
PrintStream.println PrintStream.println PrintStream.println PrintStream.println PrintStream.println PrintStream.println PrintStream.println PrintStream.println PrintStream.println PrintStream.println PrintStream.println PrintStream.println PrintStream.println PrintStream.println System.exit
return ( Integer.intValue )
if ( List<Object>.size List<Object>.size ) { return ( ) } for ( ) { if ( List<Object>.contains ) { continue } for ( ) { if ( ) { if ( Set<String>.contains ) { Map<String,Object>.get } } } }
ArrayList.new ArrayList.new if ( ) { if ( ) { for ( ; ; ) { if ( ) { QName.new ArrayList.add ArrayList.add } else { QName.new ArrayList.add ArrayList.add } } } else { QName.new ArrayList.add ArrayList.add } } return ( ArrayList.toArray ArrayList.toArray )
BigInteger.intValue Integer.new BigInteger.intValue Integer.new
Map<Object,Map<Object,Pattern>>.get if ( ) { return ( Map.keySet HashSet.new ) }
Exception.getMessage
HashMap<Long,List<Object>>.get if ( ) { ArrayList.new HashMap<Long,List<Object>>.put } List<Object>.add
for ( ; ArrayList<Object>.size ; ) { ArrayList<Object>.get }
ArrayList.add
if ( ) { PrintStream.println }
if ( ) { ArrayList<Object>.new }
if ( ) { IllegalArgumentException.new }
String.split for ( ; ; ) { String.split if ( String.equalsIgnoreCase ) { Integer.parseInt } else { if ( String.equalsIgnoreCase ) { Integer.parseInt } else { if ( String.equalsIgnoreCase ) { } } } }
if ( ) { IllegalArgumentException.new }
HashSet.new for ( ; ; ) { Long.new HashSet.add }
DataInputStream.new
if ( String.equals ) { return ( ) } if ( String.equals ) { return ( ) } if ( String.equals ) { } if ( String.equals ) { return ( ) }
return ( List<Object>.size )
return ( System.currentTimeMillis )
InputStream.close
return ( Arrays.asList )
FileInputStream.new while ( FileInputStream.read ) { OutputStream.write } OutputStream.flush if ( ) { OutputStream.close } if ( ) { FileInputStream.close }
String.getBytes ByteArrayInputStream.new RuntimeException.new
List<Object>.add List<Object>.add
DataSource.getConnection if ( ) { Connection.close }
return ( Rectangle2D.clone )
if ( ) { NullPointerException.new } Collections.sort
Double.new
if ( ) { Map<Object,ArrayList<Object>>.get if ( ) { ArrayList<Object>.new Map<Object,ArrayList<Object>>.put } ArrayList<Object>.add } if ( ) { if ( ) { ArrayList<Object>.add } else { if ( ) { ArrayList<Object>.add } } } else { if ( ) { ArrayList<Object>.add } }
if ( ) { Math.atan2 } if ( ) { Math.atan2 }
for ( ; ; ) { JComboBox<Object>.addItem if ( ) { JComboBox<Object>.setSelectedItem } }
if ( ) { return ( Stream.empty ) }
ArrayList.new ArrayList.new if ( ) { if ( ) { for ( ; ; ) { if ( ) { QName.new ArrayList.add ArrayList.add } else { QName.new ArrayList.add ArrayList.add } } } else { QName.new ArrayList.add ArrayList.add } } return ( ArrayList.toArray ArrayList.toArray )
ThreadLocal<Map<Integer,Object>>.get if ( ) { HashMap<Integer,Object>.new } Map<Integer,Object>.get Map<Integer,Object>.put ThreadLocal<Map<Integer,Object>>.set
if ( ) { for ( ; ; ) { if ( String.length ) { return ( ) } } }
if ( ) { IllegalStateException.new }
StringBuilder.new while ( ) { InputStream.read if ( ) { EOFException.new } StringBuilder.append } StringBuilder.length if ( StringBuilder.charAt ) { StringBuilder.setLength } return ( StringBuilder.toString )
StringBuffer.new if ( ) { StringBuffer.append } return ( StringBuffer.toString )
if ( ) { IllegalArgumentException.new }
return ( System.getProperty String.contains )
ByteBuffer.allocateDirect ByteOrder.nativeOrder ByteBuffer.order ByteBuffer.asShortBuffer ShortBuffer.put ShortBuffer.position
TreePath.getLastPathComponent DefaultMutableTreeNode.getUserObject return ( DefaultMutableTreeNode.toString ) DefaultTreeCellRenderer.new Dimension.new
if ( ) { IllegalStateException.new }
ByteArrayOutputStream.new ByteArrayInputStream.new ByteArrayOutputStream.toByteArray File.getName IOException.new
ArrayList.new
if ( ) { Integer.valueOf }
StringBuffer.new StringBuffer.append StringBuffer.append return ( StringBuffer.toString )
Inflater.new Inflater.new
return ( ResourceBundle.getString )
if ( File.exists ) { if ( File.delete ) { MessageFormat.format IOException.new } }
if ( ) { IllegalStateException.new } if ( ) { IllegalStateException.new }
if ( Optional<Object>.isPresent ) { Optional<Object>.get return ( ) } else { RuntimeException.new }
return ( return ( ) Callable<Object>.new )
if ( ) { PrintStream.print }
NumberFormat.getNumberInstance Math.pow Math.pow Math.pow return ( NumberFormat.format )
if ( ) { if ( ) { if ( String.equals ) { if ( String.equals ) { if ( String.equals ) { } } } } }
do { if ( ) { while ( ) { Float.parseFloat NumberFormatException.getMessage } } } while ( ) ;
if ( ) { IllegalArgumentException.new } else { if ( ) { IllegalArgumentException.new } else { if ( ) { IllegalArgumentException.new } else { if ( ) { IllegalArgumentException.new } } } }
if ( ) { Collections.emptyList }
if ( ) { return ( ) Throwable.new return ( ) }
if ( ) { if ( Object.getClass Class.isArray ) { } }
BorderLayout.new
StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append for ( Map<Object,List<Object>>.entrySet ) { if ( ) { StringBuilder.append } Entry<Object,List<Object>>.getKey StringBuilder.append StringBuilder.append Entry<Object,List<Object>>.getValue while ( Iterator<Object>.hasNext ) { StringBuilder.append Iterator<Object>.next String.valueOf StringBuilder.append StringBuilder.append if ( Iterator<Object>.hasNext ) { StringBuilder.append } } StringBuilder.append } StringBuilder.append
if ( ) { URL.toURI File.new }
if ( ) { IllegalArgumentException.new }
if ( String.equals ) { Class.forName String[].getClass Class<>.getDeclaredMethod Method.setAccessible System.arraycopy Method.invoke } else { System.exit }
if ( ) { Runnable.new }
for ( ) { if ( String.equalsIgnoreCase String.equalsIgnoreCase ) { if ( String.equalsIgnoreCase String.equalsIgnoreCase ) { } } }
ArrayList<Integer>.new for ( ) { ArrayList<Integer>.add }
if ( String.equals ) { }
return ( HashSet.contains )
if ( String.length ) { return ( ) }
return ( Integer.intValue )
File.listFiles if ( ) { Arrays.sort } for ( ) { File.getName if ( File.isDirectory ) { if ( SourceVersion.isIdentifier ) { } } else { if ( ) { File.new } } }
do { RTFScanner.readToken Switch ( ) { case : Document.insertString break } } while ( ) ;
return ( JAXBElement<Object>.new )
Vector.iterator while ( Iterator.hasNext ) { Iterator.next ComponentUI.installUI }
String.equals String.equals
JLabel.setBorder
if ( ) { InputStreamReader.new BufferedReader.new return ( ) } if ( ) { InputStream.close }
return ( Integer.intValue )
Integer.valueOf
JFrame.new JFrame.setDefaultCloseOperation JComponent.setOpaque JFrame.setContentPane JFrame.pack JFrame.setVisible
BufferedReader.new ArrayList<Object>.new ArrayList<Character>.new
if ( ) { ArrayList<Object>.new }
if ( ) { NoSuchElementException.new } else { return ( Enumeration<Object>.nextElement ) }
if ( ) { Arrays.sort }
JComboBox.getModel DefaultComboBoxModel.addElement if ( DefaultComboBoxModel.getSize ) { JComboBox.setSelectedItem }
if ( ) { if ( ) { if ( ) { List<Object>.add } } }
FileOutputStream.new BufferedOutputStream.new DataOutputStream.new DataOutputStream.writeInt for ( LinkedHashMap<String,Object>.entrySet ) { Entry<String,Object>.getValue if ( Entry<String,Object>.getKey ) { Entry<String,Object>.getKey DataOutputStream.writeUTF List<Object>.size DataOutputStream.writeInt DataOutputStream.writeInt for ( ; List<Object>.size ; ) { List<Object>.get DataOutputStream.writeLong DataOutputStream.writeInt } } } if ( ) { DataOutputStream.close }
ArrayList<Object>.size Random.nextInt ArrayList<Object>.get System.currentTimeMillis if ( ) { PrintStream.println PrintStream.println return ( ) }
if ( GenericArrayType.equals ) { return ( ) } GenericArrayType.getGenericComponentType if ( ) { return ( Class<>.isArray Class<>.getComponentType ) } if ( ) { return ( GenericArrayType.getGenericComponentType ) } IllegalStateException.new
return ( Date.new )
Map<String,Object>.get Map<String,Object>.get Map<String,Object>.put if ( ) { ArrayList<Map<String,Object>>.new if ( Map<String,Object>.get ) { Map<String,Object>.get } HashMap<String,Object>.new Map<String,Object>.put Map<String,Object>.put List<Map<String,Object>>.add Map<String,Object>.put }
if ( ) { ByteArrayOutputStream.new return ( ) Properties.new ByteArrayOutputStream.toByteArray ByteArrayInputStream.new Properties.load return ( ) for ( Properties.entrySet ) { Entry<Object,Object>.getKey Entry<Object,Object>.getValue } }
System.setProperty Toolkit.getDefaultToolkit Toolkit.getScreenSize Dimension.getWidth Dimension.getHeight Math.min return ( Dimension.new ) JFrame.new Toolkit.getDefaultToolkit Toolkit.getScreenSize JFrame.setPreferredSize SplashScreen.show JFrame.setContentPane JFrame.pack JFrame.setLocationRelativeTo JFrame.setIconImage JFrame.setVisible JFrame.setDefaultCloseOperation WindowAdapter.new JFrame.addWindowListener SplashScreen.hide
if ( ) { IllegalStateException.new }
return ( File.exists )
return ( Base64.getDecoder Decoder.decode )
return ( Consumer<Object>.accept )
if ( String.equals ) { return ( ) } Integer.valueOf Integer.valueOf Integer.valueOf
return ( ByteBuffer.wrap ByteBuffer.order ByteBuffer.getInt )
if ( ) { Thread.new }
PolicyHelper.id
InputStream.read if ( ) { EOFException.new }
if ( Exception.getMessage Exception.getMessage String.contains ) { }
Integer.valueOf Integer.valueOf
for ( ) { if ( ) { Set<Object>.add } }
if ( Class.isInstance ) { return ( ) } BasicPermission.getName Hashtable.get if ( ) { return ( Permission.implies ) } String.length while ( String.lastIndexOf ) { String.substring Hashtable.get if ( ) { return ( Permission.implies ) } }
if ( ) { if ( ) { if ( ) { Object.getClass Class.getName } } }
HashSet<TreePath>.clear HashSet<TreePath>.clear TreeModel.getRoot TreePath.new
if ( ) { if ( ) { if ( ) { if ( Integer.equals ) { } } } }
if ( ) { if ( ) { System.currentTimeMillis } }
return ( Long.compareUnsigned )
Integer.numberOfTrailingZeros Integer.numberOfTrailingZeros while ( ) { Integer.numberOfTrailingZeros }
ArrayList.new for ( ; ; ) { Long.new List.add } List.iterator Iterator.next while ( Iterator.hasNext ) { Iterator.next }
if ( ) { Integer.valueOf }
List<Object>.size List<Object>.add List<Object>.add
if ( ) { Runnable.new }
if ( ) { Integer.valueOf }
Element.getAttributes Element.getAttributes
ArrayList<Object>.size if ( ) { for ( ; ; ) { ArrayList<Object>.get PrintStream.println } } if ( ) { for ( ; ; ) { PrintStream.println } } if ( ) { for ( ; ; ) { PrintStream.println } }
if ( ) { return ( List<Object>.get ) }
Class.getClassLoader ClassLoader.getResource if ( ) { return ( ImageIcon.new ) } else { PrintStream.println return ( ) }
Collection<String>.add Collection<String>.add
if ( ) { ArrayList<Object>.clear }
if ( Collection<String>.size ) { IllegalArgumentException.new } ArrayList<Object>.new for ( ) { if ( ) { Collection<Object>.add } }
Component.setVisible
Map<Object,Collection<Object>>.get if ( ) { Map<Object,Collection<Object>>.put }
for ( ) { Map<String,Object>.get if ( ) { URL.new break } }
if ( ) { return ( Integer.parseInt ) return ( ) }
File.new File.getParent String.toString
if ( ) { IndexOutOfBoundsException.new }
if ( ) { Math.max }
if ( ) { ArrayList<String>.new } List<String>.add
StringBuffer.length if ( ) { StringBuffer.getChars }
PreparedStatement.getConnection ArrayBlockingQueue<Object>.new Semaphore.new
for ( Map<String,Object>.entrySet ) { Entry<String,Object>.getValue if ( String.endsWith String.endsWith ) { Entry<String,Object>.getKey return ( ) } }
if ( ) { IOException.new } PipedReader.receive
Math.min
return ( StringValueExp.getValue MatchQueryExp.new )
if ( ) { return ( Socket.getInetAddress ) }
return ( Math.sqrt )
Arrays.fill
if ( ) { if ( ) { Math.max } }
if ( ) { StringBuilder.new StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append if ( ) { StringBuilder.append StringBuilder.append } StringBuilder.append StringBuilder.append StringBuilder.append if ( ) { StringBuilder.append Integer.toString StringBuilder.toString } else { return ( StringBuilder.toString ) } }
if ( Object.toString String.startsWith ) { if ( File.exists ) { File.delete } return ( ) }
if ( ) { RuntimeException.new } if ( Math.log ) { RuntimeException.new }
Map.get Integer.intValue Integer.intValue
String.split if ( String.equals ) { return ( ) } return ( String.equals Integer.parseInt )
List<Object>.size for ( ; List<Object>.size ; ) { }
if ( ) { return ( Entry<,>.getKey Entry<,>.getValue ) }
if ( ) { ArrayIndexOutOfBoundsException.new }
UnsupportedOperationException.new
if ( BufferedImage.getWidth BufferedImage.getHeight ) { IllegalArgumentException.new } else { if ( ) { IllegalArgumentException.new } } BufferedImage.createGraphics Graphics2D.setRenderingHint BufferedImage.getWidth BufferedImage.getHeight Graphics2D.drawImage Graphics2D.dispose
for ( ; List<ChangeListener>.size ; ) { List<ChangeListener>.get ChangeEvent.new ChangeListener.stateChanged Exception.printStackTrace }
if ( ) { ArrayList<Object>.new }
StringBuilder.new for ( ; ; ) { if ( ) { StringBuilder.append } StringBuilder.append } return ( StringBuilder.toString )
while ( Iterator<>.hasNext ) { Iterator<>.next }
if ( String.length ) { return ( String.length ) }
if ( Map<String,String>.containsKey ) { return ( Map<String,String>.get ) } IllegalStateException.new
ObjectOutputStream.defaultWriteObject ObjectOutputStream.writeInt for ( Set<Entry<Object,Object>>.iterator ; Iterator<Entry<Object,Object>>.hasNext ; ) { Iterator<Entry<Object,Object>>.next Entry<Object,Object>.getKey ObjectOutputStream.writeObject Entry<Object,Object>.getValue ObjectOutputStream.writeObject }
if ( String.startsWith ) { String.length String.substring String.replace } else { if ( String.startsWith ) { String.length String.substring String.replace } else { if ( String.startsWith String.startsWith ) { String.length String.substring } } }
for ( ; ; ) { if ( String.contains ) { ArrayList<Object>.new for ( ; ; ) { if ( ) { List<Object>.add } } return ( ) } }
HashSet<Object>.new for ( ) { Map<Object,Object>.get Set<Object>.add } for ( ) { Map<Object,Object>.get Set<Object>.add } Map<Object,Object>.put
Messager.printMessage
if ( ) { Runnable.new }
if ( ) { return ( ZipEntry.getName ) }
if ( ) { NullPointerException.new } if ( ) { NullPointerException.new } if ( ) { String.format IllegalArgumentException.new } if ( ) { String.format IllegalArgumentException.new }
if ( ) { if ( ) { Set<String>.add } }
return ( Arrays.asList )
Any.insert_ulong
if ( ) { return ( List<Object>.get ) }
if ( ByteBuffer.limit ByteBuffer.capacity ) { ByteBuffer.limit ByteBuffer.allocate ByteBuffer.put ByteBuffer.flip }
return ( List<Object>.remove )
Boolean.valueOf
RuntimeException.new Runnable.new
return ( File.getCanonicalFile ) File.getAbsolutePath IllegalArgumentException.new
PreparedStatement.executeQuery while ( ResultSet.next ) { ResultSet.getInt ResultSet.getString ResultSet.getString ResultSet.getString ResultSet.getString String.equals if ( ) { Box.createVerticalStrut } if ( String.length ) { } String.valueOf Component.setName if ( ) { ArrayList<Component>.add } else { ArrayList<Component>.add } if ( ) { ArrayList<Component>.add } else { ArrayList<Component>.add } }
if ( ) { StringBuilder.new StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.toString }
QName.new for ( ; ; ) { if ( XMLEvent.isStartElement XMLEvent.asStartElement StartElement.getName QName.equals ) { return ( ) } }
PrintWriter.new PrintWriter.println PrintWriter.close File.new File.new File.toPath File.toPath Files.copy File.toPath Files.delete
if ( ) { PrintStream.println }
if ( ) { if ( ) { return ( Class.forName ) } else { return ( Class.forName ) } }
return ( Collections.unmodifiableList )
if ( ) { IllegalArgumentException.new } return ( ReaderMIMETypeFilter.new )
AtomicBoolean.set if ( ) { Thread.join if ( ) { Thread.currentThread Thread.interrupt } }
ArrayList<Object>.new for ( ) { if ( ) { Collection<Object>.add } }
Boolean.valueOf
if ( ) { RuntimeException.new }
ArrayList<Object>.new for ( ) { ArrayList<Object>.add }
if ( ) { IllegalArgumentException.new } if ( ) { AtomicInteger.getAndIncrement Thread.currentThread Thread.getId if ( ) { if ( List<Object>.isEmpty ) { for ( ; List<Object>.size ; ) { List<Object>.get } return ( List<Object>.get ) } } }
if ( ) { List<String>.addAll }
StringBuffer.new StringBuffer.append StringBuffer.append
URLEncoder.encode UnsupportedOperationException.new
return ( FileInputStream.new BufferedInputStream.new )
Vector<Object>.toString for ( ; ; ) { if ( ) { ArrayList<Object>.get } }
LinkedList<Object>.new for ( ; ; ) { if ( ) { List<Object>.add } }
if ( String.startsWith ) { if ( String.startsWith ) { return ( ) } }
BigInteger.valueOf while ( Iterator<Object>.hasNext ) { Iterator<Object>.next BigInteger.add }
String.toLowerCase Map<String,Object>.put
for ( ; ; ) { Integer.new Integer.new }
if ( ) { IOException.new }
return ( AtomicReferenceArray<Object>.new )
HashSet.new
if ( ) { List<Object>.add }
if ( ) { if ( Collection<String>.isEmpty ) { ArrayList<Object>.new ArrayList<Object>.new for ( ) { List<Object>.add List<Object>.add } } }
if ( ) { Object.getClass Class.getSimpleName IllegalArgumentException.new } Float.valueOf
BigDecimal.new
StringBuffer.new while ( Enumeration.hasMoreElements ) { if ( StringBuffer.length ) { StringBuffer.append } Enumeration.nextElement Object.toString StringBuffer.append StringBuffer.append Hashtable.get StringBuffer.append } StringBuffer.append return ( StringBuffer.toString )
return ( ResourceBundle.getString )
if ( Set<Object>.isEmpty ) { if ( Set<Object>.isEmpty ) { HashSet.new Set<Object>.removeAll return ( ) } }
List<Object>.size for ( ; ; ) { List<Object>.get }
String.getChars
if ( List<Object>.isEmpty ) { }
if ( ) { IllegalArgumentException.new }
ArrayList<String>.new for ( ) { Collection<String>.add }
if ( ) { RuntimeException.new }
if ( String.isEmpty ) { File.new if ( File.exists ) { if ( File.delete ) { File.getAbsolutePath } } File.getAbsolutePath }
AWTError.new
StringBuilder.new StringBuilder.append StringBuilder.toString StringBuilder.toString SecretKey.getAlgorithm StringBuilder.toString
return ( Integer.intValue )
return ( List<Object>.size )
Graphics2D.getTransform Graphics2D.getClip Graphics2D.getRenderingHints RenderContext.new RenderableImage.createRendering Graphics2D.setTransform Graphics2D.setTransform
if ( String.equals String.equals ) { return ( ) }
ArrayList.new List<Object>.add if ( ) { Arrays.asList List<Object>.addAll } if ( ) { Arrays.asList List<Object>.addAll } if ( ) { Arrays.asList List<Object>.addAll }
return ( Math.max Math.max Math.max )
if ( ) { PrintStream.println }
EnumMap<Object,Object>.new
if ( ) { if ( ) { PrintStream.println PrintStream.println } if ( ) { PrintStream.println PrintStream.println } }
HashMap<Object,Action>.new for ( ; ; ) { Action.getValue HashMap<Object,Action>.put } for ( ; ; ) { Action.getValue HashMap<Object,Action>.put } HashMap<Object,Action>.size for ( HashMap<Object,Action>.values Collection.iterator ; Iterator<Action>.hasNext ; ) { Iterator<Action>.next }
if ( ) { IllegalArgumentException.new }
IllegalArgumentException.new
PriorityQueue<Object>.clear
if ( ) { IOException.new } if ( ) { Switch ( ) { case : IOException.new default : IOException.new } } else { IOException.new }
while ( ) { InputStream.skip }
if ( ) { FileChooserNewFolderIcon.new }
if ( ) { if ( ) { return ( Boolean.booleanValue ) } return ( String.equals ) }
Switch ( ) { default : String.format IllegalStateException.new }
if ( ) { if ( ) { HashSet<Object>.new List<Object>.size Set<Object>.size Set<Object>.retainAll Set<Object>.size } JFormattedTextField.setVisible JFormattedTextField.setVisible }
Runnable.run
ArrayList.new for ( ) { for ( ) { List<Object>.add } }
if ( ) { IllegalArgumentException.new }
if ( HashSet<String>.contains ) { return ( ) } HashSet<String>.add HashSet<String>.remove
Integer.parseInt if ( String.charAt ) { String.substring } Integer.parseInt
for ( ; ; ) { for ( ; ; ) { Exception.new } }
if ( SwingUtilities.isEventDispatchThread ) { DocumentEvent.getLength }
if ( URI.equals ) { } Arrays.asList ArrayList<Object>.new UUID.randomUUID UUID.toString ArrayList<Object>.add
ByteArrayOutputStream.new for ( ; ; ) { ByteArrayOutputStream.write IllegalArgumentException.new } ByteArrayOutputStream.toByteArray
Map<String,Object>.get return ( Object.toString )
return ( Integer.intValue )
if ( Proxy.type ) { URI.getHost } else { Proxy.address if ( ) { SocketAddress.getClass IllegalArgumentException.new } InetSocketAddress.getHostName InetSocketAddress.getPort }
if ( ) { String.format }
String.lastIndexOf return ( String.substring )
Arrays.asList
if ( ) { HashMap.new } else { Map.clear } if ( ) { Map.get Map.get Map.get Map.get Map.get Map.putAll }
return ( Collections.emptyEnumeration )
ArrayList<Object>.new for ( ; ; ) { for ( ; ; ) { if ( String.equalsIgnoreCase ) { HashSet<Integer>.new for ( ; ; ) { for ( ; ; ) { if ( ) { Set<Integer>.add } } } Set<Integer>.size Set<Integer>.toArray ArrayList<Object>.add } } } ArrayList<Object>.size ArrayList<Object>.toArray
Element.hasChildNodes Element.getChildNodes NodeList.getLength for ( ; ; ) { NodeList.item Text.getNodeValue }
return ( Array.newInstance )
return ( Long.longValue )
if ( Optional<Object>.isPresent ) { ArrayList.new Optional<Object>.get ArrayList<Object>.add return ( ArrayList<Object>.iterator ) } else { return ( ArrayList<Object>.new ArrayList<Object>.iterator ) }
return ( Stream<Entry<Object,Object>>.map )
if ( ) { Collection<Object>.iterator while ( Iterator<Object>.hasNext ) { Iterator<Object>.next } } if ( ) { Collection<Object>.iterator while ( Iterator<Object>.hasNext ) { Iterator<Object>.next } }
return ( String.equals String.equals String.equals )
ArrayList<Integer>.new for ( ; ; ) { for ( ; ; ) { ArrayList<Integer>.add } }
List<Object>.size for ( ; ; ) { List<Object>.get }
for ( ) { Map<Integer,Object>.put }
Integer.toString
if ( ) { ArrayList<Object>.new } List<Object>.add
return ( Map<Object,Object>.get Character.charValue )
if ( List<>.contains ) { RuntimeException.new } else { IllegalArgumentException.new }
StringBuilder.new if ( ) { for ( ) { if ( Map<String,List<String>>.containsKey ) { if ( ) { Map<String,List<String>>.get StringBuilder.append } else { Map<String,List<String>>.get StringBuilder.append } } } } StringBuilder.toString return ( StringBuilder.toString String.trim )
ArrayList.new for ( Map<String,String>.entrySet ) { Entry<String,String>.getKey Entry<String,String>.getValue if ( ) { System.lineSeparator StringBuilder.new for ( ) { System.lineSeparator StringBuilder.append } StringBuilder.append StringBuilder.toString } Entry<String,String>.getKey List<Object>.add }
if ( ) { Exception.getMessage Exception.getMessage Exception.getMessage Exception.getMessage Exception.getMessage }
FileInputStream.new
if ( ) { IllegalStateException.new }
for ( ; ; ) { if ( Float.floatToIntBits Float.floatToIntBits ) { return ( ) } }
Set<Entry<Object,Object>>.iterator if ( ) { while ( Iterator<Entry<Object,Object>>.hasNext ) { Iterator<Entry<Object,Object>>.next if ( Entry<Object,Object>.getKey Object.equals ) { Iterator<Entry<Object,Object>>.remove return ( Entry<Object,Object>.getValue ) } } } else { while ( Iterator<Entry<Object,Object>>.hasNext ) { Iterator<Entry<Object,Object>>.next if ( Entry<Object,Object>.getKey ) { Iterator<Entry<Object,Object>>.remove return ( Entry<Object,Object>.getValue ) } } }
Map<Object,List<String>>.get List<String>.remove
ArrayList.new Map<URI,String>.values for ( Map<URI,String>.entrySet ) { Entry<URI,String>.getKey Entry<URI,String>.getValue List<Object>.add Entry<URI,String>.getValue Exception.getMessage } while ( List<Object>.isEmpty ) { for ( ) { List<URI>.add Map<URI,String>.get List<String>.add List<Object>.remove } for ( ) { List<Object>.remove } }
while ( Enumeration.hasMoreElements ) { Enumeration.nextElement }
if ( List<Object>.size ) { return ( ) } List<Object>.get
if ( ) { NoSuchElementException.new } System.arraycopy
HashMap<String,Attributes>.clear Attributes.clear
return ( EventQueue.isDispatchThread )
AtomicLong.new AtomicInteger.new
if ( ) { Integer.valueOf }
if ( ) { if ( ) { Math.min } }
HashMap<String,Object>.new Map<String,Object>.put Map<String,Object>.put
if ( ) { IllegalStateException.new }
if ( ) { IllegalArgumentException.new }
if ( ) { Collections.emptyList }
if ( ) { if ( ) { IllegalStateException.new } return ( ) } if ( ) { if ( ) { IllegalStateException.new } return ( ) }
Math.abs
HashSet.new for ( ) { Set<String>.add }
RandomAccessFile.close
if ( ArrayList<String>.size ArrayList<String>.get String.length ) { ArrayList<String>.get String.substring String.toUpperCase String.substring String.toLowerCase }
ArrayList<Object>.size ArrayList<Object>.toArray OutputStream.write
if ( List<Object>.size List<Object>.size ) { }
if ( ) { PrintStream.println }
if ( ) { IllegalArgumentException.new }
ByteBuffer.allocate ByteBuffer.order ByteBuffer.put ByteBuffer.put ByteBuffer.putInt ByteBuffer.array
return ( Stack<Long>.pop )
Vector<PropertyChangeListener>.iterator while ( Iterator<PropertyChangeListener>.hasNext ) { Iterator<PropertyChangeListener>.next PropertyChangeListener.propertyChange }
Method.getName Method.getReturnType if ( Class.equals Class.equals ) { }
if ( Vector.contains ) { Vector.addElement } Vector.clone for ( ; Vector.size ; ) { Vector.elementAt if ( ) { ImageConsumer.imageComplete } else { ImageConsumer.imageComplete } }
if ( ) { HashMap.new } HashMap.put
if ( ) { ArrayIndexOutOfBoundsException.new }
ByteBuffer.position ByteBuffer.get ByteBuffer.get
if ( File.isDirectory ) { }
return ( AffineTransform.new )
List<Object>.add List<Object[]>.add
if ( ) { Thread.currentThread Thread.stop }
JSlider.setMajorTickSpacing JSlider.setMinorTickSpacing JSlider.setPaintTicks Hashtable<Integer,JLabel>.new Integer.new JLabel.new Hashtable<Integer,JLabel>.put Integer.new JLabel.new Hashtable<Integer,JLabel>.put Integer.new JLabel.new Hashtable<Integer,JLabel>.put Integer.new JLabel.new Hashtable<Integer,JLabel>.put Integer.new JLabel.new Hashtable<Integer,JLabel>.put JSlider.setLabelTable JSlider.setPaintLabels
if ( String.length String.charAt String.length String.charAt String.compareTo ) { if ( String.length ) { String.substring } else { String.substring } return ( Long.parseLong ) } else { if ( String.length String.charAt String.charAt ) { String.substring Long.parseLong } else { Long.parseLong } return ( ) }
return ( Math.round )
if ( ) { if ( ) { IllegalArgumentException.new } }
return ( String.matches String.matches )
Comparator<Object>.new TreeSet<Object>.new for ( ) { TreeSet<Object>.add }
if ( ) { TextField.new Rectangle.new TextField.setBounds }
if ( ) { IllegalArgumentException.new }
if ( ) { ArrayList<Object>.new }
GridBagConstraints.new Insets.new
Charset.forName OutputStreamWriter.new
if ( Math.abs ) { return ( ) } if ( ) { Math.abs } Float.valueOf
Map<Object,Object>.get if ( ) { Map<Object,Object>.put }
return ( StringBuffer.new StringBuffer.toString )
if ( ) { Class.getName IllegalArgumentException.new } else { if ( ) { return ( Double.doubleValue ) } else { Class.getName Object.getClass Class.getName IllegalArgumentException.new } }
for ( HashMap<Object,HashSet<Object>>.entrySet ) { for ( Entry<Object,HashSet<Object>>.getValue ) { Entry<Object,HashSet<Object>>.getKey } }
for ( ; ; ) { if ( ) { if ( ) { if ( ) { Boolean.parseBoolean } } } } Date.new
for ( ) { return ( ) HashSet<URI>.new if ( ) { InputStream.close } }
String.toCharArray
return ( SingletonList<Object>.new )
URL.toString
for ( ; List<Object>.nonEmpty ; ) { }
SSLSocket.getSession if ( ) { return ( SSLSession.getCipherSuite ) }
PrintStream.println PrintStream.println PrintStream.println if ( ) { PrintStream.println } PrintStream.println PrintStream.println Object.new Object.new PrintStream.println PrintStream.println
HashMap.new Map<Object,Object>.put Map<Object,Object>.put Map<Object,Object>.put Map<Object,Object>.put Map<Object,Object>.put Map<Object,Object>.put
for ( ; BufferedImage.getHeight ; ) { for ( ; BufferedImage.getWidth ; ) { BufferedImage.getRGB BufferedImage.getRGB Color.new Color.getRed Color.getGreen Color.getBlue Color.new Color.getRGB BufferedImage.setRGB } }
Boolean.valueOf
File.new File.new StringBuilder.new File.getAbsolutePath StringBuilder.append File.getAbsolutePath StringBuilder.append File.getAbsolutePath StringBuilder.append if ( String.isEmpty ) { StringBuilder.append } StringBuilder.toString
Paths.get File.new ImageIO.read for ( ; ; ) { PrintStream.printf }
return ( System.getSecurityManager )
for ( ) { String.replace }
if ( ) { Thread.currentThread Thread.getId } if ( ) { RuntimeException.new } if ( ) { RuntimeException.new } if ( ) { RuntimeException.new } WeakReference<Object>.get
BufferedOutputStream.new PrintStream.new
if ( ) { SecureRandom.new }
ArrayList<Object>.new
for ( ; ; ) { if ( ) { if ( ) { Integer.valueOf } else { Integer.valueOf Integer.valueOf } } return ( ) } if ( String.length ) { JOptionPane.showConfirmDialog } for ( ; ; ) { PreparedStatement.executeUpdate PreparedStatement.close return ( ) }
while ( Enumeration.hasMoreElements ) { Enumeration.nextElement }
DocumentBuilderFactory.newInstance DocumentBuilderFactory.setNamespaceAware JAXBContext.createMarshaller DocumentBuilderFactory.newDocumentBuilder DocumentBuilder.newDocument Marshaller.marshal
if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } if ( ) { IllegalArgumentException.new } System.arraycopy Integer.valueOf Integer.valueOf
return ( Arrays.equals )
LinkedHashSet<Integer>.new for ( ; ; ) { LinkedHashSet<Integer>.add }
if ( List<Object>.isEmpty ) { return ( ) } List<Object>.get
JPanel.new JLabel.new JTextField.new JPanel.new JButton.new JButton.new JButton.new GridBagLayout.new Container.setLayout BorderFactory.createEtchedBorder JPanel.setBorder JPanel.setName GridBagLayout.new JPanel.setLayout JLabel.setText JLabel.setName GridBagConstraints.new Insets.new JPanel.add JTextField.setColumns JTextField.setText JTextField.setName KeyAdapter.new JTextField.addKeyListener GridBagConstraints.new Insets.new JPanel.add GridBagConstraints.new Insets.new Container.add JPanel.setName JButton.setText JButton.setName ActionListener.new JButton.addActionListener JPanel.add JButton.setText JButton.setName ActionListener.new JButton.addActionListener JPanel.add JButton.setText JButton.setEnabled JButton.setName JPanel.add GridBagConstraints.new Insets.new Container.add
StringBuilder.new StringBuilder.append if ( ) { StringBuilder.append StringBuilder.append } if ( ) { StringBuilder.append StringBuilder.append } return ( StringBuilder.toString )
if ( ) { return ( Date.new Format.format ) } else { return ( Long.toString ) }
for ( String.split ) { String.split }
if ( ) { if ( ) { Runnable.new } }
return ( BigInteger.longValue BigInteger.longValue )
Set<Object>.retainAll
return ( Integer.intValue )
Math.min
if ( String.equals ) { if ( String.equals ) { if ( String.equals ) { return ( ) } } }
Class.getSimpleName
return ( Integer.intValue )
NotFound.new
EventListenerList.getListenerList
System.currentTimeMillis TreeMap.new for ( NavigableMap<Object,Object>.entrySet ) { Entry<Object,Object>.getKey Entry<Object,Object>.getKey Map<Object,Object>.put }
if ( ) { Collections.emptyList }
Condition.signal
if ( ) { RuntimeException.new }
if ( ) { NullPointerException.new } List<Object>.add
if ( ) { HashMap<URI,Object>.new for ( Map<URI,List<URI>>.entrySet ) { Entry<URI,List<URI>>.getValue for ( ) { if ( Map<URI,Object>.containsKey ) { Map<URI,Object>.put } } Entry<URI,List<URI>>.getKey if ( ) { for ( ) { Map<URI,Object>.get } } } }
if ( ) { if ( ) { if ( ) { if ( ) { Map<String,Object>.put } } } }
if ( String.indexOf ) { }
ArrayList<Object>.new if ( List<Object>.size ) { Collections.sort LinkedList<Object>.new for ( ; List<Object>.size ; ) { List<Object>.get } LinkedList<Object>.add }
List<Integer>.get List<Integer>.size Switch ( ) { case : List<Integer>.iterator while ( Iterator<Integer>.hasNext ) { Iterator<Integer>.next } break case : List<Integer>.iterator while ( Iterator<Integer>.hasNext ) { Iterator<Integer>.next } break }
return ( List<Object>.size )
return ( StringBuilder.toString )
return ( String.endsWith String.startsWith ) FilenameFilter.new File.listFiles for ( ; ; ) { File.getName String.length String.substring File.getParentFile File.new if ( File.exists File.delete ) { File.delete } }
return ( List<Object>.size List<Object>.toArray )
if ( ) { IllegalStateException.new }
CopyOnWriteArrayList<Object>.add
if ( ) { IllegalArgumentException.new }
Set<Object>.add
if ( String.length ) { return ( ) } String.length for ( ; ; ) { String.charAt if ( ) { if ( ) { if ( ) { if ( ) { while ( String.charAt ) { } } } } } }
return ( Integer.intValue )
Integer.parseInt
Files.newBufferedReader StringBuilder.setLength while ( BufferedReader.readLine String.equals ) { StringBuilder.append StringBuilder.append } StringBuilder.toString StringBuilder.new while ( BufferedReader.readLine ) { StringBuilder.append StringBuilder.append } if ( String.equals ) { return ( StringBuilder.toString ) } else { return ( StringBuilder.toString ) } Class.getName Logger.getLogger Logger.log
ArrayList<Object>.new for ( ; List<Object>.size ; ) { List<Object>.get if ( ) { List<Object>.add } }
HashMap<String,Object>.new Map<String,Object>.put Map<String,Object>.put
Runnable.new
HashMap<String,Object>.remove
if ( ) { Properties.getProperty }
if ( BitSet.cardinality ) { return ( ) } while ( ) { if ( BitSet.get ) { return ( ) } }
ObjectOutputStream.defaultWriteObject Set.size HashSet.new for ( Set.iterator ; Iterator.hasNext ; ) { Iterator.next Set.add } ObjectOutputStream.writeObject
return ( InputStreamReader.new BufferedReader.new )
ArrayList<Object>.get for ( ArrayList<Object>.iterator ; Iterator<Object>.hasNext ; ) { Iterator<Object>.next }
Reference<>.hashCode
Math.min if ( ) { if ( ) { if ( ) { Runnable.run } } }
if ( File.exists ) { if ( File.mkdirs ) { File.getAbsolutePath } return ( ) } File.listFiles for ( ) { FileInputStream.new BufferedInputStream.new File.length if ( ) { File.delete } if ( ) { BufferedInputStream.close } }
if ( ) { ExecutorService.shutdownNow }
if ( ) { HashMap<Object,Integer>.put HashMap<Object,Integer>.put if ( ) { HashMap<Object,Integer>.put HashMap<Object,Integer>.put } } else { HashMap<Object,Integer>.put HashMap<Object,Integer>.put }
Exception.getMessage PrintStream.println
for ( ; ; ) { if ( Math.abs ) { Math.abs Math.abs } }
PrintWriter.println String.replace Class.getResource if ( ) { PrintWriter.println } else { PrintWriter.println MessageDigest.getInstance URL.openStream DigestInputStream.new do { DigestInputStream.read } while ( ) ; MessageDigest.digest DigestInputStream.close StringBuilder.new for ( ) { String.format StringBuilder.append } PrintWriter.println PrintWriter.println }
return ( File.getAbsolutePath )
ArrayList<Object>.new DocumentBuilderFactory.newInstance DocumentBuilderFactory.newDocumentBuilder File.new DocumentBuilder.parse
DropTargetDropEvent.getTransferable Transferable.getTransferDataFlavors if ( ) { DropTargetDropEvent.rejectDrop return ( ) } Transferable.getTransferData if ( List<Object>.isEmpty ) { List<Object>.get } if ( List<Object>.isEmpty ) { } DropTargetDropEvent.acceptDrop List<Object>.isEmpty DropTargetDropEvent.dropComplete RuntimeException.new
return ( Long.parseLong )
if ( ) { if ( ) { IllegalArgumentException.new } }
while ( ) { if ( ) { IOException.new } else { if ( ) { IOException.new } else { if ( ) { IOException.new } } } } InterruptedIOException.new
if ( ) { Math.ceil Math.ceil } return ( Math.ceil )
if ( String.equals ) { } File.new if ( File.exists ) { FileInputStream.new FileInputStream.getFD FileInputStream.close }
Class<>.getName
Collection<Object>.stream
if ( ) { Rectangle2D.clone Rectangle2D.getX Rectangle2D.getY Rectangle2D.setFrame Hashtable.put }
CopyOnWriteArrayList<Object>.add
if ( ) { Class.forName Class.newInstance System.currentTimeMillis String.toCharArray Random.setSeed Random.new }
if ( String.startsWith ) { IllegalArgumentException.new } Pattern.matcher if ( Matcher.matches ) { IllegalStateException.new } Matcher.group Matcher.group
ArrayList.new for ( ) { if ( ) { List<Object>.add } else { if ( ) { List<Object>.add } } }
JFileChooser.new File.new JFileChooser.setCurrentDirectory File.new JFileChooser.setSelectedFile JFileChooser.setMultiSelectionEnabled JFileChooser.setFileFilter JFileChooser.setDialogTitle JFileChooser.setApproveButtonText SwingUtilities.getRoot JFileChooser.showSaveDialog if ( ) { JFileChooser.getSelectedFile if ( File.exists ) { JOptionPane.showConfirmDialog } FileOutputStream.new OutputStreamWriter.new PrintWriter.new PrintWriter.close } Exception.getMessage
Vector.new do { Vector.addElement } while ( ) ; for ( ; ; ) { Vector.elementAt }
if ( ) { PrintStream.println } else { Integer.parseInt PrintStream.println FileOutputStream.new while ( ) { PrintStream.println } Exception.getClass Class.getName Exception.getMessage PrintStream.println }
IOException.printStackTrace
Map<String,String>.put
Long.new
if ( String.length ) { for ( ; ; ) { if ( String.charAt Character.toLowerCase Character.toLowerCase Character.toUpperCase Character.toUpperCase ) { return ( ) } } return ( ) }
Map<String,Object>.get FileInputStream.new File.length File.getAbsolutePath IOException.toString
if ( ) { IllegalArgumentException.new } if ( ) { IllegalStateException.new }
if ( ) { if ( ) { return ( Boolean.booleanValue ) } else { if ( ) { return ( Boolean.getBoolean ) } else { if ( ) { return ( Number.doubleValue ) } } } } Object.getClass
if ( ) { return ( InetAddress.internalGetCanonicalHostName ) } if ( String.charAt ) { return ( ) } return ( InetAddress.getByName InetAddress.internalGetCanonicalHostName )
if ( ) { PrintStream.println System.exit } File.new if ( File.exists ) { File.toString FileNotFoundException.new } Properties.new FileInputStream.new BufferedInputStream.new Properties.load InputStream.close RuntimeException.new File.new if ( File.exists ) { File.toString FileNotFoundException.new } Exception.printStackTrace
URL.new
if ( ) { Integer.valueOf }
ReentrantLock.lock ReentrantLock.unlock
Float.floatToRawIntBits
return ( Context.lookup )
System.arraycopy System.arraycopy
if ( ) { RuntimeException.new }
if ( File.exists ) { } if ( File.exists ) { File.getParentFile File.mkdirs } File.getAbsolutePath
if ( ) { Set<Object>.add } else { Set<Object>.remove }
if ( ) { if ( ) { HashSet.new Collections.unmodifiableSet Set.isEmpty } }
ArrayList<Object>.new
StringBuilder.new for ( ) { StringBuilder.append StringBuilder.append StringBuilder.append StringBuilder.append } return ( StringBuilder.toString )
ReadWriteLock.writeLock
return ( ArrayList<Object>.new )
if ( ) { String.format } Map<Object,Object>.get if ( ) { if ( ) { if ( ) { if ( List<URL>.equals ) { } } } } if ( ) { Map<Object,Object>.put }
if ( ) { NullPointerException.new }
ArrayList<Object>.new List<Object>.add List<Object>.add
if ( String.contains String.contains String.contains String.contains ) { return ( String.replace String.replace String.replace String.replace ) }
if ( ) { Class.getName }
if ( ) { ServerSocket.close return ( ) }
Long.valueOf
return ( DocumentEvent.getDocument if ( Document.getLength ) { Document.getLength Document.getText Integer.parseInt } DocumentListener.new )
Graphics2D.setStroke Graphics2D.setColor Graphics2D.setTransform Graphics2D.setComposite Graphics2D.setFont
Node.getChildNodes for ( ; NodeList.getLength ; ) { NodeList.item } for ( ; NodeList.getLength ; ) { NodeList.item }
String.valueOf
System.currentTimeMillis System.currentTimeMillis while ( ) { Thread.sleep System.currentTimeMillis }
AtomicReference<Object>.get CompletableFuture.new if ( ) { if ( ) { CompletableFuture<Void>.complete } else { ScheduledExecutorService.schedule } Runnable.new ScheduledExecutorService.execute } else { CompletableFuture<Void>.complete }
Array.getLength
if ( ) { ArrayIndexOutOfBoundsException.new }
TypeMismatch.new
if ( String.length ) { return ( ) }
return ( String.new )
return ( Rectangle2D.getMaxX Math.max )
if ( Lock.tryLock ) { System.currentTimeMillis return ( ) return ( ) System.currentTimeMillis Lock.unlock }
StringBuilder.new for ( ; ; ) { Integer.toHexString StringBuilder.append } return ( StringBuilder.toString )
if ( ) { if ( ) { BigDecimal.add } if ( ) { BigDecimal.add } }
List<Object>.add
for ( ; List<Integer>.size ; ) { List<Integer>.get }
return ( Class<Object>.getEnumConstants Arrays.asList )
for ( Map<Object,Double>.entrySet ) { if ( Entry<Object,Double>.getValue ) { Entry<Object,Double>.getKey Entry<Object,Double>.getValue } }
ByteBuffer.wrap return ( ByteBuffer.order ByteBuffer.getInt )
if ( Float.isNaN ) { IllegalArgumentException.new } else { if ( ) { String.format IllegalArgumentException.new } else { if ( ) { String.format IllegalArgumentException.new } } }
HashSet<Object>.new HashSet<Object>.removeAll HashSet<Object>.removeAll HashSet<Object>.removeAll if ( HashSet<Object>.size ) { if ( System.currentTimeMillis ) { return ( ) } HashSet<Object>.new HashSet<Object>.removeAll HashSet<Object>.removeAll } if ( HashSet<Object>.size ) { if ( ) { HashSet<Object>.iterator } else { if ( ) { ArrayList<Object>.new } } } if ( ) { Set<Object>.add }
return ( Map<String,Object>.get )
Math.abs Math.abs Math.abs Math.abs Math.abs Math.abs Math.abs Math.abs Math.min Math.min Math.min Math.min Math.min Math.min Math.hypot Math.hypot return ( Math.min )
return ( ArrayList.size )
if ( ) { return ( ) FileNotFoundException.new } else { if ( ) { FileNotFoundException.new } return ( ) InputStream.close } FileNotFoundException.getMessage
Map<String,Object>.put while ( Enumeration<String>.hasMoreElements ) { Enumeration<String>.nextElement }
if ( ) { Thread.new Thread.start }
return ( if ( ) { for ( ; List<Object>.size ; ) { List<Object>.get } } return ( ) return ( ) return ( ) ArrayList<Object>.new List<Object>.addAll List<Object>.add return ( ) )
Optional<Object>.isPresent Optional<Object>.get Optional<Object>.get Optional<Object>.get
if ( ) { if ( ) { Map<String,Object>.size Map<String,Object>.keySet } Map<String,Object>.keySet Set.iterator while ( Iterator<String>.hasNext ) { Iterator<String>.next } }
if ( ) { Hashtable.keySet Set.size Vector.new Set.iterator while ( Iterator.hasNext ) { Iterator.next Class.forName Vector.add } } Vector.iterator while ( Iterator.hasNext ) { Iterator.next if ( Class.isAssignableFrom ) { return ( ) } }
if ( ) { NullPointerException.new }
return ( Map<String,Object>.get )
return ( AtomicLong.get )
if ( ) { IllegalArgumentException.new }
return ( List<Object>.get )
Class.getResource if ( ) { URL.openStream InputStreamReader.new BufferedReader.new BufferedReader.readLine BufferedReader.readLine IOException.printStackTrace }
if ( ) { ArithmeticException.new }
return ( AtomicInteger.get )
Element.setUserData Element.setUserData Attr.setUserData Text.setUserData Element.cloneNode Element.getAttributeNode HashSet<String>.new Set<String>.add Set<String>.add Set<String>.add
NamingContextExt.unbind NameNotFoundException.new ContextNotEmptyException.new InvalidNameException.new
Lock.lock if ( Map<URI,Object>.containsKey ) { Map<URI,Object>.put Condition.signalAll } Lock.unlock
if ( ) { RuntimeException.new } ArrayList<Object>.new List<Object>.addAll List<Object>.add return ( Collections.unmodifiableList )
if ( ) { IllegalStateException.new } Set<Object>.add Runnable.new
WriteLock.lock WriteLock.unlock
if ( ) { IllegalArgumentException.new }
if ( TreeMap<String,String>.size TreeMap<String,String>.size ) { return ( ) } TreeMap<String,String>.entrySet Set.iterator TreeMap<String,String>.entrySet Set.iterator while ( Iterator<Entry<String,String>>.hasNext ) { Iterator<Entry<String,String>>.next Iterator<Entry<String,String>>.next if ( Entry<String,String>.getKey Entry<String,String>.getKey String.equals ) { return ( ) } if ( Entry<String,String>.getValue Entry<String,String>.getValue String.equals ) { return ( ) } }
if ( ) { SignatureException.new }
UnsupportedOperationException.new
ArrayList<Object>.new for ( ; List<Object>.size ; ) { List<Object>.get if ( ) { List<Object>.set } }
return ( Enumeration<Object>.hasMoreElements )
JTextField.setText
InetAddress.getAddress return ( Arrays.equals )
if ( Thread.currentThread Thread.isInterrupted ) { return ( ) }
return ( return ( ) Function<Double,Double>.new )
if ( ) { IllegalArgumentException.new }
Math.sqrt Math.min Math.round Math.round
return ( ThreadLocal<Boolean>.get )
QName.getLocalPart if ( String.equals ) { return ( ) }
if ( String.isEmpty ) { } if ( String.isEmpty ) { } if ( String.isEmpty ) { }
if ( ) { IllegalArgumentException.new }
List<Object>.addAll List<Object>.size Collection<>.size Collection<>.size Collection<>.size
HashSet.new HashSet.new
while ( Math.floor ) { } return ( DecimalFormat.format )
Vector<AccessibleRelation>.size while ( ) { if ( Vector<AccessibleRelation>.get String.equals ) { return ( ) } }
ArrayList<Object>.new ArrayList<Object>.new ArrayList<Object>.new ArrayList<Object>.new
String.valueOf
Double.new if ( List<Object>.size ) { for ( ; List<Object>.size ; ) { List<Object>.get } }
if ( ) { NullPointerException.new }
ConcurrentSkipListMap<Object,Object>.new ConcurrentSkipListSet<Object>.setMap InternalError.new
HashMap.get return ( Boolean.booleanValue )
if ( String.equals ) { }
if ( Map<String,String>.containsKey ) { return ( Map<String,String>.get ) } Map<String,String>.put
if ( ) { if ( ) { Boolean.toString } } else { IllegalStateException.new }
if ( ) { if ( ) { return ( Boolean.booleanValue ) } return ( String.equals ) }
HashSet.new HashSet.new if ( ) { if ( ) { Set<File>.add } else { Set<File>.add } }
SimpleDateFormat.new SimpleDateFormat.setTimeZone
if ( ) { Object.getClass Class.getName MissingResourceException.new }
return ( Arrays.asList )
if ( ) { IllegalArgumentException.new }
if ( ) { Math.max }
if ( ) { String.valueOf NoSuchElementException.new }
if ( ) { SAXException.new } List<Object>.add
if ( LinkedList.isEmpty ) { for ( LinkedList.iterator ; Iterator.hasNext ; ) { Iterator.next if ( ) { if ( ) { if ( ) { Iterator.remove LinkedList.addLast return ( ) } } } } }
DatagramSocket.new Inet4Address.getByName DatagramSocket.connect
Set<Object>.add if ( List<Object>.size ) { return ( ) } for ( ) { LinkedList.new List<Object>.remove List<Object>.size while ( ) { List<Object>.get List<Object>.get if ( ) { if ( ) { Queue<Object>.add Queue<Object>.add Queue<Object>.add if ( ) { Queue<Object>.add } } } } }
if ( ) { Thread.interrupt Thread.join InterruptedException.getMessage } ByteArrayOutputStream.close IOException.getMessage
if ( ) { EOFException.new }
Object.getClass Introspector.getBeanInfo BeanInfo.getPropertyDescriptors for ( ; Iterator.hasNext ; ) { Iterator.next if ( ) { if ( ) { List.add } } }
return ( URI.toURL ) URI.toString
HashMap<String,Object>.get
Math.max Math.min
return ( List<Object>.iterator )
if ( ) { IllegalArgumentException.new }
if ( ) { return ( Locale.getDefault String.toLowerCase Locale.getDefault String.toLowerCase String.indexOf ) }
TreeMap<Long,Object>.floorEntry return ( Entry<Long,Object>.getValue )
List<Object>.add
PrintStream.println for ( ; ; ) { PrintStream.println } for ( ; ; ) { PrintStream.println } for ( ; ; ) { PrintStream.println } for ( ; ; ) { PrintStream.println } for ( ; ; ) { PrintStream.println } for ( ; ; ) { PrintStream.println }
StringBuilder.new while ( ) { InputStream.read if ( ) { EOFException.new } StringBuilder.append } StringBuilder.length if ( StringBuilder.charAt ) { StringBuilder.setLength } return ( StringBuilder.toString )
if ( ) { Closeable.close }
if ( Map<Object,Boolean>.get ) { return ( ) }
String.valueOf IllegalStateException.new
PrintStream.println PrintStream.println PrintStream.println PrintStream.println
ArrayList<String>.new for ( Map.keySet ) { StringBuilder.new StringBuilder.append StringBuilder.append Map.get StringBuilder.append StringBuilder.toString List<String>.add }
ReentrantReadWriteLock.readLock ReadLock.lock ReentrantReadWriteLock.readLock ReadLock.unlock
if ( ) { Class.getClasses } else { Class.getDeclaredClasses } for ( ; ; ) { if ( Class.getModifiers ) { Class.getName if ( StringBuffer.toString String.lastIndexOf ) { StringBuffer.append } } } if ( Class.isInterface ) { Class.getSuperclass }
ByteArrayOutputStream.new while ( InputStream.read ) { ByteArrayOutputStream.write } ByteArrayOutputStream.toByteArray ByteArrayOutputStream.close
if ( ) { return ( BufferedImage.getRaster BufferedImage.isAlphaPremultiplied BufferedImage.new ) } if ( BufferedImage.getType BufferedImage.getType BufferedImage.getType ) { return ( BufferedImage.getWidth BufferedImage.getHeight BufferedImage.getType BufferedImage.new ) } else { return ( BufferedImage.getWidth BufferedImage.getHeight BufferedImage.new ) }
IdentityHashMap.new
if ( ) { if ( ) { Math.min } }
HashMap<String,Object>.put
return ( String.new )
List<String>.size Map<String,Object>.get
Map<Class<Object>,Object>.get Array.newInstance Map<Class<Object>,Object>.put
if ( ) { String.format }
Map<Integer,String>.keySet Set.size ArrayList<Object>.new for ( Map<Integer,String>.keySet ) { Integer.intValue List<Object>.add }
Long.parseLong
Class.getDeclaredMethod Method.setAccessible return ( Method.invoke )
File.new File.delete System.gc
Double.doubleToLongBits
return ( String.valueOf )
Math.random String.valueOf
return ( Integer.intValue )
if ( ) { DataInputStream.readByte }
return ( Long.signum )
Array.getLength if ( ) { Object.getClass Class.getComponentType if ( Class<>.isPrimitive ) { Map<Class<Object>,Integer>.get } }
Map<Integer,Object>.put Exception.printStackTrace
return ( Collections.unmodifiableList )
for ( Map<String,Object>.entrySet ) { Entry<String,Object>.getKey if ( ) { Entry<String,Object>.getValue } }
if ( ) { Error.new }
if ( Vector<Object>.size ) { Vector<Object>.removeAllElements }
return ( Node.insertBefore )
if ( ) { Math.round }
if ( ) { if ( ) { return ( Math.abs ) } else { if ( ) { return ( Math.abs ) } } }
Condition.signal
return ( Map<String,Object>.get )
if ( String.matches ) { Integer.parseInt return ( ) } else { String.trim } for ( ) { if ( String.equals ) { } }
Runtime.getRuntime Runtime.exec Process.getErrorStream Thread.new Thread.start Process.getInputStream InputStream.close Process.destroy Arrays.toString
for ( ; ; ) { Vector.new }
ArrayDeque.new
ArrayList.new for ( ) { if ( ) { if ( String.equals ) { ArrayList<Object>.add } } } Runnable.new
return ( List<Object>.size )
if ( ) { IllegalArgumentException.new }
if ( ) { IllegalStateException.new }
if ( Pattern.matcher Matcher.matches Pattern.matcher Matcher.matches ) { return ( ) } ParsePosition.new SimpleDateFormat.parse return ( Date.getTime )
if ( ) { HashSet.new Set.iterator while ( Iterator.hasNext ) { Iterator.next if ( String.equalsIgnoreCase ) { Set.add } } return ( ) }
if ( ) { while ( Enumeration.hasMoreElements ) { Enumeration.nextElement } } while ( Enumeration.hasMoreElements ) { Enumeration.nextElement }
JList<Object>.getSelectedValuesList JButton.setEnabled JButton.setEnabled
if ( File.exists ) { if ( File.mkdirs ) { File.getAbsolutePath } return ( ) } File.listFiles for ( ) { FileInputStream.new BufferedInputStream.new File.length if ( ) { File.delete } if ( ) { BufferedInputStream.close } }
StringWriter.new PrintWriter.new Throwable.printStackTrace return ( StringWriter.getBuffer StringBuffer.toString )
while ( ) { ConcurrentHashMap<Object,AtomicLong>.get if ( ) { AtomicLong.new ConcurrentHashMap<Object,AtomicLong>.putIfAbsent } while ( ) { AtomicLong.get if ( ) { if ( AtomicLong.new ConcurrentHashMap<Object,AtomicLong>.replace ) { return ( ) } continue } if ( AtomicLong.compareAndSet ) { return ( ) } } }
if ( String.isEmpty ) { return ( ) }
if ( ) { if ( ) { IllegalArgumentException.new } } else { if ( ) { IllegalArgumentException.new } } for ( ; ; ) { if ( ) { System.arraycopy } }
DataOutputStream.write DataOutputStream.writeByte DataOutputStream.writeByte DataOutputStream.writeInt for ( ; ; ) { DataOutputStream.writeInt }
String.format
if ( Object.getClass Class.equals ) { String.equals }
Stack.removeAllElements
List.add
Object.wait
Class.getSimpleName System.exit
if ( Object.getClass Class.equals ) { return ( String.isEmpty ) } if ( Object.getClass Class.isArray ) { return ( Array.getLength ) } if ( ) { return ( Collection<>.isEmpty ) } Object.getClass Class.getName IllegalArgumentException.new
Executors.newFixedThreadPool HashMap<Object,Object>.new ArrayList<Object>.new List<Object>.add List<Object>.add List<Object>.add IOException.new CountDownLatch.new CountDownLatch.await RuntimeException.new Map<Object,Object>.put Map<Object,Object>.put CountDownLatch.countDown ExecutorService.isShutdown
Map<Object,Object<Object,Object>Object>.isEmpty Map<Object,Object<Object,Object>Object>.size
for ( Map<String,Object>.values ) { }
if ( ) { Set<Object>.size Set<Object>.toArray for ( ) { if ( UUID.getMostSignificantBits UUID.getMostSignificantBits ) { } } return ( ) }
return ( UUID.randomUUID UUID.toString )
if ( ) { Color.getRed Color.getGreen Color.getBlue Color.new }
System.arraycopy System.arraycopy
Collection<Object>.size HashSet<Object>.new Set<Object>.addAll
TreeMap<Integer,String>.new if ( SortedMap<Integer,String>.put ) { String.format RuntimeException.new }
for ( ; ; ) { if ( ) { if ( Object.equals ) { } } }
if ( Thread.isInterrupted ) { Thread.interrupt }
if ( ) { if ( ) { if ( List<Object>.size ) { return ( List<Object>.get ) } } }
if ( ) { IllegalArgumentException.new } TreeSet.iterator if ( Iterator.hasNext ) { return ( Iterator.next ) }
if ( ) { NullPointerException.new } if ( String.equals ) { IllegalArgumentException.new }
if ( ) { return ( String.replace ) }
if ( ) { SocketException.new } SocketImpl.getOption if ( ) { return ( Integer.intValue ) } else { SocketException.new }
Hashtable.clone
while ( ) { return ( File.toString ) }
if ( ) { DropTarget.addNotify }
if ( ) { if ( List<Object>.isEmpty ) { List<Object>.size List<Object>.get } } File.new return ( File.isFile )
List<Object>.remove
return ( DateFormat.getDateTimeInstance DateFormat.format )
StringBuilder.append
return ( Collections.emptyList )
EventListenerList.getListenerList
Properties.getProperty
return ( Math.max )
if ( ) { RuntimeException.new }
return ( HashMap<Object,HashSet<Object>>.put )
return ( AtomicReferenceFieldUpdater<Object,Object>.compareAndSet )
Math.sin Math.cosFromSin Math.sin Math.cosFromSin Math.sin Math.cosFromSin
if ( Process.readProcFile ) { return ( ) }
HashMap<String,JMenuItem>.get JMenuItem.setEnabled
if ( ) { IOException.new } if ( ) { IOException.new } if ( ) { IOException.new } if ( ) { IOException.new } if ( ) { IOException.new } if ( ) { IOException.new } if ( ) { IOException.new } Throwable.new IOException.new
CompletableFuture.new return ( Callable<Object>.call ) CompletableFuture<Object>.complete ExecutionException.getCause CompletableFuture<Object>.completeExceptionally CompletableFuture<Object>.completeExceptionally Thread.currentThread Thread.interrupt SwingWorker<Object,Void>.new SwingWorker<Object,>.addPropertyChangeListener SwingWorker<Object,>.execute
ThreadLocal<ArrayList<Object>>.get ArrayList<Object>.add if ( ) { ArrayList<Object>.size for ( ; ; ) { ArrayList<Object>.get } }
System.arraycopy
List<Object>.add
return ( Math.max Math.min )
if ( ) { Integer.valueOf }
for ( ; ; ) { if ( String.startsWith ) { return ( ) } }
DeflaterPending.reset DeflaterEngine.reset
if ( ) { RuntimeException.new }
if ( ) { RuntimeException.new } if ( ) { if ( ) { if ( ) { if ( ) { UnsupportedOperationException.new } } } } Integer.toHexString UnsupportedOperationException.new
if ( ) { NullPointerException.new }
return ( Object.getClass )
if ( ) { FileHandler.new return ( ) } else { ConsoleHandler.new } Handler.setLevel Handler.setFormatter if ( ) { InetAddress.getByName return ( ) } while ( ) { Thread.sleep if ( ) { Thread.currentThread Thread.interrupt } } Runtime.getRuntime Runtime.addShutdownHook
if ( ) { Math.max System.arraycopy }
Comparator<Object>.new TreeSet<Object>.new for ( ; ; ) { if ( ) { Set<Object>.add } } for ( ) { if ( Set<Object>.remove ) { } } HashSet<Object>.new for ( ) { if ( Set<Object>.add ) { } }
String[].clone
if ( ) { if ( ) { PrintStream.println } }
URI.toString HashMap<String,String>.new Map<String,String>.put if ( ) { if ( ) { String.format } } Exception.getMessage String.format
Map<String,String>.put
if ( ) { System.arraycopy } else { System.arraycopy System.arraycopy }
if ( ) { Process.getLog PrintWriter.new } else { if ( String.equals ) { PrintWriter.new } else { if ( String.equals ) { PrintWriter.new } else { Process.resolveFileName Process.getRootOperator Charset.defaultCharset Charset.defaultCharset FileOutputStream.new OutputStreamWriter.new PrintWriter.new Process.getLog IOException.getClass IOException.getMessage Process.getLog PrintWriter.new } } }
if ( ) { IllegalArgumentException.new }
if ( ) { ReadOnlyBufferException.new } if ( ) { IllegalArgumentException.new } ByteBuffer.remaining if ( ) { BufferOverflowException.new } ByteBuffer.isDirect ByteBuffer.position if ( ByteBuffer.isDirect ) { } ByteBuffer.isDirect ByteBuffer.position if ( ByteBuffer.isDirect ) { } ByteBuffer.limit ByteBuffer.position ByteBuffer.position ByteBuffer.position
ByteArrayInputStream.new ByteArrayInputStream.new ByteArrayInputStream.new ByteArrayInputStream.new ByteArrayInputStream.new ByteArrayInputStream.new ByteArrayInputStream.new String.new PrintStream.println String.startsWith String.new PrintStream.println String.startsWith
if ( ) { if ( ) { Object.getClass Class.toString IllegalArgumentException.new } }
return ( String.indexOf )
for ( ) { if ( String.equals ) { System.arraycopy return ( ) } }
if ( AtomicLong.get ) { AtomicLong.set }
for ( ; ArrayList<Object>.size ; ) { if ( ArrayList<Object>.get ) { if ( ArrayList<Object>.get ) { return ( ArrayList<Object>.get ) } } }
if ( ) { InetAddress.getByName } Switch ( ) { default : ServerSocketFactory.getDefault return ( ServerSocketFactory.createServerSocket ) case : SSLServerSocketFactory.getDefault return ( SSLServerSocketFactory.createServerSocket ) case : SSLServerSocketFactory.getDefault SSLServerSocketFactory.createServerSocket SSLServerSocket.setNeedClientAuth return ( ) }
Lock.lock if ( ) { Condition.signal } Lock.unlock
JTabbedPane.add JTabbedPane.add
return ( Thread.currentThread Thread.getContextClassLoader ClassLoader.loadClass Class<>.newInstance Class<>.getMethod return ( Method.invoke ) Throwable.getMessage return ( ) PrivilegedAction<Object>.new AccessController.doPrivileged )
if ( ) { if ( ) { return ( File.getAbsolutePath ) } }
if ( ) { String.split }
return ( Collections.emptyMap )
return ( Long.intValue )
String.valueOf
ByteArrayInputStream.new
return ( String.equals )
StringBuilder.new StringBuilder.append StringBuilder.append return ( StringBuilder.toString )
return ( String.format )
Map<Object,JPanel>.put Map<Object,JPanel>.put Map<Object,JPanel>.put Map<Object,JPanel>.put JTextField.getDocument DocumentListener.new Document.addDocumentListener JList<Object>.setCellRenderer JList<Object>.setSelectionMode JList<Object>.getSelectionModel ListSelectionEvent.getFirstIndex JButton.setEnabled ListSelectionListener.new ListDataListener.new DefaultListModel<Object>.addListDataListener Runnable.new SwingUtilities.invokeLater
FileInputStream.new while ( InputStream.read ) { PrintStream.write }
if ( ) { HashMap.new }
System.nanoTime
if ( ) { PrintStream.println return ( ) } for ( ; ; ) { PrintStream.println if ( ) { PrintStream.println } else { if ( ) { PrintStream.println } else { if ( ) { PrintStream.println } } } }
if ( ) { AssertionError.new } Switch ( ) { case : if ( List<Object>.get List<Object>.get ) { List<Object>.get List<Object>.get } } AssertionError.new
Object.notifyAll
if ( ) { CancellationException.new return ( ) } if ( ) { String.format CancellationException.new return ( ) } if ( AtomicLong.get ) { return ( ) } AtomicLong.incrementAndGet ConcurrentLinkedQueue<Object>.add
for ( ; ; ) { if ( Optional<Object>.isPresent ) { if ( Optional<Object>.isPresent ) { Optional<Object>.get } } } if ( ) { return ( Optional.of ) } return ( Optional.empty )
if ( ) { if ( JSplitPane.isOneTouchExpandable ) { if ( ) { Math.max Math.min JButton.setBounds JButton.setBounds } else { Math.max Math.min JButton.setBounds JButton.setBounds } } else { JButton.setBounds JButton.setBounds } }
return ( JAXBElement<String>.new )
HashMap<String,String>.new Map<String,String>.put Map<String,String>.put Map<String,String>.put
System.nanoTime
if ( ) { IllegalArgumentException.new }
Locale.toString
if ( ) { Long.new Long.new } if ( ) { if ( ) { if ( ) { Long.new Long.new } } }
if ( ) { if ( ) { NullPointerException.new } List<Object>.add }
if ( ) { System.arraycopy }
return ( Arrays.asList )
Integer.new
if ( ) { Integer.valueOf }
return ( Charset.forNameUEE )
if ( ) { IOException.new } if ( ) { if ( ) { IOException.new } }
if ( File.new File.isAbsolute ) { return ( ) } for ( ) { File.new if ( File.exists ) { return ( File.getAbsolutePath ) } if ( ) { if ( String.endsWith ) { String.lastIndexOf String.substring File.new if ( File.exists ) { return ( File.getAbsolutePath ) } } } }
String.substring String.toUpperCase String.substring String.toUpperCase return ( String.equals String.equals )
if ( ) { NullPointerException.new }
if ( List<Integer>.size ) { } List<Integer>.get
if ( String.compareTo String.compareTo ) { return ( ) }
if ( ) { Thread.new Thread.start }
Selector.open ServerSocketChannel.register Selector.select Selector.selectedKeys Set<SelectionKey>.iterator while ( Iterator<SelectionKey>.hasNext ) { Iterator<SelectionKey>.next Iterator<SelectionKey>.remove if ( ) { AssertionError.new } break } SelectionKey.cancel Selector.close
for ( ; Iterator.hasNext ; ) { Iterator.next List.add }
ByteArrayInputStream.read if ( ) { RuntimeException.new } for ( ; ; ) { ByteArrayInputStream.read }
Runnable.new
if ( ) { System.exit }
return ( Class<Object>.getSimpleName )
if ( Double.isNaN Double.isNaN Double.isNaN ) { return ( ) } return ( Math.sqrt Math.max )
IllegalStateException.new
Attr.getValue
Pattern.matcher Matcher.replaceAll String.format String.replaceAll String.trim
if ( ) { String.replace if ( Map<String,String>.containsKey ) { if ( ) { Map<String,String>.put } else { Map<String,String>.put String.replace Map<String,String>.get Map<String,String>.put } } return ( Map<String,String>.get ) }
if ( ) { IllegalStateException.new } List.remove
return ( Long.toUnsignedString )
ArrayList.new if ( ) { if ( ) { List<String>.add } else { List<String>.add } } if ( ) { Switch ( ) { case : List<Object>.get break case : List<Object>.get List<Object>.get break } if ( ) { List<String>.add } }
HashMap.new
if ( ) { if ( ) { return ( Boolean.booleanValue ) } return ( String.equals ) }
Math.ceil Math.ceil
if ( ) { String.clear return ( ) } if ( String.getFinalConversionMode ) { return ( ) } String.addStep if ( String.getFinalConversionMode ) { String.addStep }
ArrayList<Object>.new List<Object>.get ArrayList<Object>.new do { List<Object>.get if ( ) { if ( ) { List<Object>.add ArrayList<Object>.new } } else { List<Object>.add } } while ( ) ;
ArrayList.new List<Object>.add List<Object>.add List<Object>.add List<Object>.add
return ( List<String>.size )
return ( Double.doubleValue )
if ( ) { Logger.log return ( ) } if ( ) { OutputStream.close } Logger.log
Long.equals
HashSet<Object>.new for ( ) { Set<Object>.add }
String.intern
for ( ) { Math.abs Math.abs }
for ( ; ; ) { Switch ( ) { case : FileOutputStream.write FileOutputStream.write break case : FileOutputStream.write FileOutputStream.write break default : FileOutputStream.write FileOutputStream.write } }
PrintStream.println
if ( ) { IllegalArgumentException.new } if ( ) { ArrayIndexOutOfBoundsException.new }
while ( ) { Node.getNodeName Node.getNodeType if ( ) { if ( String.equalsIgnoreCase ) { return ( ) } if ( String.equalsIgnoreCase ) { Node.getAttributes for ( ; NamedNodeMap.getLength ; ) { NamedNodeMap.item if ( Node.getNodeName String.equalsIgnoreCase ) { return ( Node.getNodeValue URL.new ) } } } } }
Switch ( ) { case : UnsupportedEncodingException.getMessage RuntimeException.new break case : UnsupportedEncodingException.getMessage RuntimeException.new break }
if ( ) { Runtime.getRuntime Runtime.totalMemory Runtime.getRuntime Runtime.freeMemory } ForkJoinPool.submit ForkJoinTask.join LongSummaryStatistics.toString if ( ) { Runtime.getRuntime Runtime.totalMemory Runtime.getRuntime Runtime.freeMemory return ( ) }
UnsupportedOperationException.new
if ( ) { List<Object>.remove }
for ( ; ; ) { Map<Object,Object>.put }
Map<String,JavaFileObject>.putAll
Map<String,Object>.put Map<String,Object>.put Map<String,Object>.put Map<String,Object>.put Calendar.getInstance Calendar.get String.valueOf Map<String,Object>.put Map<String,Object>.put Map<String,Object>.put Map<String,Object>.put String.equals Map<String,Object>.put Map<String,Object>.put if ( ) { if ( ) { Map<String,Object>.put } else { Map<String,Object>.put } Map<String,Object>.put } if ( Map<String,Object>.get ) { Map<String,Object>.put }
ArrayList<Object>.new for ( ) { List<Object>.add }
if ( ) { Integer.valueOf }
return ( Map<String,String>.get )
if ( ) { return ( Set<Object>.size ) }
